package minisql;




import java_cup.runtime.Symbol;

import java.util.LinkedList;
import java.util.Stack;
import java.io.FileOutputStream;
import java.io.PrintWriter;

parser code
{:

 
    
    private Symbol s;
    public int cont = 0;
    public String errores="";
    public String path = "";
    public LinkedList<Tabla> Lista_tablas = new LinkedList<Tabla>();

    public LinkedList<Tabla_alias> Lista_tablas_alias = new LinkedList<Tabla_alias>();
    public LinkedList<Campo_alias> Lista_aux_group_by = new LinkedList<Campo_alias>();
    public LinkedList<Campo_alias> Lista_aux_having = new LinkedList<Campo_alias>();
    public LinkedList<Campo_alias> Lista_aux_order_by = new LinkedList<Campo_alias>();
    public LinkedList<String> Lista_aux_concatenar = new LinkedList<String>();
   public LinkedList<Campo_alias> Lista_select = new LinkedList<Campo_alias>();
   public LinkedList<String> errores_semanticos = new LinkedList<String>();
    public LinkedList<String> Lista_bases = new LinkedList<String>();
    Tabla t;
    Campo c;

   public String ambito="";


    public LinkedList<Funcion> Lista_funciones = new LinkedList<Funcion>();
    Stack<String> transacciones=new Stack<>();
    public LinkedList<Variable> Lista_variables  = new LinkedList<Variable>();
    public LinkedList<String> Lista_nombre = new LinkedList<String>();

    public LinkedList<Comparacion> Lista_aux_where  = new LinkedList<Comparacion>();

    public void IniciarParse()
    {
        Lista_bases.add("master");

        t = new Tabla(); t.setNombre("Carrera"); t.setSchema("NASCAR"); t.setAmbito("master"); 
        c = new Campo(); c.setNombre("NombreGP"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Año"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FechaHoraInicio"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("NumVueltas"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("NombreCircuito"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        Lista_bases.add("Motociclismo");
        t = new Tabla(); t.setNombre("Circuito"); t.setSchema("NASCAR"); t.setAmbito("Motociclismo"); 
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Pais"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Tipo"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Longitud"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("Diseñador"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("CONSULTAS_SQL"); t.setSchema("dbo"); t.setAmbito("Motociclismo"); 
        c = new Campo(); c.setNombre("ID_CONSULTA"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("CONSULTA"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Escuderia"); t.setSchema("NASCAR"); t.setAmbito("Motociclismo"); 
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Manager"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FabricanteMotor"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Sede"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Piloto"); t.setSchema("NASCAR"); t.setAmbito("Motociclismo"); 
        c = new Campo(); c.setNombre("Codigo"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nacionalidad"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FechaNacimiento"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CarreraDebut"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("NombreEscuderia"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Resultado"); t.setSchema("NASCAR"); t.setAmbito("Motociclismo"); 
        c = new Campo(); c.setNombre("NombreGP"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Año"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodPiloto"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Puesto"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("DistanciaGanador"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);

        t = new Tabla(); t.setNombre("CalendarioVacunacion"); t.setSchema("dbo"); t.setAmbito("master"); 
        c = new Campo(); c.setNombre("Fecha"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Enfermedad"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoPaciente"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        Lista_bases.add("Veterinaria");
        t = new Tabla(); t.setNombre("Cliente"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("DPI"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("NIT"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Numero"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Direccion"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Correo"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Clinica"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Codigo"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Direccion"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Consulta"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Sala"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioFijo"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("NumeroOperaciones"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("NumeroVacunas"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("NumeroPruebasEspecificas"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioOperaciones"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioVacunas"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioPruebasEspecificas"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoPaciente"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("NombreVeterinario"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FECHA"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Diagnostico"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Resultado"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("PruebaEspecifica"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Lugar"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FechaPrueba"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoPaciente"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Factura"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Numero"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Detalle"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Importe"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("TOTAL"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoClinica"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("NITCliente"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("HistorialMedico"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("MotivoVisita"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FechaVisita"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoPaciente"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("ResultadoDiagnostico"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Laboratorio"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NIT"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Direccion"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Medicina"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Codigo"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioUnitario"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("OperacionQuirurgica"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("CodigoClinica"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Quirofano"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("NombreVeterinario"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Fecha"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Duracion"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Obervaciones"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Paciente"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Codigo"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Especie"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Raza"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("ColorPelo"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("FechaNacimiento"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("PesoMedio"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoClinica"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("NITCliente"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Producto"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Codigo"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("PrecioUnitario"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Proveedor"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NIT"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Direccion"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("SuministraFarmacia"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NITLaboratorio"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoMedicina"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("SuministraTienda"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NITProveedor"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoProducto"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Tratamiento"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Medicamento"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Dosificacion"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Duracion"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("Resultado"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoPaciente"); c.setData_tipo("string"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("VentaFarmacia"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NITCliente"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoMedicina"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Fecha"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoClinica"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("VentaTienda"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("NITCliente"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoProducto"); c.setData_tipo("int"); t.campos.add(c);
        c = new Campo(); c.setNombre("Fecha"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("CodigoClinica"); c.setData_tipo("int"); t.campos.add(c); Lista_tablas.add(t);
        t = new Tabla(); t.setNombre("Veterinario"); t.setSchema("dbo"); t.setAmbito("Veterinaria"); 
        c = new Campo(); c.setNombre("Nombre"); c.setData_tipo("string"); t.campos.add(c);
        c = new Campo(); c.setNombre("SalarioBase"); c.setData_tipo("float"); t.campos.add(c);
        c = new Campo(); c.setNombre("Salario"); c.setData_tipo("float"); t.campos.add(c); Lista_tablas.add(t);
        
        try
        {
            PrintWriter pw = new PrintWriter(new FileOutputStream(path, false));
            pw.print("");
            pw.close();
            Escribir();
        }
        catch(Exception e)
        {
            
        }

    }

    public void Escribir()
    {
        String separador = "------------------------------------------------------------------------------------------------------------------------------------------------";
        String fin = "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"+"\n";
        
        String linea = "";
        linea = separador;        
        linea = linea + "\n"+ "|                                                              TABLA DE SIMBOLOS                                                               |";
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "|                                                                  VARIABLES                                                                   |";
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "| Nombre                        | Tipo de Dato | Valor                                                         | Ambito                        |";
        linea = linea + "\n"+ separador;
        
        for(Variable v: Lista_variables)
        {
            linea = linea + "\n"+ v.escribirVariable();
        }
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "|                                                                  FUNCIONES                                                                   |";
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "| Nombre                        | Tipo de Dato | Parametros                                                    | Ambito                        |";
        linea = linea + "\n"+ separador;
        
        for(Funcion f: Lista_funciones)
        {
            linea = linea + "\n"+ f.escribirFuncion();
        }
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "|                                                                    TABLAS                                                                    |";
        linea = linea + "\n"+ separador;
        linea = linea + "\n"+ "| Nombre                        | Schema                        | Campos                                       | Ambito                        |";
        linea = linea + "\n"+ separador;
        
        for(Tabla t: Lista_tablas)
        {
            linea = linea + "\n"+ t.escribirTabla();
        }
        
        linea = linea + "\n"+fin;
        
        try
        {
            PrintWriter pw = new PrintWriter(new FileOutputStream(path, true));
            pw.print(linea);
            pw.close();
        }
        catch(Exception e)
        {
            
        }
        
    }    
 public int buscar_variable(String id,String ambito)
    {       
        int index=-1;
        int i=0;
        for (Variable var : Lista_variables ) {            
            if(var.getNombre().equals(id) && var.getAmbito().equals(ambito)){
            index=i;
            }
            i++;
        }
        return index;
    }

    public String concatenar()
    {  String retorno="";
        int i=0;
        for (String var : Lista_aux_concatenar ) {            
            retorno=var.replace("\'", "")+retorno;
        }
        return retorno;
    }
    
    public int buscar_funcion(String id,String ambito)
    {       
        int index=-1;
        int i=0;
        for (Funcion var : Lista_funciones ) {            
            if(var.getNombre().equals(id) && var.getAmbito().equals(ambito)){
            index=i;
            }
            i++;
        }
        return index;
    }
    
    public int buscar_Tabla(String id,String ambito)
    {       
        int index=-1;
        int i=0;
        for (Tabla var : Lista_tablas ) {            
            if(var.getNombre().equals(id) && var.getAmbito().equals(ambito)){
            index=i;
            }
            i++;
        }
        return index;
    }
    public void vaciar_pila_hasta_id(String id)
    {  String s=""; 
       
     s=transacciones.peek();
     
       while (!s.equals(id)){
        transacciones.pop();
       s=transacciones.peek();
       }
         transacciones.pop();          
            
            
           
        
    }
     public int buscar_Tabla_alias(String id,String ambito)
    {       
        int index=-1;
        int i=0;
        for (Tabla_alias var : Lista_tablas_alias ) {            
            if(var.getAlias().equals(id)){
            index=i;
            }
            i++;
        }
        return index;
    }  


    public void syntax_error(Symbol s){
         errores +="Error de sintaxis. Linea: " + (s.right + 1) +" Columna: " + s.left + ". Texto: \"" + s.value + "\"\n";
    }

    public Symbol getS(){
        return this.s;
}

public void unrecovered_syntax_error(Symbol s){ 
        errores +="Error de sintaxis. Linea: " + (s.right + 1) +" Columna: " + s.left + ". Texto: En alguna sentencia no se termino de cerrar la sentencia \"" + s.value + "\"\n";
    }

public String[] operacion(String t[],String f[],String operacion,int tright,int tleft,int fright,int fleft){
    
   String[] RESULT=new String[2];
if(t[1].equals("string")||t[1].equals("null")||t[1].equals("error")){
 
RESULT[0]=new String("error");
RESULT[1]=new String("error");
errores_semanticos.add("error semantico en linea "+tright+" en columna "+tleft+" el tipo deberia de ser int o float");
}else{

if(f[1].equals("string")||f[1].equals("null")||f[1].equals("error")){

RESULT[0]=new String("error");
RESULT[1]=new String("error");
errores_semanticos.add("error semantico en linea "+fright+" en columna "+fleft+" el tipo deberia de ser int o float");

}else{

if(f[1].equals("float")||t[1].equals("float")){

float valor=0;
 if(operacion.equals("*")){
 valor=Float.valueOf(t[0])*Float.valueOf(f[0]);

 }else    if(operacion.equals("+")){
  valor=Float.valueOf(t[0])+Float.valueOf(f[0]);

 } if(operacion.equals("-")){
  valor=Float.valueOf(t[0])-Float.valueOf(f[0]);

 }
  if(operacion.equals("/")){
    valor=Float.valueOf(t[0])/Float.valueOf(f[0]); 
 }


RESULT[0]=new String(String.valueOf(valor));
RESULT[1]=new String("float");

}else{
    
float valor=0;
 if(operacion.equals("*")){
 valor=Float.valueOf(t[0])*Float.valueOf(f[0]);

 }else    if(operacion.equals("+")){
  valor=Float.valueOf(t[0])+Float.valueOf(f[0]);

 } if(operacion.equals("-")){
  valor=Float.valueOf(t[0])-Float.valueOf(f[0]);

 }
  if(operacion.equals("/")){
    valor=Float.valueOf(t[0])/Float.valueOf(f[0]); 
 }




RESULT[0]=new String(String.valueOf(valor));
RESULT[1]=new String("int");

}

}

}
return RESULT;
    }


:};

terminal CORCHETE_ABIERTO,CORCHETE_CERRADO,ADMIRACION_CERRADO,LLAVE_ABIERTA,LLAVE_CERRADA,NUMERAL,ERROR_STRING,CORCHETES,AT,TO,NO,OF,ERROR_COMENTARIO,AND_OP,OR_OP,PARENTESIS,LLAVES,NUMERALES,ADA,ARE,ANY,DAY,PAD,OFF,SQL,GET,DENY,DUMP,DBCC,DISK,EXIT,ELSE,TRUE,TRIM,THEN,READ,ROWS,RULE,NONE,LAST,LOAD,PLAN,ONLY,OVER,CASE,CAST,HOUR,BOTH,BULK,SOME,YEAR,GOTO,ZONE,KILL,WORK,WHEN,NCHAR,LEVEL,LOCAL,LOWER,PRINT,PRIOR,PIVOT,CROSS,CLOSE,UNION,UPPER,USAGE,USING,FALSE,FOUND,FIRST,BREAK,INPUT,SPACE,SQLCA,GRANT,MATCH,MERGE,MONTH,WRITE,WHILE,VALUE,ACTION,DOUBLE,DOMAIN,EXCEPT,ERRLVL,ESCAPE,REVERT,REVOKE,NULLIF,LINENO,PASCAL,PUBLIC,OPTION,USABLE,BACKUP,BROWSE,SECOND,SCHEMA,GLOBAL,MODULE,MINUTE,EXTRACT,TRIGGER,TSEQUAL,RESTORE,NATURAL,NOCHECK,LEADING,PARTIAL,PREPARE,OPENXML,OFFSETS,CATALOG,CASCADE,CONNECT,CONVERT,COMPUTE,UNPIVOT,UNKNOWN,FORTRAN,INTEGER,SETUSER,SECTION,SESSION,SQLCODE,WAITFOR,VARYING,ALLOCATE,ABSOLUTE,DEFERRED,DESCRIBE,EXTERNAL,TEXTSIZE,TRAILING,READTEXT,RELATIVE,RESTRICT,ROWCOUNT,NATIONAL,LANGUAGE,PRESERVE,POSITION,OVERLAPS;


terminal CASCADED,COALESCE,CONTAINS,CONTINUE,UNUSABLE,FREETEXT,HOLDLOCK,INTERVAL,SHUTDOWN,SMALLINT,SQLERROR,SQLSTATE,WHENEVER,ASSERTION,EXCEPTION,TEMPORARY,TRANSLATE,RAISERROR,PRECISION,OPENQUERY,COLLATION,CHARACTER,INDICATOR,INTERSECT,INITIALLY,ISOLATION,IMMEDIATE,SUBSTRING,WRITETEXT,DEALLOCATE,DEFERRABLE,DESCRIPTOR,DISCONNECT,ROWGUIDCOL,PRIVILEGES,OPENROWSET,CONNECTION,CHECKPOINT,UPDATETEXT,FILLFACTOR,BIT_LENGTH,STATISTICS,SQLWARNING,DIAGNOSTICS,DISTRIBUTED,TABLESAMPLE,TRANSLATION,TRY_CONVERT,RECONFIGURE,CONSTRAINTS,CHAR_LENGHT,INDENTITYCOL,SYSTEM_USER;


terminal SEMANTICSIMILARITYDETAILSTABLE,SEMANTICSIMILARITYTABLE,SEMANTICKEYPHRASETABLE,CURRENT_TIMESTAMP,CHARACTER_LENGTH,IDENTITY_INSERT,TIMEZONE_MINUTE,OPENDATASOURCE,SECURITYAUDIT,FREETEXTTABLE,CONTAINSTABLE,CORRESPONDING,TIMEZONE_HOUR,AUTHORIZATION,SESSION_USER,CURRENT_USER;

terminal CURRENT_TIME,CURRENT_DATE,OCTET_LENGTH,CHAR_LENGTH,IDENTITYCOL,NVARCHAR;



terminal DELETE, FROM, TOP, PARENTESIS_ABIERTO, PARENTESIS_CERRADO;

terminal PUNTO,PUNTO_COMA,GO, PERCENT, WHERE, AND, OR, STRING, MAYOR_QUE, MENOR_QUE,MAYOR_IGUAL,MENOR_IGUAL,DIFERENTE_DE,IGUAL_IGUAL,LIKE,BETWEEN;
terminal INT_NUM,BIT_NUM,INT,FLOAT_NUM,IDENTIFICADOR,ASIGNAR,SET,COMA,SUMA,RESTA,MULTIPLICACION,DIVISION,UPDATE,TRUNCATE,TABLE,DROP,INDEX,DATABASE,IF;
terminal EXISTS,ON,NULL,PORCENTAJE;
terminal INSERT,VALUES,INTO,DEFAULT;
terminal SELECT,DISTINCT,SUM,AVG,COUNT,MIN,MAX,AS,ALL;
terminal JOIN,INNER,LEFT,RIGHT,FULL,OUTER,GROUP,BY,HAVING,ORDER,ASC,DESC;
terminal CREATE,USER,PRIMARY,COLLATE,WITH,NAME,NAMES,FILE,FILENAME,SIZE,VIEW,NOCOUNT,USE;
terminal IDENTITY,KEY,FOREIGN,REFERENCES,NOT,CHECK,CONSTRAINT,CLAUSE,REPLICATION,IS,DEC,IN;

terminal UNIQUE,CLUSTERED,NONCLUSTERED,INCLUDE,LOGIN,FOR,CHAR,VARCHAR,TEXT,IMAGE,VARBINARY,DATE,DATETIME,DATETIME2,SMALLDATETIME,TIME,DATETIMEOFFSET,TIMESTAMP,FLOAT,MONEY,REAL,BIT,DECIMAL,NUMERIC;
terminal ALTER,CURRENT,MODIFY,REBUILD,DISABLE,REORGANIZE,RESUME,PAUSE,ABORT,PASSWORD,COLUMN,ADD;
terminal PROC,PROCEDURE,ARROBA,OUT,OUTPUT,READONLY,ENCRYPTION,RECOMPILE,EXECUTE,BEGIN,END,DECLARE,EXEC,FUNCTION,RETURNS,RETURN;
terminal TRAN,TRANSACTION,MARK,COMMIT,ROLLBACK,SAVE,CURSOR,INSENSITIVE,SCROLL,FETCH,NEXT,OPEN,CONCAT;

non terminal update,inicio,querys, sentencia,empty,fin, eliminar, opciones_delete,condicionales,expresion,porcentaje,condicionales1,otra_condicion,operadores_logicos;
non terminal asignaciones,asignaciones1,asignaciones2,opciones_update,err,truncate,tipo_objeto,drop,if_op,tabla,tabla2,index,index2;
non terminal drop_relational_or_xml_or_spatial_index,drop_relational_or_xml_or_spatial_index2,drop_backward_compatible_index,drop_backward_compatible_index2;
non terminal database,mas_de_un_objeto;
non terminal insert,into,campos,campos2,mas_de_un_identificador,valores,valores2,mas_valores2,mas_valores;
non terminal operacion_logica,opcion_alias,select,option_select,seleccion,columna,columna1,columna2,data_tipo_operacion,funciones,valor,puede,alias_columna,operacion,operacion_matematica,operador,origen,origen1;
non terminal joins,tipo_join,tipo_join1,joins1,agrupado,teniendo,teniendo1,teniendo2,orden,tipo_orden,orden2;
non terminal create,opciones_crear,database_create,extras_database,filespec,mas_file,opciones_index,index_create,column_index,mas_index,view_create,column_view,column_view1;
non terminal mas_file2,extra_primary,aux2,user,table_create,extra_create_table,add_column,add_column1,add_column2,constraint,constraint1,constraint2,expresion_logica,declara_constraint;
non terminal extra_unique,set_item2,alter,opciones,database_alter,nombre_actual,tipo_alter_base,index_alter,nombre_index,accion_index,table_alter,accion_alter,tipo_add,drop_column,user_alter,set_item,set_item1;
non terminal declares,declares2,sets,sets2,procedure,alterar,proc,parametros,parametros1,parametros2,tipo_parametro,with_procedure,procedure_option,replication,empezar,final;
non terminal exec,enviar_datos,mandar_mas,functions,as,interno_funcion,tipo_retorno,llamar_funciones,mas_drop,tipo_index_orden,mas_de_columnindex;
non terminal String[] VALORES_NUMEROS,FLOTANTE,NUM,F,T,E,data_tipo, objeto_nombre;
non terminal String[] OPTIONAL_DEFAULT_VALUE;
non terminal String VARIABLES, tipo_dato, objeto_nombre1,objeto_nombre2,alias_tabla,OPTIONAL_TRANSACTION_NAME,OPTIONAL_COMMIT_OPTIONS ;
non terminal from,fin_function,begin_transaction,trans,transaction_name,with_trans,description,fin_transaction,save_point,cursor,tipo_cursor,abrir_cursor,mas_variables,tipo_fetch, SAVE_STATEMENT , ROLLBACK_STATEMENT , COMMIT_STATEMENT ,  BEGIN_TRANSACTION_STATEMENT ,  TRANSACTION_OPTIONS;
non terminal String concatenar_string,varios_string,varios_string_prima,operadores,mas_de_un_origen;
non terminal USE_STATEMENT;


precedence left WHERE;
precedence left PARENTESIS_ABIERTO;
precedence left BEGIN;
precedence left PUNTO_COMA, GO;

start with inicio;


empty ::=;
inicio ::= querys ;
querys ::= querys sentencia | sentencia;

sentencia ::= eliminar fin|update fin|truncate fin|drop fin|insert fin|select fin|create fin|alter fin
             |procedure fin|sets fin|declares fin|exec fin|functions fin|BEGIN_TRANSACTION_STATEMENT fin | COMMIT_STATEMENT fin | ROLLBACK_STATEMENT fin | SAVE_STATEMENT fin | USE_STATEMENT fin |cursor fin|error;


USE_STATEMENT ::= USE IDENTIFICADOR:a {: ambito = a.toString(); :};
cursor ::= DECLARE objeto_nombre tipo_cursor CURSOR FOR select abrir_cursor;
abrir_cursor ::=  OPEN objeto_nombre FETCH NEXT FROM tipo_fetch|empty;
tipo_cursor ::= INSENSITIVE|SCROLL|empty;
tipo_fetch ::= objeto_nombre | objeto_nombre INTO VARIABLES mas_variables;
mas_variables ::= COMA VARIABLES mas_variables|empty;


SAVE_STATEMENT ::= SAVE TRANSACTION_OPTIONS IDENTIFICADOR:i{:

if(!transacciones.isEmpty()){
transacciones.push(i.toString());
}else{
errores_semanticos.add("error semantico en linea "+iright+" en columna "+ileft+" no hay una transaccion activa");

}

:};
ROLLBACK_STATEMENT ::= ROLLBACK TRANSACTION_OPTIONS OPTIONAL_TRANSACTION_NAME:opt{:
      
if(opt.equals(" ")){

if(!transacciones.isEmpty()){
transacciones.clear();
}else{
errores_semanticos.add("error semantico en linea "+optright+" en columna "+optleft+" no hay una transaccion activa");
}

}else{
if(!(transacciones.search(opt)==-1)){
      vaciar_pila_hasta_id(opt);
          }else{
   errores_semanticos.add("error semantico en linea "+optright+" en columna "+optleft+" no hay una transaccion activa para el id:"+opt);
               }
}


:};

COMMIT_STATEMENT ::= COMMIT OPTIONAL_COMMIT_OPTIONS:opc{:

if(!transacciones.isEmpty()){
transacciones.pop();
}else{
errores_semanticos.add("error semantico en linea "+opcright+" en columna "+opcleft+" no hay una transaccion activa");
}


:};

OPTIONAL_COMMIT_OPTIONS ::= TRANSACTION_OPTIONS OPTIONAL_TRANSACTION_NAME:opt {:
RESULT=new String();
RESULT= new String(opt.toString());
:} | ;

BEGIN_TRANSACTION_STATEMENT ::= BEGIN TRANSACTION_OPTIONS OPTIONAL_TRANSACTION_NAME:otp{:
 transacciones.push(otp);
:};


OPTIONAL_TRANSACTION_NAME ::= IDENTIFICADOR:i{:

RESULT=new String();
RESULT= new String(i.toString());

:} | ARROBA IDENTIFICADOR:i{:
int indice = buscar_variable(i.toString(), ambito);       

 if(indice==-1){
errores_semanticos.add("error semantico en linea "+iright+" en columna "+ileft+" no existe una variable "+i+" en el ambito actual");

}else{

Variable var= Lista_variables.get(indice);

if(var.getTipo_dato().equals("string")){

RESULT=new String();
RESULT= new String(var.getValor());
}else{
errores_semanticos.add("error semantico en linea "+iright+" en columna "+ileft+" la variable tiene que se de tipo string");

}


}


:} |{:
RESULT=new String();
RESULT= new String(" ");:}
 ;
TRANSACTION_OPTIONS ::= TRAN | TRANSACTION;

functions ::= CREATE alterar FUNCTION objeto_nombre PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO RETURNS tipo_retorno with_procedure as BEGIN interno_funcion RETURN E fin_function END{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};
as ::= AS|empty;
tipo_retorno ::= tipo_dato | VARIABLES TABLE PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO|TABLE; 
llamar_funciones ::= objeto_nombre:a PARENTESIS_ABIERTO enviar_datos:b PARENTESIS_CERRADO;
fin_function ::= fin|empty;
interno_funcion ::= querys|empty;

exec ::= EXECUTE objeto_nombre enviar_datos{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :}|EXEC objeto_nombre enviar_datos{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};
enviar_datos ::= VARIABLES:a ASIGNAR data_tipo:b mandar_mas{:  :}|data_tipo:a mandar_mas {:  :}|empty;
mandar_mas ::= COMA VARIABLES:a ASIGNAR data_tipo:b mandar_mas{:  :} | COMA data_tipo:a mandar_mas{: Lista_nombre.add(a[1].toString()); :} | empty {:Lista_nombre = new LinkedList<String>();:};

sets ::= SET VARIABLES:v ASIGNAR E:e {:

Variable va=new Variable();
int indice=buscar_variable(v.toString(),ambito);
if(indice!=-1){
Variable vcomp=Lista_variables.get(indice);
if(e[1].equals("float")){

if(!vcomp.getTipo_dato().equals("int")||vcomp.getTipo_dato().equals("string")){

va.setValor(e[0]);
va.setTipo_dato(e[1]);
va.setAmbito(ambito);
va.setNombre(v);
Lista_variables.set(indice, va);
Escribir();

}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+vcomp.getTipo_dato());

}

}else if (e[1].equals("int")){


if(!vcomp.getTipo_dato().equals("string")){

float convf=Float.valueOf(e[0]);
int conversion=Math.round(convf);
String cadena_conv=String.valueOf(conversion);
va.setValor(cadena_conv);
va.setTipo_dato(e[1]);
va.setAmbito(ambito);
            va.setNombre(v);
Lista_variables.set(indice, va);
Escribir();

}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+vcomp.getTipo_dato());

}


}else if (e[1].equals("error")||e[1].equals("null")){
  errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" su expresion es nula o devuelve un error");


} else if(e[1].equals("string")){


if(vcomp.getTipo_dato().equals("string")){

va.setValor(e[0]);
va.setTipo_dato(e[1]);
va.setAmbito(ambito);
            va.setNombre(v);
Lista_variables.set(indice, va);
Escribir();

}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+vcomp.getTipo_dato());

}


} 

            
}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" la variable no existe");
}

:}|SET VARIABLES:v ASIGNAR concatenar_string
{:


Variable va=new Variable();
int indice=buscar_variable(v.toString(),ambito);

if(indice!=-1){

Variable vcomp=Lista_variables.get(indice);
if(vcomp.getTipo_dato().equals("string")){

String cadena_conv=concatenar();
Lista_aux_concatenar.clear();
va.setValor(cadena_conv);
va.setTipo_dato("string");
va.setAmbito(ambito);
va.setNombre(v);
Lista_variables.set(indice, va);
Escribir();

}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un string dentro de un "+vcomp.getTipo_dato());

}

}else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" la variable no existe");

}

:};

concatenar_string ::=CONCAT PARENTESIS_ABIERTO varios_string PARENTESIS_CERRADO;

varios_string ::=  STRING:s varios_string_prima{:
Lista_aux_concatenar.add(s.toString());
:};

varios_string_prima ::= COMA STRING:s varios_string_prima {:
Lista_aux_concatenar.add(s.toString());
:}|empty ;



declares ::= DECLARE VARIABLES:a tipo_dato:b declares2{: if((buscar_variable(a, ambito)==-1)){
                
            

                Variable nuevaVariable = new Variable(); 
                nuevaVariable.setNombre(a);
                nuevaVariable.setTipo_dato(b) ; 
                nuevaVariable.setAmbito(ambito);
                Lista_variables.add(nuevaVariable);
                Escribir();
                }
        else{
                errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el id "+a+" la variable ya existe");
} :} | DECLARE VARIABLES:v tipo_dato:b ASIGNAR E:e declares2{: if((buscar_variable(v, ambito)==-1)){
            Variable va = new Variable(); 
            if(e[1].equals("float")){

            if(!b.equals("int")||b.equals("string")){

            va.setValor(e[0]);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
            va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }

            }else if (e[1].equals("int")){


            if(!b.equals("string")){

            float convf=Float.valueOf(e[0]);
            int conversion=Math.round(convf);
            String cadena_conv=String.valueOf(conversion);
            va.setValor(cadena_conv);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
                    va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }


            }else if (e[1].equals("error")||e[1].equals("null")){
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" su expresion es nula o devuelve un error");


            } else if(e[1].equals("string")){


            if(b.equals("string")){

            va.setValor(e[0]);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
                    va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }


            } 

            }
            else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" la variable ya existe");
}
                 :};
declares2 ::= COMA VARIABLES:a tipo_dato:b declares2 {: if((buscar_variable(a, ambito)==-1)){
                Variable nuevaVariable = new Variable(); 
                nuevaVariable.setNombre(a);
                nuevaVariable.setTipo_dato(b) ; 
                nuevaVariable.setAmbito(ambito);
                Lista_variables.add(nuevaVariable);
                Escribir();}
        else{
                errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el id "+a+" la variable ya existe");
} :} | COMA VARIABLES:v tipo_dato:b ASIGNAR E:e declares2{: if((buscar_variable(v, ambito)==-1)){
            Variable va = new Variable(); 
            if(e[1].equals("float")){

            if(!b.equals("int")||b.equals("string")){

            va.setValor(e[0]);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
            va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }

            }else if (e[1].equals("int")){


            if(!b.equals("string")){

            float convf=Float.valueOf(e[0]);
            int conversion=Math.round(convf);
            String cadena_conv=String.valueOf(conversion);
            va.setValor(cadena_conv);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
                    va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }


            }else if (e[1].equals("error")||e[1].equals("null")){
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" su expresion es nula o devuelve un error");


            } else if(e[1].equals("string")){


            if(b.equals("string")){

            va.setValor(e[0]);
            va.setTipo_dato(e[1]);
            va.setAmbito(ambito);
                    va.setNombre(v);
            Lista_variables.add(va);
            Escribir();
            }else{
            errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" no se puede meter un "+ e[1]+" dentro de un "+b);

            }


            } 

            }
            else{
errores_semanticos.add("error semantico en linea "+vright+" en columna "+vleft+" el id "+v+" la variable ya existe");
}:} | empty;

procedure ::= CREATE alterar proc objeto_nombre parametros with_procedure replication AS empezar querys final{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};
alterar ::= OR ALTER|empty;
proc ::= PROC|PROCEDURE;
parametros ::= parametros1|empty;
parametros1 ::= ARROBA IDENTIFICADOR tipo_dato tipo_parametro parametros2;
parametros2 ::= COMA parametros1|empty;
tipo_parametro ::= OUT|OUTPUT|READONLY|empty;
with_procedure ::= WITH procedure_option|empty;
procedure_option ::=   ENCRYPTION | RECOMPILE | EXECUTE AS IDENTIFICADOR;
replication ::= FOR REPLICATION|empty;
empezar ::= BEGIN|empty;
final ::= END | empty;

alter ::= ALTER opciones{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};           
opciones ::= DATABASE database_alter | INDEX index_alter | TABLE table_alter | USER user_alter| VIEW view_create;
database_alter ::= nombre_actual tipo_alter_base;
nombre_actual ::= CURRENT|IDENTIFICADOR;
tipo_alter_base ::= MODIFY NAME ASIGNAR IDENTIFICADOR | COLLATE IDENTIFICADOR;


index_alter ::= nombre_index ON objeto_nombre accion_index;
nombre_index ::= IDENTIFICADOR | ALL;
accion_index ::= REBUILD|DISABLE|REORGANIZE|SET| RESUME|PAUSE|ABORT;

table_alter ::= objeto_nombre accion_alter;
accion_alter ::= ALTER COLUMN add_column|ADD tipo_add|DROP drop_column;
tipo_add ::= add_column;
drop_column ::= CONSTRAINT if_op objeto_nombre mas_drop | COLUMN objeto_nombre mas_drop | INDEX if_op objeto_nombre mas_drop|objeto_nombre mas_drop;
mas_drop ::= COMA drop_column|empty;

user_alter ::= IDENTIFICADOR WITH set_item;
set_item ::= set_item1 set_item2;
set_item1 ::= NAME ASIGNAR IDENTIFICADOR | NULL|LOGIN ASIGNAR IDENTIFICADOR | PASSWORD ASIGNAR STRING;
set_item2 ::= COMA set_item1|empty;






create ::= CREATE opciones_crear{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};           
opciones_crear ::= DATABASE database_create | opciones_index INDEX index_create | TABLE table_create | USER user | VIEW view_create;
database_create ::= objeto_nombre extras_database;
extras_database ::= ON PRIMARY PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file | COLLATE IDENTIFICADOR | WITH | empty;

filespec ::= NAME ASIGNAR STRING mas_file2  | NAMES ASIGNAR STRING mas_file2| FILE ASIGNAR STRING mas_file2 | FILENAME ASIGNAR STRING mas_file2 | SIZE ASIGNAR INT_NUM mas_file2|empty;
mas_file2 ::= COMA filespec|empty;
mas_file ::= COMA PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file|empty;

opciones_index ::= UNIQUE | CLUSTERED | NONCLUSTERED|empty;
index_create ::= objeto_nombre ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index;
column_index ::= objeto_nombre tipo_index_orden mas_de_columnindex;
mas_de_columnindex ::= COMA column_index|empty;
tipo_index_orden ::= ASC|DESC|empty;
mas_index ::= INCLUDE PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO |ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index| empty;

view_create ::= objeto_nombre column_view AS select;
column_view ::= PARENTESIS_ABIERTO column_view1 PARENTESIS_CERRADO|empty;
column_view1 ::= objeto_nombre mas_de_un_objeto;





user ::= IDENTIFICADOR| IDENTIFICADOR FOR LOGIN IDENTIFICADOR;

table_create ::= objeto_nombre PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO extra_create_table;
extra_create_table ::= ON objeto_nombre|ON PRIMARY|empty;
add_column ::= add_column1 add_column2;
add_column1 ::= objeto_nombre tipo_dato constraint|aux2;
add_column2 ::= COMA add_column | empty;
tipo_dato ::= CHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO| VARCHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO {: RESULT = new String ("string");:} |NVARCHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO|TEXT
              |IMAGE|VARBINARY|VARBINARY PARENTESIS_ABIERTO MAX PARENTESIS_CERRADO| DATE | DATETIME | DATETIME2 | SMALLDATETIME | TIME | DATETIMEOFFSET
              | TIMESTAMP| FLOAT PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO {:RESULT = new String ("float");:}| FLOAT{:RESULT = new String ("float");:} | INT PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO {:RESULT = new String ("int");:}|MONEY|REAL|BIT|INT{:RESULT = new String ("int");:}|DECIMAL PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO {:RESULT = new String ("float");:}|DEC PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO|NUMERIC PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO;


constraint ::= constraint1 constraint2|empty;
constraint1 ::= IDENTITY PARENTESIS_ABIERTO NUM COMA NUM PARENTESIS_CERRADO| NULL | UNIQUE extra_unique | PRIMARY KEY extra_primary
               |FOREIGN KEY PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO REFERENCES objeto_nombre PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO | NOT NULL 
                | CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO | DEFAULT data_tipo;
extra_unique ::= PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto PARENTESIS_CERRADO|empty;

extra_primary ::= opciones_index PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto tipo_orden PARENTESIS_CERRADO|constraint1;
constraint2 ::= constraint1|empty;
expresion_logica ::= otra_condicion;


aux2 ::= constraint1|CONSTRAINT objeto_nombre constraint1;


select ::= SELECT option_select from {: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; :};           
from ::=  FROM origen joins condicionales agrupado teniendo orden|empty;

option_select ::= MULTIPLICACION | seleccion columna;
seleccion ::= DISTINCT|ALL|TOP expresion | empty;
columna ::= columna1 alias_columna columna2;
columna1 ::= funciones | E|objeto_nombre ASIGNAR E;
columna2 ::= COMA option_select|empty;
data_tipo_operacion ::= data_tipo|objeto_nombre;
funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO|AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO|COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO|MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO|MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO|llamar_funciones;
valor ::= BIT_NUM | MULTIPLICACION | puede objeto_nombre;
puede ::= DISTINCT|empty;
alias_columna ::= AS STRING|AS IDENTIFICADOR|empty;
operacion ::= operacion_matematica | operacion_logica;
operacion_matematica ::= E;
operacion_logica ::= data_tipo_operacion operadores data_tipo_operacion;
operador ::= SUMA|RESTA|MULTIPLICACION|DIVISION|PORCENTAJE;

origen ::= objeto_nombre:a alias_tabla:b origen1 {: 
                int indice = buscar_Tabla(a[0], ambito);
                if(indice != -1){
                    if(a[1] != null)
                    {
                        if(Lista_tablas.get(indice).getSchema().equals(a[1]) || ambito.equals(a[1]))
                        {
                            Tabla_alias ca = new Tabla_alias(); 
                            ca.setAlias(b);
                            ca.setNombre(a[0]);
                            Lista_tablas_alias.add(ca);
                        }
                        else{
                            errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+"  la tabla "+a[0]+" no pertenece al schema o base de datos indicado"); }
                    }
                    else
                    {
                        Tabla_alias ca = new Tabla_alias(); 
                        ca.setAlias("");
                        ca.setNombre(a[0]);
                        Lista_tablas_alias.add(ca);
                    }
                }
                else{
                errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" no existe una tabla "+a[0]+" en el ambito actual"); } :};
origen1 ::= COMA origen | empty {: Lista_tablas_alias = new LinkedList<Tabla_alias>(); :};
alias_tabla ::= AS STRING:a {: RESULT = new String(a.toString()); :} |AS IDENTIFICADOR:a {: RESULT = new String(a.toString()); :}|IDENTIFICADOR:a {: RESULT = new String(a.toString()); :}|empty;



joins ::= tipo_join JOIN objeto_nombre:a alias_tabla:b ON objeto_nombre:c ASIGNAR objeto_nombre:d joins {: 
                if(buscar_Tabla(a[0], ambito) != -1){
                    Tabla_alias ca = new Tabla_alias(); 
                    ca.setAlias(b);
                    ca.setNombre(a[0]);
                    Lista_tablas_alias.add(ca);
                int indice1 = buscar_Tabla_alias(c[1], ambito);
                int indice2 = buscar_Tabla_alias(d[1], ambito);
                if(indice1 != -1)
                {
                    if(indice2 != -1)
                    {
                        
                        if(c[1].equals(b) || d[1].equals(b))
                        {
                            Tabla tabla1= Lista_tablas.get(buscar_Tabla(Lista_tablas_alias.get(indice1).getNombre(),ambito));
                            Tabla tabla2= Lista_tablas.get(buscar_Tabla(Lista_tablas_alias.get(indice2).getNombre(),ambito));
                            int indiceCampo1 = tabla1.buscar_campo(c[0], ambito);
                            int indiceCampo2 = tabla2.buscar_campo(d[0], ambito);
                            
                            if(indiceCampo1 != -1){
                                if(indiceCampo2 != -1){
                                    if(tabla1.campos.get(indiceCampo1).getData_tipo().equals(tabla2.campos.get(indiceCampo2).getData_tipo()))
                                    {
                                         
                                    }
                                    else if((tabla1.campos.get(indiceCampo1).getData_tipo().equals("int") && tabla2.campos.get(indiceCampo2).getData_tipo().equals("float") || ((tabla2.campos.get(indiceCampo2).getData_tipo().equals("int") && tabla1.campos.get(indiceCampo1).getData_tipo().equals("float")))))
                                    {
                                    }
                                    else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" no concuerdan los tipos de campo "+c[0]+" y "+d[0]); }
                                 }
                                 else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el campo "+d[0]+" no existe en la tabla "+tabla2.getNombre()); }
                            }
                            else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el campo "+c[0]+" no existe en la tabla "+tabla1.getNombre()); }
                        }
                        else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el alias no se utiliza en la relación. "); }
                    }
                    else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el no existe el alias "+ d[1]); }
                }
                else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+" el no existe el alias "+ c[1]); }
                }
                else{
                                        errores_semanticos.add("error semantico en linea "+aright+" en columna "+aleft+"  la tabla  "+ a[0] + "no existe."); }
:} |empty;
tipo_join ::= INNER|LEFT tipo_join1 | RIGHT tipo_join1 | FULL tipo_join1|empty;
tipo_join1 ::= OUTER|empty;

agrupado ::= GROUP BY objeto_nombre:id mas_de_un_objeto
{:

    String alias = id[1];
    String campo = id[0];
    Campo_alias c2 = new Campo_alias();
        c2.setAlias(alias);
        c2.setCampo(campo);
        
    Lista_aux_group_by.add(c2);
:}
|empty;

teniendo ::= HAVING teniendo1|empty;
teniendo1 ::= funciones:f operadores:o data_tipo:dt teniendo2
{:

//este pedazo de codigo falta nada mas
//Lista_aux_having.add();

:}
|objeto_nombre:id operadores:op data_tipo:a teniendo2{:


    String alias = id[1];
    String campo = id[0];
    Campo_alias c2 = new Campo_alias();
        c2.setAlias(alias);
        c2.setCampo(campo);
        
    


String valor_exp = a[0];
String tipo_dato = a[1];



            Comparacion c1 = new Comparacion();
            
            c1.setData(tipo_dato);
            c1.setValor(valor_exp);
           
      c1.setComparador(op);
            c1.setCampo(c2);
            
    Lista_aux_where.add(c1);
:};


teniendo2 ::= operadores_logicos teniendo1|empty;

orden ::= ORDER BY objeto_nombre:id tipo_orden orden2{:

    String alias = id[1];
    String campo = id[0];

    Campo_alias c2 = new Campo_alias();
        c2.setAlias(alias);
        c2.setCampo(campo);
        
        Lista_aux_order_by.add(c2);

:}|ORDER BY funciones:f tipo_orden orden2{:


:}|empty;
tipo_orden ::= ASC|DESC|empty;
orden2 ::= COMA objeto_nombre:id tipo_orden orden{:
    String alias = id[1];
    String campo = id[0];

    Campo_alias c2 = new Campo_alias();
        c2.setAlias(alias);
        c2.setCampo(campo);
        
        Lista_aux_order_by.add(c2);

:}|empty;


insert ::= INSERT into objeto_nombre campos VALUES valores{: System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; :}|INSERT into objeto_nombre campos DEFAULT VALUES{: System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;:};        
into ::= INTO|empty;
campos ::= PARENTESIS_ABIERTO campos2 PARENTESIS_CERRADO|empty;
campos2 ::= IDENTIFICADOR mas_de_un_identificador;
mas_de_un_identificador ::= COMA IDENTIFICADOR mas_de_un_identificador|empty;
valores ::= PARENTESIS_ABIERTO valores2 PARENTESIS_CERRADO mas_valores;
valores2 ::= data_tipo mas_valores2;
mas_valores2 ::= COMA data_tipo mas_valores2|empty;
mas_valores ::= COMA valores|empty;


drop ::= DROP tipo_objeto{: System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; :};           

if_op ::= IF EXISTS|empty;

tipo_objeto ::= TABLE if_op tabla| index | database|PROCEDURE objeto_nombre|FUNCTION objeto_nombre|USER if_op objeto_nombre mas_de_un_objeto|VIEW if_op objeto_nombre;

tabla ::= objeto_nombre tabla2;

tabla2 ::= COMA tabla | empty;

index ::= INDEX if_op objeto_nombre index2;
index2 ::= drop_relational_or_xml_or_spatial_index|drop_backward_compatible_index;

drop_relational_or_xml_or_spatial_index ::= ON objeto_nombre drop_relational_or_xml_or_spatial_index2;
drop_relational_or_xml_or_spatial_index2 ::= COMA objeto_nombre drop_relational_or_xml_or_spatial_index | empty;

drop_backward_compatible_index ::= objeto_nombre mas_de_un_objeto;
drop_backward_compatible_index2 ::= mas_de_un_objeto| empty;
	
database ::= DATABASE if_op objeto_nombre mas_de_un_objeto;

mas_de_un_objeto ::= COMA objeto_nombre:id mas_de_un_objeto{:

    String alias = id[1];
    String campo = id[0];
    Campo_alias c2 = new Campo_alias();
        c2.setAlias(alias);
        c2.setCampo(campo);
        
    Lista_aux_group_by.add(c2);

:}| empty;

truncate ::= TRUNCATE TABLE objeto_nombre{: System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; :};   

update ::= UPDATE opciones_delete objeto_nombre SET objeto_nombre ASIGNAR asignaciones condicionales{: System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; :};           
asignaciones ::= asignaciones1 asignaciones2;

asignaciones2 ::= COMA objeto_nombre ASIGNAR asignaciones condicionales | empty;

asignaciones1 ::= E;

E ::= E:e SUMA T:t
{:
RESULT=new String[2];
RESULT=operacion(e,t,"+",eright,eleft,tright,tleft);
 :}
| E:e RESTA T:t
{:
RESULT=new String[2];
RESULT=operacion(e,t,"-",eright,eleft,tright,tleft);
 :}
 | T:t{:
RESULT=new String[2];
RESULT[0]=new String(t[0]);
RESULT[1]=new String(t[1]);
 :};

T ::= T:t MULTIPLICACION F:f{:
RESULT=new String[2];
RESULT=operacion(t,f,"*",tright,tleft,fright,fleft);
 :} | T:t DIVISION F:f
{:
RESULT=new String[2];
RESULT=operacion(t,f,"/",tright,tleft,fright,fleft);
 :} | F:f{:
RESULT=new String[2]; 
RESULT[0]=new String(f[0]);
RESULT[1]=new String(f[1]);
:};
F ::= PARENTESIS_ABIERTO E:e PARENTESIS_CERRADO
{:
RESULT=new String[2]; 
RESULT[0]=new String(e[0]);
RESULT[1]=new String(e[1]);
:}


|objeto_nombre:e{: RESULT=new String[2]; 
RESULT[0]=new String(e[0]);
RESULT[1]=new String(e[1]); :}|data_tipo:dt
{:
RESULT=new String[2]; 
RESULT[0]=new String(dt[0]);
RESULT[1]=new String(dt[1]);
:}
;

NUM ::= INT_NUM:i
{:
RESULT=new String[2]; 
RESULT[0]=new String(i.toString());
RESULT[1]=new String("int");
:}

 | BIT_NUM:b
{:
RESULT=new String[2]; 
RESULT[0]=new String(b.toString());
RESULT[1]=new String("int");
:};


FLOTANTE ::= FLOAT_NUM:f{:

RESULT=new String[2]; 
RESULT[0]=new String(f.toString());
RESULT[1]=new String("float");

:};
VALORES_NUMEROS ::= NUM:num{:

RESULT=new String[2]; 
RESULT[0]=new String(num[0]);
RESULT[1]=new String(num[1]);

:} | FLOTANTE:floa{:

RESULT=new String[2]; 
RESULT[0]=new String(floa[0]);
RESULT[1]=new String(floa[1]);

:};

eliminar ::= DELETE opciones_delete FROM origen joins condicionales:c {:  
                for (Comparacion comp : Lista_aux_where) {
                  if (comp.isObjeto()) {
                      int indice1 = buscar_Tabla_alias(comp.getCampo().getAlias(), ambito);
                      int indice2 = buscar_Tabla_alias(comp.getData(), ambito);
                      if (indice1 != -1) {
                          if (indice2 != -1) {

                              Tabla tabla1 = Lista_tablas.get(buscar_Tabla(Lista_tablas_alias.get(indice1).getNombre(),ambito));
                              Tabla tabla2 = Lista_tablas.get(buscar_Tabla(Lista_tablas_alias.get(indice2).getNombre(),ambito));
                              int indiceCampo1 = tabla1.buscar_campo(comp.getCampo().getCampo(), ambito);
                              int indiceCampo2 = tabla2.buscar_campo(comp.getValor(), ambito);

                              if (indiceCampo1 != -1) {
                                  if (indiceCampo2 != -1) {
                                      if (tabla1.campos.get(indiceCampo1).getData_tipo().equals(tabla2.campos.get(indiceCampo2).getData_tipo())) {

                                      } else if ((tabla1.campos.get(indiceCampo1).getData_tipo().equals("int") && tabla2.campos.get(indiceCampo2).getData_tipo().equals("float") || ((tabla2.campos.get(indiceCampo2).getData_tipo().equals("int") && tabla1.campos.get(indiceCampo1).getData_tipo().equals("float"))))) {
                                      } else {
                                          errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " no concuerdan los tipos de campo " + comp.getCampo().getCampo() + " y " + comp.getValor());
                                      }
                                  } else {
                                      errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " el campo " + comp.getValor() + " no existe en la tabla " + tabla2.getNombre());
                                  }
                              } else {
                                  errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " el campo " + comp.getCampo().getCampo() + " no existe en la tabla " + tabla1.getNombre());
                              }

                          } else {
                              errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " no existe el alias " + comp.getData());
                          }
                      } else {
                          errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " no existe el alias " + comp.getCampo().getAlias());
                      }
                  }
                  else
                  {
                      int indice1 = buscar_Tabla_alias(comp.getCampo().getAlias(), ambito);
                      if (indice1 != -1) {

                              Tabla tabla1 = Lista_tablas.get(buscar_Tabla(Lista_tablas_alias.get(indice1).getNombre(),ambito));
                              
                              int indiceCampo1 = tabla1.buscar_campo(comp.getCampo().getCampo(), ambito);

                              if (indiceCampo1 != -1) {
                                      if (tabla1.campos.get(indiceCampo1).getData_tipo().equals(comp.getData())) {

                                      } else if ((tabla1.campos.get(indiceCampo1).getData_tipo().equals("int") && comp.getData().equals("float") || ((comp.getData().equals("int") && tabla1.campos.get(indiceCampo1).getData_tipo().equals("float"))))) {
                                      } else {
                                          errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " no concuerdan los tipos de campo " + comp.getCampo().getCampo() + " y " + comp.getValor());
                                      }
                                  
                              } else {
                                  errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " el campo " + comp.getCampo().getCampo() + " no existe en la tabla " + tabla1.getNombre());
                              }

                           
                      } else {
                          errores_semanticos.add("error semantico en linea " + cright + " en columna " + cleft + " no existe el alias " + comp.getCampo().getAlias());
                      }
                  }
              }
System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;:};            
             
            
fin ::= PUNTO_COMA
          | GO
          ;





opciones_delete ::=TOP expresion porcentaje|empty;
expresion ::= PARENTESIS_ABIERTO NUM PARENTESIS_CERRADO | NUM
			;
porcentaje ::=PERCENT|empty;
condicionales ::=WHERE objeto_nombre:id operadores:op E:a condicionales1 {:
    String alias = id[1];
    String campo = id[0];

    Campo_alias c2 = new Campo_alias();
    if(alias != null)
        {
        c2.setAlias(alias);
}
        c2.setCampo(campo);
        
      String valor_exp = a[0];
      String tipo_dato = a[1];
            Comparacion c1 = new Comparacion();
            
            c1.setData(tipo_dato);
            c1.setValor(valor_exp);            
      c1.setComparador(op);
            c1.setCampo(c2);
            
    Lista_aux_where.add(c1);

:} |empty;


condicionales1  ::=operadores_logicos:op otra_condicion:oa {:
if (oa==null) {
  //error
}

:}|empty;

otra_condicion ::=empty {:RESULT = null;:} |objeto_nombre:id operadores:b data_tipo:c condicionales1 {:
        String valor = c[0];
        String tipo = c[1];


        String nombre = id[0];
        String tipo_objeto = id[1];


   
      Campo_alias c2 = new Campo_alias();
          c2.setAlias(tipo_objeto);
          c2.setCampo(nombre);


            Comparacion c1 = new Comparacion();            
            c1.setData(tipo);
            c1.setValor(valor);            
      c1.setComparador(b);
            c1.setCampo(c2);
            
    Lista_aux_where.add(c1);
:};
operadores_logicos ::= AND:a {:
RESULT = a;
:}
| OR:o {:
RESULT = o;
:};
data_tipo ::= STRING:s{:
RESULT=new String[2]; 
RESULT[0]=new String(s.toString().substring(1, s.toString().length()-1));
RESULT[1]=new String("string");
   
:}
		|VALORES_NUMEROS:v{:

RESULT=new String[2]; 
RESULT[0]=new String(v[0]);
RESULT[1]=new String(v[1]);
:}          
                |NULL:n{:

RESULT=new String[2]; 
RESULT[0]=new String(n.toString());
RESULT[1]=new String("null");
:}     
                |ARROBA IDENTIFICADOR :id
{:

RESULT=new String[2]; 
int i1=buscar_variable(id.toString(),ambito);
if(i1==-1){

RESULT[0]=new String("error");
RESULT[1]=new String("error");
errores_semanticos.add("error semantico en linea "+idright+" en columna "+idleft+" no existe una variable "+id+" en el ambito actual");
}else {
RESULT[0]=new String(Lista_variables.get(buscar_variable(id.toString(),ambito)).getValor());
RESULT[1]=new String(Lista_variables.get(buscar_variable(id.toString(),ambito)).getTipo_dato());
}


:} 
                  
		;

VARIABLES ::= ARROBA IDENTIFICADOR:id{:
RESULT=new String(id.toString());    

:};

operadores ::= MAYOR_QUE:a {:
RESULT = new String(a.toString());
:}
    | MENOR_QUE:b {:
RESULT = new String(b.toString());
:}
    | MAYOR_IGUAL:c {:

RESULT = new String(c.toString());
:}
    | MENOR_IGUAL:d {:

RESULT = new String(d.toString());
:}    
                | DIFERENTE_DE:e {:

RESULT = new String(e.toString());
:}
    | LIKE:f {:

RESULT = new String(f.toString());
:}
    | BETWEEN:aa NUM:a AND:bb INT_NUM:b {:

        
        RESULT = new String(aa.toString());

    :}  
                | ASIGNAR:g{:

RESULT = new String(g.toString());
:} 
                | IS:h{:

RESULT = new String(h.toString());   
    :};
objeto_nombre ::= IDENTIFICADOR:a objeto_nombre1 {: RESULT = new String[4]; 
                int cont = 0;
                Lista_nombre.add(a.toString());
                if(Lista_nombre.size() <= 4)
                {
                for(String s: Lista_nombre)
                {
                    RESULT[cont] = new String(s);
                    cont++;
                }
                }:};

objeto_nombre1 ::= empty {:Lista_nombre = new LinkedList<String>();:} |PUNTO IDENTIFICADOR:id objeto_nombre1 {: Lista_nombre.add(id.toString()); :}
                ;

objeto_nombre2 ::= PUNTO IDENTIFICADOR|empty;





