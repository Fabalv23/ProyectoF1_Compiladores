
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package minisql;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0175\000\002\002\004\000\002\006\002\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\234\010\000" +
    "\002\235\004\000\002\235\004\000\002\236\003\000\002" +
    "\236\003\000\002\236\003\000\002\237\005\000\002\237" +
    "\003\000\002\240\003\000\002\240\003\000\002\241\004" +
    "\000\002\241\006\000\002\241\006\000\002\241\004\000" +
    "\002\241\006\000\002\241\006\000\002\242\006\000\002" +
    "\226\023\000\002\227\003\000\002\227\003\000\002\231" +
    "\003\000\002\231\007\000\002\231\003\000\002\232\006" +
    "\000\002\230\003\000\002\230\003\000\002\223\005\000" +
    "\002\223\005\000\002\224\006\000\002\224\004\000\002" +
    "\224\003\000\002\225\004\000\002\225\003\000\002\204" +
    "\007\000\002\204\006\000\002\205\007\000\002\205\003" +
    "\000\002\202\006\000\002\203\006\000\002\203\003\000" +
    "\002\207\015\000\002\210\004\000\002\210\003\000\002" +
    "\211\003\000\002\211\003\000\002\212\003\000\002\212" +
    "\003\000\002\213\007\000\002\214\004\000\002\214\003" +
    "\000\002\215\003\000\002\215\003\000\002\215\003\000" +
    "\002\215\003\000\002\216\004\000\002\216\003\000\002" +
    "\217\003\000\002\217\003\000\002\217\005\000\002\220" +
    "\004\000\002\220\003\000\002\221\003\000\002\221\003" +
    "\000\002\222\003\000\002\222\003\000\002\163\004\000" +
    "\002\164\004\000\002\164\004\000\002\164\004\000\002" +
    "\164\004\000\002\164\004\000\002\165\004\000\002\166" +
    "\003\000\002\166\003\000\002\167\006\000\002\167\004" +
    "\000\002\170\006\000\002\171\003\000\002\171\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\172\003\000\002\172\003\000\002\172" +
    "\003\000\002\173\004\000\002\174\005\000\002\174\004" +
    "\000\002\174\004\000\002\175\003\000\002\176\005\000" +
    "\002\176\005\000\002\176\005\000\002\176\004\000\002" +
    "\233\004\000\002\233\003\000\002\177\005\000\002\200" +
    "\004\000\002\201\005\000\002\201\003\000\002\201\005" +
    "\000\002\201\005\000\002\162\004\000\002\162\003\000" +
    "\002\125\004\000\002\126\004\000\002\126\005\000\002" +
    "\126\004\000\002\126\004\000\002\126\004\000\002\127" +
    "\004\000\002\130\010\000\002\130\004\000\002\130\003" +
    "\000\002\130\003\000\002\131\006\000\002\131\006\000" +
    "\002\131\006\000\002\131\006\000\002\131\006\000\002" +
    "\131\003\000\002\142\004\000\002\142\003\000\002\132" +
    "\007\000\002\132\003\000\002\133\003\000\002\133\003" +
    "\000\002\133\003\000\002\133\003\000\002\134\011\000" +
    "\002\135\004\000\002\136\006\000\002\136\010\000\002" +
    "\136\003\000\002\137\006\000\002\140\005\000\002\140" +
    "\003\000\002\141\004\000\002\145\006\000\002\146\007" +
    "\000\002\147\004\000\002\147\004\000\002\147\003\000" +
    "\002\150\004\000\002\151\005\000\002\151\003\000\002" +
    "\152\004\000\002\152\003\000\002\153\006\000\002\153" +
    "\006\000\002\153\003\000\002\153\003\000\002\153\003" +
    "\000\002\153\006\000\002\153\003\000\002\153\003\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\153\003\000\002\153\003\000\002\153\006\000\002\153" +
    "\003\000\002\153\003\000\002\153\003\000\002\153\003" +
    "\000\002\153\010\000\002\153\010\000\002\154\004\000" +
    "\002\154\003\000\002\155\010\000\002\155\003\000\002" +
    "\155\004\000\002\155\005\000\002\155\014\000\002\155" +
    "\004\000\002\155\006\000\002\155\004\000\002\161\006" +
    "\000\002\161\003\000\002\143\010\000\002\143\003\000" +
    "\002\156\003\000\002\156\003\000\002\157\003\000\002" +
    "\144\003\000\002\144\005\000\002\071\013\000\002\072" +
    "\003\000\002\072\004\000\002\073\003\000\002\073\003" +
    "\000\002\073\004\000\002\073\003\000\002\074\005\000" +
    "\002\075\003\000\002\075\003\000\002\075\005\000\002" +
    "\076\004\000\002\076\003\000\002\077\003\000\002\077" +
    "\003\000\002\100\006\000\002\100\006\000\002\100\006" +
    "\000\002\100\006\000\002\100\006\000\002\100\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\004\000\002" +
    "\102\003\000\002\102\003\000\002\103\004\000\002\103" +
    "\004\000\002\103\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\003\000\002\067\005\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\107\005\000\002\110\004\000\002\110" +
    "\003\000\002\111\004\000\002\111\004\000\002\111\003" +
    "\000\002\111\003\000\002\112\013\000\002\112\003\000" +
    "\002\113\003\000\002\113\004\000\002\113\004\000\002" +
    "\113\004\000\002\113\003\000\002\114\003\000\002\114" +
    "\003\000\002\116\006\000\002\116\003\000\002\117\004" +
    "\000\002\117\003\000\002\120\006\000\002\120\006\000" +
    "\002\121\004\000\002\121\003\000\002\122\007\000\002" +
    "\122\007\000\002\122\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\124\004\000\002\124\003" +
    "\000\002\056\010\000\002\056\010\000\002\057\003\000" +
    "\002\057\003\000\002\060\005\000\002\060\003\000\002" +
    "\061\004\000\002\062\005\000\002\062\003\000\002\063" +
    "\006\000\002\064\004\000\002\065\005\000\002\065\003" +
    "\000\002\066\004\000\002\066\003\000\002\042\004\000" +
    "\002\043\004\000\002\043\003\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\004\000\002\041" +
    "\004\000\002\044\004\000\002\045\004\000\002\045\003" +
    "\000\002\046\006\000\002\047\003\000\002\047\003\000" +
    "\002\050\005\000\002\051\005\000\002\051\003\000\002" +
    "\052\004\000\002\053\003\000\002\053\003\000\002\054" +
    "\006\000\002\055\005\000\002\055\003\000\002\040\005" +
    "\000\002\002\012\000\002\025\004\000\002\027\007\000" +
    "\002\027\003\000\002\026\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\013\010\000\002\010\003\000\002\010\003\000\002\014" +
    "\005\000\002\014\003\000\002\017\005\000\002\017\003" +
    "\000\002\020\003\000\002\020\003\000\002\016\007\000" +
    "\002\016\003\000\002\021\004\000\002\021\003\000\002" +
    "\022\003\000\002\022\006\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\206\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\006\000\002\007" +
    "\003\000\002\007\003\000\002\015\004\000\002\011\003" +
    "\000\002\011\004\000\002\012\004\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02fa\000\040\003\040\004\041\037\032\045\042\046" +
    "\014\050\036\060\030\064\012\111\025\167\034\213\045" +
    "\214\022\216\044\217\004\230\013\001\002\000\004\035" +
    "\046\001\002\000\006\012\302\013\303\001\002\000\006" +
    "\012\302\013\303\001\002\000\006\012\302\013\303\001" +
    "\002\000\006\012\302\013\303\001\002\000\006\012\302" +
    "\013\303\001\002\000\044\006\u0281\007\000\020\000\031" +
    "\000\032\000\034\000\035\000\043\u027d\056\000\065\u027c" +
    "\066\000\067\000\070\000\071\000\072\000\074\u027f\205" +
    "\000\001\002\000\004\214\022\001\002\000\004\047\u0277" +
    "\001\002\000\014\012\000\013\000\035\046\115\000\205" +
    "\063\001\002\000\006\012\302\013\303\001\002\000\006" +
    "\012\302\013\303\001\002\000\006\012\302\013\303\001" +
    "\002\000\056\002\uffee\003\uffee\004\uffee\012\uffee\013\uffee" +
    "\037\uffee\045\uffee\046\uffee\050\uffee\060\uffee\064\uffee\111" +
    "\uffee\167\uffee\213\uffee\214\uffee\215\uffee\216\uffee\217\uffee" +
    "\222\uffee\226\uffee\227\uffee\230\uffee\001\002\000\006\223" +
    "\u0255\224\u0254\001\002\000\006\012\302\013\303\001\002" +
    "\000\004\002\u0252\001\002\000\032\017\u01bd\047\u01ba\051" +
    "\000\052\u01b5\112\u01b6\123\u01bb\137\u01b7\140\u0134\141\u0138" +
    "\203\000\204\000\220\000\001\002\000\056\002\uffef\003" +
    "\uffef\004\uffef\012\uffef\013\uffef\037\uffef\045\uffef\046\uffef" +
    "\050\uffef\060\uffef\064\uffef\111\uffef\167\uffef\213\uffef\214" +
    "\uffef\215\uffef\216\uffef\217\uffef\222\uffef\226\uffef\227\uffef" +
    "\230\uffef\001\002\000\056\002\ufffd\003\ufffd\004\ufffd\012" +
    "\ufffd\013\ufffd\037\ufffd\045\ufffd\046\ufffd\050\ufffd\060\ufffd" +
    "\064\ufffd\111\ufffd\167\ufffd\213\ufffd\214\ufffd\215\ufffd\216" +
    "\ufffd\217\ufffd\222\ufffd\226\ufffd\227\ufffd\230\ufffd\001\002" +
    "\000\006\035\000\062\u0196\001\002\000\006\012\302\013" +
    "\303\001\002\000\006\124\u0186\205\063\001\002\000\006" +
    "\012\302\013\303\001\002\000\014\047\356\051\353\052" +
    "\354\112\357\123\355\001\002\000\006\012\302\013\303" +
    "\001\002\000\014\047\312\051\310\052\311\204\305\220" +
    "\314\001\002\000\006\012\302\013\303\001\002\000\056" +
    "\002\uffed\003\uffed\004\uffed\012\uffed\013\uffed\037\uffed\045" +
    "\uffed\046\uffed\050\uffed\060\uffed\064\uffed\111\uffed\167\uffed" +
    "\213\uffed\214\uffed\215\uffed\216\uffed\217\uffed\222\uffed\226" +
    "\uffed\227\uffed\230\uffed\001\002\000\006\005\000\006\164" +
    "\001\002\000\006\006\164\035\000\001\002\000\042\002" +
    "\uffff\003\040\004\041\037\032\045\042\046\014\050\036" +
    "\060\030\064\012\111\025\167\034\213\045\214\022\216" +
    "\044\217\004\230\013\001\002\000\004\205\063\001\002" +
    "\000\004\035\046\001\002\000\242\005\000\007\000\010" +
    "\000\011\076\012\000\013\000\015\000\020\000\021\000" +
    "\022\000\023\000\024\000\025\000\027\000\030\000\031" +
    "\000\032\000\033\000\034\000\035\000\036\000\037\000" +
    "\040\000\041\000\042\000\043\000\044\000\050\000\055" +
    "\000\056\000\061\000\063\000\073\000\075\000\076\000" +
    "\077\000\100\000\101\000\103\000\105\000\106\000\107" +
    "\000\110\000\113\000\114\000\115\000\125\000\127\000" +
    "\131\000\132\000\136\000\137\000\144\000\145\000\146" +
    "\000\147\000\150\000\151\000\152\000\153\000\154\000" +
    "\155\000\156\000\157\000\160\000\161\000\162\000\163" +
    "\000\164\000\165\000\166\000\167\000\172\000\173\000" +
    "\174\000\175\000\176\000\177\000\202\000\205\000\001" +
    "\002\000\022\012\000\013\000\020\056\031\060\032\051" +
    "\034\052\056\054\205\063\001\002\000\062\005\ufeb2\010" +
    "\ufeb2\012\ufeb2\013\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2\040\ufeb2" +
    "\041\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\056\ufeb2\063\ufeb2\073" +
    "\ufeb2\103\ufeb2\105\ufeb2\106\ufeb2\113\ufeb2\125\ufeb2\127\ufeb2" +
    "\131\ufeb2\132\ufeb2\137\ufeb2\001\002\000\114\005\ufeb4\007" +
    "\ufeb4\010\ufeb4\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4" +
    "\017\ufeb4\020\ufeb4\031\ufeb4\032\ufeb4\034\ufeb4\035\ufeb4\040" +
    "\ufeb4\041\ufeb4\042\ufeb4\043\ufeb4\044\ufeb4\056\ufeb4\063\ufeb4" +
    "\066\ufeb4\067\ufeb4\070\ufeb4\071\ufeb4\072\ufeb4\073\ufeb4\103" +
    "\ufeb4\105\ufeb4\106\ufeb4\113\ufeb4\125\ufeb4\127\ufeb4\131\ufeb4" +
    "\132\ufeb4\137\ufeb4\205\ufeb4\001\002\000\062\005\ufeb3\010" +
    "\ufeb3\012\ufeb3\013\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3\040\ufeb3" +
    "\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\056\ufeb3\063\ufeb3\073" +
    "\ufeb3\103\ufeb3\105\ufeb3\106\ufeb3\113\ufeb3\125\ufeb3\127\ufeb3" +
    "\131\ufeb3\132\ufeb3\137\ufeb3\001\002\000\062\005\ufeb1\010" +
    "\ufeb1\012\ufeb1\013\ufeb1\015\ufeb1\016\ufeb1\017\ufeb1\040\ufeb1" +
    "\041\ufeb1\042\ufeb1\043\ufeb1\044\ufeb1\056\ufeb1\063\ufeb1\073" +
    "\ufeb1\103\ufeb1\105\ufeb1\106\ufeb1\113\ufeb1\125\ufeb1\127\ufeb1" +
    "\131\ufeb1\132\ufeb1\137\ufeb1\001\002\000\062\005\ufe9d\010" +
    "\ufe9d\012\ufe9d\013\ufe9d\015\ufe9d\016\ufe9d\017\ufe9d\040\ufe9d" +
    "\041\ufe9d\042\ufe9d\043\ufe9d\044\ufe9d\056\ufe9d\063\ufe9d\073" +
    "\ufe9d\103\ufe9d\105\ufe9d\106\ufe9d\113\ufe9d\125\ufe9d\127\ufe9d" +
    "\131\ufe9d\132\ufe9d\137\ufe9d\001\002\000\062\005\ufe9e\010" +
    "\ufe9e\012\ufe9e\013\ufe9e\015\ufe9e\016\ufe9e\017\ufe9e\040\ufe9e" +
    "\041\ufe9e\042\ufe9e\043\ufe9e\044\ufe9e\056\ufe9e\063\ufe9e\073" +
    "\ufe9e\103\ufe9e\105\ufe9e\106\ufe9e\113\ufe9e\125\ufe9e\127\ufe9e" +
    "\131\ufe9e\132\ufe9e\137\ufe9e\001\002\000\062\005\ufe9f\010" +
    "\ufe9f\012\ufe9f\013\ufe9f\015\ufe9f\016\ufe9f\017\ufe9f\040\ufe9f" +
    "\041\ufe9f\042\ufe9f\043\ufe9f\044\ufe9f\056\ufe9f\063\ufe9f\073" +
    "\ufe9f\103\ufe9f\105\ufe9f\106\ufe9f\113\ufe9f\125\ufe9f\127\ufe9f" +
    "\131\ufe9f\132\ufe9f\137\ufe9f\001\002\000\014\010\ufe9c\012" +
    "\ufe9c\013\ufe9c\036\072\040\ufe9c\001\002\000\114\005\ufeb5" +
    "\007\ufeb5\010\ufeb5\012\ufeb5\013\ufeb5\014\ufeb5\015\ufeb5\016" +
    "\ufeb5\017\ufeb5\020\ufeb5\031\ufeb5\032\ufeb5\034\ufeb5\035\ufeb5" +
    "\040\ufeb5\041\ufeb5\042\ufeb5\043\ufeb5\044\ufeb5\056\ufeb5\063" +
    "\ufeb5\066\ufeb5\067\ufeb5\070\ufeb5\071\ufeb5\072\ufeb5\073\ufeb5" +
    "\103\ufeb5\105\ufeb5\106\ufeb5\113\ufeb5\125\ufeb5\127\ufeb5\131" +
    "\ufeb5\132\ufeb5\137\ufeb5\205\ufeb5\001\002\000\010\010\uffce" +
    "\012\uffce\013\uffce\001\002\000\006\012\uffd2\013\uffd2\001" +
    "\002\000\004\035\071\001\002\000\012\010\000\012\000" +
    "\013\000\040\065\001\002\000\024\010\000\012\000\013" +
    "\000\020\056\031\060\032\051\034\052\056\054\205\063" +
    "\001\002\000\010\010\uffcf\012\uffcf\013\uffcf\001\002\000" +
    "\010\010\uffcc\012\uffcc\013\uffcc\001\002\000\010\010\uffcd" +
    "\012\uffcd\013\uffcd\001\002\000\136\005\ufe9b\010\ufe9b\012" +
    "\ufe9b\013\ufe9b\015\ufe9b\016\ufe9b\017\ufe9b\033\ufe9b\036\ufe9b" +
    "\040\ufe9b\041\ufe9b\042\ufe9b\043\ufe9b\044\ufe9b\047\ufe9b\056" +
    "\ufe9b\063\ufe9b\073\ufe9b\103\ufe9b\105\ufe9b\106\ufe9b\113\ufe9b" +
    "\115\ufe9b\125\ufe9b\127\ufe9b\131\ufe9b\132\ufe9b\137\ufe9b\145" +
    "\ufe9b\146\ufe9b\147\ufe9b\150\ufe9b\151\ufe9b\152\ufe9b\153\ufe9b" +
    "\154\ufe9b\155\ufe9b\156\ufe9b\157\ufe9b\160\ufe9b\161\ufe9b\162" +
    "\ufe9b\163\ufe9b\164\ufe9b\165\ufe9b\166\ufe9b\001\002\000\016" +
    "\020\056\031\060\032\051\034\052\056\054\205\063\001" +
    "\002\000\062\005\ufe9c\010\ufe9c\012\ufe9c\013\ufe9c\015\ufe9c" +
    "\016\ufe9c\017\ufe9c\040\ufe9c\041\ufe9c\042\ufe9c\043\ufe9c\044" +
    "\ufe9c\056\ufe9c\063\ufe9c\073\ufe9c\103\ufe9c\105\ufe9c\106\ufe9c" +
    "\113\ufe9c\125\ufe9c\127\ufe9c\131\ufe9c\132\ufe9c\137\ufe9c\001" +
    "\002\000\012\010\000\012\000\013\000\040\065\001\002" +
    "\000\010\010\uffd0\012\uffd0\013\uffd0\001\002\000\004\035" +
    "\046\001\002\000\240\005\ufe91\007\ufe91\010\ufe91\012\ufe91" +
    "\013\ufe91\015\ufe91\020\ufe91\021\ufe91\022\ufe91\023\ufe91\024" +
    "\ufe91\025\ufe91\027\ufe91\030\ufe91\031\ufe91\032\ufe91\033\ufe91" +
    "\034\ufe91\035\ufe91\036\ufe91\037\ufe91\040\ufe91\041\ufe91\042" +
    "\ufe91\043\ufe91\044\ufe91\050\ufe91\055\ufe91\056\ufe91\061\ufe91" +
    "\063\ufe91\073\ufe91\075\ufe91\076\ufe91\077\ufe91\100\ufe91\101" +
    "\ufe91\103\ufe91\105\ufe91\106\ufe91\107\ufe91\110\ufe91\113\ufe91" +
    "\114\ufe91\115\ufe91\125\ufe91\127\ufe91\131\ufe91\132\ufe91\136" +
    "\ufe91\137\ufe91\144\ufe91\145\ufe91\146\ufe91\147\ufe91\150\ufe91" +
    "\151\ufe91\152\ufe91\153\ufe91\154\ufe91\155\ufe91\156\ufe91\157" +
    "\ufe91\160\ufe91\161\ufe91\162\ufe91\163\ufe91\164\ufe91\165\ufe91" +
    "\166\ufe91\167\ufe91\172\ufe91\173\ufe91\174\ufe91\175\ufe91\176" +
    "\ufe91\177\ufe91\202\ufe91\205\ufe91\001\002\000\240\005\ufe90" +
    "\007\ufe90\010\ufe90\012\ufe90\013\ufe90\015\ufe90\020\ufe90\021" +
    "\ufe90\022\ufe90\023\ufe90\024\ufe90\025\ufe90\027\ufe90\030\ufe90" +
    "\031\ufe90\032\ufe90\033\ufe90\034\ufe90\035\ufe90\036\ufe90\037" +
    "\ufe90\040\ufe90\041\ufe90\042\ufe90\043\ufe90\044\ufe90\050\ufe90" +
    "\055\ufe90\056\ufe90\061\ufe90\063\ufe90\073\ufe90\075\ufe90\076" +
    "\ufe90\077\ufe90\100\ufe90\101\ufe90\103\ufe90\105\ufe90\106\ufe90" +
    "\107\ufe90\110\ufe90\113\ufe90\114\ufe90\115\ufe90\125\ufe90\127" +
    "\ufe90\131\ufe90\132\ufe90\136\ufe90\137\ufe90\144\ufe90\145\ufe90" +
    "\146\ufe90\147\ufe90\150\ufe90\151\ufe90\152\ufe90\153\ufe90\154" +
    "\ufe90\155\ufe90\156\ufe90\157\ufe90\160\ufe90\161\ufe90\162\ufe90" +
    "\163\ufe90\164\ufe90\165\ufe90\166\ufe90\167\ufe90\172\ufe90\173" +
    "\ufe90\174\ufe90\175\ufe90\176\ufe90\177\ufe90\202\ufe90\205\ufe90" +
    "\001\002\000\240\005\ufe8f\007\ufe8f\010\ufe8f\012\ufe8f\013" +
    "\ufe8f\015\ufe8f\020\ufe8f\021\ufe8f\022\ufe8f\023\ufe8f\024\ufe8f" +
    "\025\ufe8f\027\ufe8f\030\ufe8f\031\ufe8f\032\ufe8f\033\ufe8f\034" +
    "\ufe8f\035\ufe8f\036\ufe8f\037\ufe8f\040\ufe8f\041\ufe8f\042\ufe8f" +
    "\043\ufe8f\044\ufe8f\050\ufe8f\055\ufe8f\056\ufe8f\061\ufe8f\063" +
    "\ufe8f\073\ufe8f\075\ufe8f\076\ufe8f\077\ufe8f\100\ufe8f\101\ufe8f" +
    "\103\ufe8f\105\ufe8f\106\ufe8f\107\ufe8f\110\ufe8f\113\ufe8f\114" +
    "\ufe8f\115\ufe8f\125\ufe8f\127\ufe8f\131\ufe8f\132\ufe8f\136\ufe8f" +
    "\137\ufe8f\144\ufe8f\145\ufe8f\146\ufe8f\147\ufe8f\150\ufe8f\151" +
    "\ufe8f\152\ufe8f\153\ufe8f\154\ufe8f\155\ufe8f\156\ufe8f\157\ufe8f" +
    "\160\ufe8f\161\ufe8f\162\ufe8f\163\ufe8f\164\ufe8f\165\ufe8f\166" +
    "\ufe8f\167\ufe8f\172\ufe8f\173\ufe8f\174\ufe8f\175\ufe8f\176\ufe8f" +
    "\177\ufe8f\202\ufe8f\205\ufe8f\001\002\000\050\033\105\145" +
    "\111\146\115\147\124\150\107\151\117\152\112\153\106" +
    "\154\113\155\122\156\121\157\104\160\123\161\116\162" +
    "\103\163\126\164\120\165\110\166\125\001\002\000\050" +
    "\010\uff49\012\uff49\013\uff49\040\uff49\056\uff49\063\uff49\073" +
    "\uff49\113\uff49\115\uff49\125\uff49\127\uff49\131\uff49\132\uff49" +
    "\137\uff49\144\uff49\206\uff49\207\uff49\210\uff49\214\uff49\001" +
    "\002\000\050\010\uff4c\012\uff4c\013\uff4c\040\uff4c\056\uff4c" +
    "\063\uff4c\073\uff4c\113\uff4c\115\uff4c\125\uff4c\127\uff4c\131" +
    "\uff4c\132\uff4c\137\uff4c\144\uff4c\206\uff4c\207\uff4c\210\uff4c" +
    "\214\uff4c\001\002\000\050\010\uff46\012\uff46\013\uff46\040" +
    "\uff46\056\uff46\063\uff46\073\uff46\113\uff46\115\uff46\125\uff46" +
    "\127\uff46\131\uff46\132\uff46\137\uff46\144\uff46\206\uff46\207" +
    "\uff46\210\uff46\214\uff46\001\002\000\050\010\uff50\012\uff50" +
    "\013\uff50\040\uff50\056\uff50\063\uff50\073\uff50\113\uff50\115" +
    "\uff50\125\uff50\127\uff50\131\uff50\132\uff50\137\uff50\144\uff50" +
    "\206\uff50\207\uff50\210\uff50\214\uff50\001\002\000\050\010" +
    "\uff54\012\uff54\013\uff54\040\uff54\056\uff54\063\uff54\073\uff54" +
    "\113\uff54\115\uff54\125\uff54\127\uff54\131\uff54\132\uff54\137" +
    "\uff54\144\uff54\206\uff54\207\uff54\210\uff54\214\uff54\001\002" +
    "\000\004\007\156\001\002\000\004\007\153\001\002\000" +
    "\050\010\uff51\012\uff51\013\uff51\040\uff51\056\uff51\063\uff51" +
    "\073\uff51\113\uff51\115\uff51\125\uff51\127\uff51\131\uff51\132" +
    "\uff51\137\uff51\144\uff51\206\uff51\207\uff51\210\uff51\214\uff51" +
    "\001\002\000\050\010\uff4f\012\uff4f\013\uff4f\040\uff4f\056" +
    "\uff4f\063\uff4f\073\uff4f\113\uff4f\115\uff4f\125\uff4f\127\uff4f" +
    "\131\uff4f\132\uff4f\137\uff4f\144\uff4f\206\uff4f\207\uff4f\210" +
    "\uff4f\214\uff4f\001\002\000\010\012\000\013\000\040\145" +
    "\001\002\000\004\007\142\001\002\000\004\007\137\001" +
    "\002\000\052\007\134\010\uff53\012\uff53\013\uff53\040\uff53" +
    "\056\uff53\063\uff53\073\uff53\113\uff53\115\uff53\125\uff53\127" +
    "\uff53\131\uff53\132\uff53\137\uff53\144\uff53\206\uff53\207\uff53" +
    "\210\uff53\214\uff53\001\002\000\050\010\uff47\012\uff47\013" +
    "\uff47\040\uff47\056\uff47\063\uff47\073\uff47\113\uff47\115\uff47" +
    "\125\uff47\127\uff47\131\uff47\132\uff47\137\uff47\144\uff47\206" +
    "\uff47\207\uff47\210\uff47\214\uff47\001\002\000\050\010\uff4d" +
    "\012\uff4d\013\uff4d\040\uff4d\056\uff4d\063\uff4d\073\uff4d\113" +
    "\uff4d\115\uff4d\125\uff4d\127\uff4d\131\uff4d\132\uff4d\137\uff4d" +
    "\144\uff4d\206\uff4d\207\uff4d\210\uff4d\214\uff4d\001\002\000" +
    "\050\010\uff4e\012\uff4e\013\uff4e\040\uff4e\056\uff4e\063\uff4e" +
    "\073\uff4e\113\uff4e\115\uff4e\125\uff4e\127\uff4e\131\uff4e\132" +
    "\uff4e\137\uff4e\144\uff4e\206\uff4e\207\uff4e\210\uff4e\214\uff4e" +
    "\001\002\000\050\010\uff4b\012\uff4b\013\uff4b\040\uff4b\056" +
    "\uff4b\063\uff4b\073\uff4b\113\uff4b\115\uff4b\125\uff4b\127\uff4b" +
    "\131\uff4b\132\uff4b\137\uff4b\144\uff4b\206\uff4b\207\uff4b\210" +
    "\uff4b\214\uff4b\001\002\000\050\010\uff55\012\uff55\013\uff55" +
    "\040\uff55\056\uff55\063\uff55\073\uff55\113\uff55\115\uff55\125" +
    "\uff55\127\uff55\131\uff55\132\uff55\137\uff55\144\uff55\206\uff55" +
    "\207\uff55\210\uff55\214\uff55\001\002\000\004\007\127\001" +
    "\002\000\050\010\uff48\012\uff48\013\uff48\040\uff48\056\uff48" +
    "\063\uff48\073\uff48\113\uff48\115\uff48\125\uff48\127\uff48\131" +
    "\uff48\132\uff48\137\uff48\144\uff48\206\uff48\207\uff48\210\uff48" +
    "\214\uff48\001\002\000\010\031\060\032\051\034\052\001" +
    "\002\000\004\040\131\001\002\000\010\031\060\032\051" +
    "\034\052\001\002\000\004\010\133\001\002\000\050\010" +
    "\uff44\012\uff44\013\uff44\040\uff44\056\uff44\063\uff44\073\uff44" +
    "\113\uff44\115\uff44\125\uff44\127\uff44\131\uff44\132\uff44\137" +
    "\uff44\144\uff44\206\uff44\207\uff44\210\uff44\214\uff44\001\002" +
    "\000\004\072\135\001\002\000\004\010\136\001\002\000" +
    "\050\010\uff52\012\uff52\013\uff52\040\uff52\056\uff52\063\uff52" +
    "\073\uff52\113\uff52\115\uff52\125\uff52\127\uff52\131\uff52\132" +
    "\uff52\137\uff52\144\uff52\206\uff52\207\uff52\210\uff52\214\uff52" +
    "\001\002\000\010\031\060\032\051\034\052\001\002\000" +
    "\004\010\141\001\002\000\050\010\uff4a\012\uff4a\013\uff4a" +
    "\040\uff4a\056\uff4a\063\uff4a\073\uff4a\113\uff4a\115\uff4a\125" +
    "\uff4a\127\uff4a\131\uff4a\132\uff4a\137\uff4a\144\uff4a\206\uff4a" +
    "\207\uff4a\210\uff4a\214\uff4a\001\002\000\010\031\060\032" +
    "\051\034\052\001\002\000\004\010\144\001\002\000\050" +
    "\010\uff56\012\uff56\013\uff56\040\uff56\056\uff56\063\uff56\073" +
    "\uff56\113\uff56\115\uff56\125\uff56\127\uff56\131\uff56\132\uff56" +
    "\137\uff56\144\uff56\206\uff56\207\uff56\210\uff56\214\uff56\001" +
    "\002\000\004\205\063\001\002\000\006\012\uffc7\013\uffc7" +
    "\001\002\000\006\012\uffc5\013\uffc5\001\002\000\050\033" +
    "\105\145\111\146\115\147\124\150\107\151\117\152\112" +
    "\153\106\154\113\155\122\156\121\157\104\160\123\161" +
    "\116\162\103\163\126\164\120\165\110\166\125\001\002" +
    "\000\010\012\000\013\000\040\145\001\002\000\006\012" +
    "\uffc6\013\uffc6\001\002\000\010\031\060\032\051\034\052" +
    "\001\002\000\004\010\155\001\002\000\050\010\uff57\012" +
    "\uff57\013\uff57\040\uff57\056\uff57\063\uff57\073\uff57\113\uff57" +
    "\115\uff57\125\uff57\127\uff57\131\uff57\132\uff57\137\uff57\144" +
    "\uff57\206\uff57\207\uff57\210\uff57\214\uff57\001\002\000\010" +
    "\031\060\032\051\034\052\001\002\000\004\040\160\001" +
    "\002\000\010\031\060\032\051\034\052\001\002\000\004" +
    "\010\162\001\002\000\050\010\uff45\012\uff45\013\uff45\040" +
    "\uff45\056\uff45\063\uff45\073\uff45\113\uff45\115\uff45\125\uff45" +
    "\127\uff45\131\uff45\132\uff45\137\uff45\144\uff45\206\uff45\207" +
    "\uff45\210\uff45\214\uff45\001\002\000\056\002\ufffe\003\ufffe" +
    "\004\ufffe\012\ufffe\013\ufffe\037\ufffe\045\ufffe\046\ufffe\050" +
    "\ufffe\060\ufffe\064\ufffe\111\ufffe\167\ufffe\213\ufffe\214\ufffe" +
    "\215\ufffe\216\ufffe\217\ufffe\222\ufffe\226\ufffe\227\ufffe\230" +
    "\ufffe\001\002\000\010\007\262\031\060\032\051\001\002" +
    "\000\004\035\046\001\002\000\006\005\ufeac\035\ufeac\001" +
    "\002\000\004\037\170\001\002\000\004\035\046\001\002" +
    "\000\004\036\172\001\002\000\022\007\174\020\056\031" +
    "\060\032\051\034\052\035\046\056\054\205\063\001\002" +
    "\000\010\012\000\013\000\015\212\001\002\000\022\007" +
    "\174\020\056\031\060\032\051\034\052\035\046\056\054" +
    "\205\063\001\002\000\030\005\ufeb6\010\ufeb6\012\ufeb6\013" +
    "\ufeb6\015\ufeb6\040\ufeb6\041\ufeb6\042\ufeb6\043\ufeb6\044\ufeb6" +
    "\073\ufeb6\001\002\000\030\005\ufebc\010\ufebc\012\ufebc\013" +
    "\ufebc\015\ufebc\040\ufebc\041\ufebc\042\ufebc\043\251\044\252" +
    "\073\ufebc\001\002\000\030\005\ufeb9\010\ufeb9\012\ufeb9\013" +
    "\ufeb9\015\ufeb9\040\ufeb9\041\ufeb9\042\ufeb9\043\ufeb9\044\ufeb9" +
    "\073\ufeb9\001\002\000\016\012\ufebf\013\ufebf\015\ufebf\040" +
    "\ufebf\041\247\042\246\001\002\000\030\005\ufeb7\010\ufeb7" +
    "\012\ufeb7\013\ufeb7\015\ufeb7\040\ufeb7\041\ufeb7\042\ufeb7\043" +
    "\ufeb7\044\ufeb7\073\ufeb7\001\002\000\012\012\000\013\000" +
    "\015\000\040\203\001\002\000\004\035\046\001\002\000" +
    "\010\012\ufec0\013\ufec0\015\ufec0\001\002\000\010\012\ufec2" +
    "\013\ufec2\015\ufec2\001\002\000\004\036\207\001\002\000" +
    "\022\007\174\020\056\031\060\032\051\034\052\035\046" +
    "\056\054\205\063\001\002\000\010\012\000\013\000\015" +
    "\212\001\002\000\010\012\ufec1\013\ufec1\015\ufec1\001\002" +
    "\000\004\035\046\001\002\000\016\012\ufea6\013\ufea6\015" +
    "\ufea6\103\ufea6\105\ufea6\106\ufea6\001\002\000\024\021\215" +
    "\022\220\023\216\024\224\025\223\027\225\030\221\036" +
    "\222\136\226\001\002\000\016\020\ufe9a\031\ufe9a\032\ufe9a" +
    "\034\ufe9a\056\ufe9a\205\ufe9a\001\002\000\016\020\ufe98\031" +
    "\ufe98\032\ufe98\034\ufe98\056\ufe98\205\ufe98\001\002\000\016" +
    "\020\056\031\060\032\051\034\052\056\054\205\063\001" +
    "\002\000\016\020\ufe99\031\ufe99\032\ufe99\034\ufe99\056\ufe99" +
    "\205\ufe99\001\002\000\006\031\060\032\051\001\002\000" +
    "\016\020\ufe93\031\ufe93\032\ufe93\034\ufe93\056\ufe93\205\ufe93" +
    "\001\002\000\016\020\ufe96\031\ufe96\032\ufe96\034\ufe96\056" +
    "\ufe96\205\ufe96\001\002\000\016\020\ufe97\031\ufe97\032\ufe97" +
    "\034\ufe97\056\ufe97\205\ufe97\001\002\000\016\020\ufe95\031" +
    "\ufe95\032\ufe95\034\ufe95\056\ufe95\205\ufe95\001\002\000\016" +
    "\020\ufe92\031\ufe92\032\ufe92\034\ufe92\056\ufe92\205\ufe92\001" +
    "\002\000\004\016\230\001\002\000\004\031\231\001\002" +
    "\000\016\020\ufe94\031\ufe94\032\ufe94\034\ufe94\056\ufe94\205" +
    "\ufe94\001\002\000\022\012\000\013\000\015\000\016\234" +
    "\017\237\103\000\105\000\106\000\001\002\000\016\012" +
    "\ufea7\013\ufea7\015\ufea7\103\ufea7\105\ufea7\106\ufea7\001\002" +
    "\000\034\010\ufea1\012\ufea1\013\ufea1\015\ufea1\035\ufea1\066" +
    "\ufea1\067\ufea1\070\ufea1\071\ufea1\072\ufea1\103\ufea1\105\ufea1" +
    "\106\ufea1\001\002\000\022\010\000\012\000\013\000\015" +
    "\000\035\046\103\000\105\000\106\000\001\002\000\020" +
    "\010\ufea4\012\ufea4\013\ufea4\015\ufea4\103\ufea4\105\ufea4\106" +
    "\ufea4\001\002\000\034\010\ufea0\012\ufea0\013\ufea0\015\ufea0" +
    "\035\ufea0\066\ufea0\067\ufea0\070\ufea0\071\ufea0\072\ufea0\103" +
    "\ufea0\105\ufea0\106\ufea0\001\002\000\024\021\215\022\220" +
    "\023\216\024\224\025\223\027\225\030\221\036\222\136" +
    "\226\001\002\000\020\010\ufea3\012\ufea3\013\ufea3\015\ufea3" +
    "\103\ufea3\105\ufea3\106\ufea3\001\002\000\020\010\ufea5\012" +
    "\ufea5\013\ufea5\015\ufea5\103\ufea5\105\ufea5\106\ufea5\001\002" +
    "\000\016\020\056\031\060\032\051\034\052\056\054\205" +
    "\063\001\002\000\024\010\000\012\000\013\000\015\000" +
    "\016\234\017\237\103\000\105\000\106\000\001\002\000" +
    "\020\010\ufea2\012\ufea2\013\ufea2\015\ufea2\103\ufea2\105\ufea2" +
    "\106\ufea2\001\002\000\022\007\174\020\056\031\060\032" +
    "\051\034\052\035\046\056\054\205\063\001\002\000\022" +
    "\007\174\020\056\031\060\032\051\034\052\035\046\056" +
    "\054\205\063\001\002\000\030\005\ufebe\010\ufebe\012\ufebe" +
    "\013\ufebe\015\ufebe\040\ufebe\041\ufebe\042\ufebe\043\251\044" +
    "\252\073\ufebe\001\002\000\022\007\174\020\056\031\060" +
    "\032\051\034\052\035\046\056\054\205\063\001\002\000" +
    "\022\007\174\020\056\031\060\032\051\034\052\035\046" +
    "\056\054\205\063\001\002\000\030\005\ufeba\010\ufeba\012" +
    "\ufeba\013\ufeba\015\ufeba\040\ufeba\041\ufeba\042\ufeba\043\ufeba" +
    "\044\ufeba\073\ufeba\001\002\000\030\005\ufebb\010\ufebb\012" +
    "\ufebb\013\ufebb\015\ufebb\040\ufebb\041\ufebb\042\ufebb\043\ufebb" +
    "\044\ufebb\073\ufebb\001\002\000\030\005\ufebd\010\ufebd\012" +
    "\ufebd\013\ufebd\015\ufebd\040\ufebd\041\ufebd\042\ufebd\043\251" +
    "\044\252\073\ufebd\001\002\000\010\010\257\041\247\042" +
    "\246\001\002\000\030\005\ufeb8\010\ufeb8\012\ufeb8\013\ufeb8" +
    "\015\ufeb8\040\ufeb8\041\ufeb8\042\ufeb8\043\ufeb8\044\ufeb8\073" +
    "\ufeb8\001\002\000\006\012\ufec3\013\ufec3\001\002\000\040" +
    "\005\ufeaa\007\ufeaa\014\ufeaa\020\ufeaa\031\ufeaa\032\ufeaa\034" +
    "\ufeaa\035\ufeaa\056\ufeaa\066\ufeaa\067\ufeaa\070\ufeaa\071\ufeaa" +
    "\072\ufeaa\205\ufeaa\001\002\000\006\031\060\032\051\001" +
    "\002\000\010\005\000\014\265\035\000\001\002\000\006" +
    "\005\ufead\035\ufead\001\002\000\006\005\ufea9\035\ufea9\001" +
    "\002\000\006\005\ufea8\035\ufea8\001\002\000\004\010\270" +
    "\001\002\000\040\005\ufeab\007\ufeab\014\ufeab\020\ufeab\031" +
    "\ufeab\032\ufeab\034\ufeab\035\ufeab\056\ufeab\066\ufeab\067\ufeab" +
    "\070\ufeab\071\ufeab\072\ufeab\205\ufeab\001\002\000\004\005" +
    "\272\001\002\000\004\035\046\001\002\000\012\012\000" +
    "\013\000\015\000\040\274\001\002\000\004\035\046\001" +
    "\002\000\010\012\000\013\000\015\212\001\002\000\022" +
    "\010\ufec5\012\ufec5\013\ufec5\015\ufec5\105\ufec5\106\ufec5\107" +
    "\ufec5\110\ufec5\001\002\000\006\012\ufeb0\013\ufeb0\001\002" +
    "\000\024\010\000\012\000\013\000\015\000\040\274\105" +
    "\000\106\000\107\000\110\000\001\002\000\022\010\ufec6" +
    "\012\ufec6\013\ufec6\015\ufec6\105\ufec6\106\ufec6\107\ufec6\110" +
    "\ufec6\001\002\000\056\002\ufeaf\003\ufeaf\004\ufeaf\012\ufeaf" +
    "\013\ufeaf\037\ufeaf\045\ufeaf\046\ufeaf\050\ufeaf\060\ufeaf\064" +
    "\ufeaf\111\ufeaf\167\ufeaf\213\ufeaf\214\ufeaf\215\ufeaf\216\ufeaf" +
    "\217\ufeaf\222\ufeaf\226\ufeaf\227\ufeaf\230\ufeaf\001\002\000" +
    "\056\002\ufeae\003\ufeae\004\ufeae\012\ufeae\013\ufeae\037\ufeae" +
    "\045\ufeae\046\ufeae\050\ufeae\060\ufeae\064\ufeae\111\ufeae\167" +
    "\ufeae\213\ufeae\214\ufeae\215\ufeae\216\ufeae\217\ufeae\222\ufeae" +
    "\226\ufeae\227\ufeae\230\ufeae\001\002\000\056\002\ufff1\003" +
    "\ufff1\004\ufff1\012\ufff1\013\ufff1\037\ufff1\045\ufff1\046\ufff1" +
    "\050\ufff1\060\ufff1\064\ufff1\111\ufff1\167\ufff1\213\ufff1\214" +
    "\ufff1\215\ufff1\216\ufff1\217\ufff1\222\ufff1\226\ufff1\227\ufff1" +
    "\230\ufff1\001\002\000\004\035\046\001\002\000\006\012" +
    "\ufedb\013\ufedb\001\002\000\006\012\ufed7\013\ufed7\001\002" +
    "\000\006\035\000\053\320\001\002\000\006\035\000\053" +
    "\320\001\002\000\006\035\000\053\320\001\002\000\006" +
    "\012\ufed6\013\ufed6\001\002\000\004\035\046\001\002\000" +
    "\006\012\ufed4\013\ufed4\001\002\000\004\035\ufed9\001\002" +
    "\000\004\035\046\001\002\000\004\054\321\001\002\000" +
    "\004\035\ufeda\001\002\000\010\012\000\013\000\040\324" +
    "\001\002\000\006\012\ufed8\013\ufed8\001\002\000\004\035" +
    "\046\001\002\000\006\012\ufed3\013\ufed3\001\002\000\006" +
    "\012\ufed1\013\ufed1\001\002\000\006\012\ufed2\013\ufed2\001" +
    "\002\000\004\035\046\001\002\000\010\012\000\013\000" +
    "\040\274\001\002\000\006\012\ufec7\013\ufec7\001\002\000" +
    "\004\035\046\001\002\000\006\035\046\055\336\001\002" +
    "\000\006\012\ufece\013\ufece\001\002\000\004\035\046\001" +
    "\002\000\010\012\000\013\000\040\274\001\002\000\006" +
    "\012\ufecf\013\ufecf\001\002\000\006\012\ufed0\013\ufed0\001" +
    "\002\000\006\012\ufeca\013\ufeca\001\002\000\010\012\000" +
    "\013\000\040\344\001\002\000\004\035\046\001\002\000" +
    "\006\012\ufecd\013\ufecd\001\002\000\006\012\ufecb\013\ufecb" +
    "\001\002\000\004\055\336\001\002\000\006\012\ufecc\013" +
    "\ufecc\001\002\000\006\012\ufed5\013\ufed5\001\002\000\056" +
    "\002\ufffc\003\ufffc\004\ufffc\012\ufffc\013\ufffc\037\ufffc\045" +
    "\ufffc\046\ufffc\050\ufffc\060\ufffc\064\ufffc\111\ufffc\167\ufffc" +
    "\213\ufffc\214\ufffc\215\ufffc\216\ufffc\217\ufffc\222\ufffc\226" +
    "\ufffc\227\ufffc\230\ufffc\001\002\000\006\035\u0178\074\u0177" +
    "\001\002\000\006\035\u016d\170\u016c\001\002\000\004\035" +
    "\046\001\002\000\004\035\046\001\002\000\004\035\362" +
    "\001\002\000\006\012\uffab\013\uffab\001\002\000\006\012" +
    "\uffa7\013\uffa7\001\002\000\004\115\363\001\002\000\012" +
    "\056\366\116\367\143\365\200\371\001\002\000\006\012" +
    "\uff8b\013\uff8b\001\002\000\004\036\u0102\001\002\000\010" +
    "\012\uff88\013\uff88\040\uff88\001\002\000\004\036\u0100\001" +
    "\002\000\010\012\000\013\000\040\374\001\002\000\004" +
    "\036\372\001\002\000\004\020\373\001\002\000\010\012" +
    "\uff86\013\uff86\040\uff86\001\002\000\012\056\366\116\367" +
    "\143\365\200\371\001\002\000\006\012\uff84\013\uff84\001" +
    "\002\000\006\012\uff8a\013\uff8a\001\002\000\006\012\uff85" +
    "\013\uff85\001\002\000\004\035\u0101\001\002\000\010\012" +
    "\uff89\013\uff89\040\uff89\001\002\000\004\035\u0103\001\002" +
    "\000\010\012\uff87\013\uff87\040\uff87\001\002\000\006\012" +
    "\uffa8\013\uffa8\001\002\000\010\050\u0109\167\u0106\202\u0108" +
    "\001\002\000\004\201\u015f\001\002\000\006\012\uff96\013" +
    "\uff96\001\002\000\026\035\046\056\u011f\063\u0120\113\u0126" +
    "\125\u0119\127\u0127\131\u0123\132\u0124\133\u0122\137\u011e\001" +
    "\002\000\012\035\046\051\u010c\133\u010b\201\u010a\001\002" +
    "\000\004\035\046\001\002\000\004\035\046\001\002\000" +
    "\004\035\046\001\002\000\010\012\000\013\000\040\u010f" +
    "\001\002\000\006\012\uff93\013\uff93\001\002\000\012\035" +
    "\046\051\u010c\133\u010b\201\u010a\001\002\000\006\012\uff8e" +
    "\013\uff8e\001\002\000\006\012\uff8c\013\uff8c\001\002\000" +
    "\006\012\uff8d\013\uff8d\001\002\000\010\012\000\013\000" +
    "\040\u010f\001\002\000\006\012\uff8f\013\uff8f\001\002\000" +
    "\010\012\000\013\000\040\u010f\001\002\000\006\012\uff91" +
    "\013\uff91\001\002\000\010\012\000\013\000\040\u010f\001" +
    "\002\000\006\012\uff90\013\uff90\001\002\000\004\007\u015a" +
    "\001\002\000\006\012\uff94\013\uff94\001\002\000\012\010" +
    "\000\012\000\013\000\040\u0156\001\002\000\012\010\uff32" +
    "\012\uff32\013\uff32\040\uff32\001\002\000\012\010\uff5a\012" +
    "\uff5a\013\uff5a\040\uff5a\001\002\000\034\007\u0143\010\000" +
    "\012\000\013\000\040\000\056\000\063\000\113\000\125" +
    "\000\127\000\131\000\132\000\137\000\001\002\000\032" +
    "\010\uff40\012\uff40\013\uff40\040\uff40\056\uff40\063\uff40\113" +
    "\uff40\125\uff40\127\uff40\131\uff40\132\uff40\137\uff40\001\002" +
    "\000\016\020\056\031\060\032\051\034\052\056\054\205" +
    "\063\001\002\000\050\033\105\145\111\146\115\147\124" +
    "\150\107\151\117\152\112\153\106\154\113\155\122\156" +
    "\121\157\104\160\123\161\116\162\103\163\126\164\120" +
    "\165\110\166\125\001\002\000\004\035\046\001\002\000" +
    "\004\056\u014b\001\002\000\004\007\u0147\001\002\000\006" +
    "\012\uff92\013\uff92\001\002\000\004\126\u0131\001\002\000" +
    "\004\126\u0128\001\002\000\004\007\u0129\001\002\000\004" +
    "\035\046\001\002\000\004\010\u012b\001\002\000\004\130" +
    "\u012c\001\002\000\004\035\046\001\002\000\004\007\u012e" +
    "\001\002\000\004\035\046\001\002\000\004\010\u0130\001" +
    "\002\000\032\010\uff3d\012\uff3d\013\uff3d\040\uff3d\056\uff3d" +
    "\063\uff3d\113\uff3d\125\uff3d\127\uff3d\131\uff3d\132\uff3d\137" +
    "\uff3d\001\002\000\030\007\000\056\u011f\063\u0120\113\u0126" +
    "\125\u0119\127\u0127\131\u0123\132\u0124\137\u0133\140\u0134\141" +
    "\u0138\001\002\000\032\010\uff36\012\uff36\013\uff36\040\uff36" +
    "\056\uff36\063\uff36\113\uff36\125\uff36\127\uff36\131\uff36\132" +
    "\uff36\137\uff36\001\002\000\034\007\u0143\010\000\012\000" +
    "\013\000\040\000\056\000\063\000\113\000\125\000\127" +
    "\000\131\000\132\000\137\000\001\002\000\006\007\uff6d" +
    "\051\uff6d\001\002\000\004\007\uff6b\001\002\000\032\010" +
    "\uff3e\012\uff3e\013\uff3e\040\uff3e\056\uff3e\063\uff3e\113\uff3e" +
    "\125\uff3e\127\uff3e\131\uff3e\132\uff3e\137\uff3e\001\002\000" +
    "\004\007\u0139\001\002\000\006\007\uff6c\051\uff6c\001\002" +
    "\000\004\035\046\001\002\000\012\010\000\040\274\107" +
    "\000\110\000\001\002\000\010\010\000\107\u013d\110\u013c" +
    "\001\002\000\012\010\ufeee\012\ufeee\013\ufeee\040\ufeee\001" +
    "\002\000\012\010\ufeef\012\ufeef\013\ufeef\040\ufeef\001\002" +
    "\000\012\010\ufeed\012\ufeed\013\ufeed\040\ufeed\001\002\000" +
    "\004\010\u0140\001\002\000\032\010\uff37\012\uff37\013\uff37" +
    "\040\uff37\056\uff37\063\uff37\113\uff37\125\uff37\127\uff37\131" +
    "\uff37\132\uff37\137\uff37\001\002\000\032\010\uff3f\012\uff3f" +
    "\013\uff3f\040\uff3f\056\uff3f\063\uff3f\113\uff3f\125\uff3f\127" +
    "\uff3f\131\uff3f\132\uff3f\137\uff3f\001\002\000\032\010\uff38" +
    "\012\uff38\013\uff38\040\uff38\056\uff38\063\uff38\113\uff38\125" +
    "\uff38\127\uff38\131\uff38\132\uff38\137\uff38\001\002\000\004" +
    "\035\046\001\002\000\006\010\000\040\274\001\002\000" +
    "\004\010\u0146\001\002\000\032\010\uff39\012\uff39\013\uff39" +
    "\040\uff39\056\uff39\063\uff39\113\uff39\125\uff39\127\uff39\131" +
    "\uff39\132\uff39\137\uff39\001\002\000\006\010\000\035\046" +
    "\001\002\000\004\010\u014a\001\002\000\004\010\uff33\001" +
    "\002\000\032\010\uff3b\012\uff3b\013\uff3b\040\uff3b\056\uff3b" +
    "\063\uff3b\113\uff3b\125\uff3b\127\uff3b\131\uff3b\132\uff3b\137" +
    "\uff3b\001\002\000\032\010\uff3c\012\uff3c\013\uff3c\040\uff3c" +
    "\056\uff3c\063\uff3c\113\uff3c\125\uff3c\127\uff3c\131\uff3c\132" +
    "\uff3c\137\uff3c\001\002\000\022\056\u011f\063\u0120\113\u0126" +
    "\125\u0119\127\u0127\131\u0123\132\u0124\137\u011e\001\002\000" +
    "\012\010\uff31\012\uff31\013\uff31\040\uff31\001\002\000\032" +
    "\010\000\012\000\013\000\040\000\056\u011f\063\u0120\113" +
    "\u0126\125\u0119\127\u0127\131\u0123\132\u0124\137\u011e\001\002" +
    "\000\012\010\uff5b\012\uff5b\013\uff5b\040\uff5b\001\002\000" +
    "\032\010\000\012\000\013\000\040\000\056\u011f\063\u0120" +
    "\113\u0126\125\u0119\127\u0127\131\u0123\132\u0124\137\u011e\001" +
    "\002\000\012\010\uff42\012\uff42\013\uff42\040\uff42\001\002" +
    "\000\012\010\uff43\012\uff43\013\uff43\040\uff43\001\002\000" +
    "\012\010\uff35\012\uff35\013\uff35\040\uff35\001\002\000\012" +
    "\010\uff34\012\uff34\013\uff34\040\uff34\001\002\000\032\010" +
    "\uff3a\012\uff3a\013\uff3a\040\uff3a\056\uff3a\063\uff3a\113\uff3a" +
    "\125\uff3a\127\uff3a\131\uff3a\132\uff3a\137\uff3a\001\002\000" +
    "\026\035\046\056\u011f\063\u0120\113\u0126\125\u0119\127\u0127" +
    "\131\u0123\132\u0124\133\u0122\137\u011e\001\002\000\010\010" +
    "\uff5c\012\uff5c\013\uff5c\001\002\000\010\010\uff58\012\uff58" +
    "\013\uff58\001\002\000\010\010\uff59\012\uff59\013\uff59\001" +
    "\002\000\006\031\060\032\051\001\002\000\004\040\u015c" +
    "\001\002\000\006\031\060\032\051\001\002\000\004\010" +
    "\u015e\001\002\000\032\010\uff41\012\uff41\013\uff41\040\uff41" +
    "\056\uff41\063\uff41\113\uff41\125\uff41\127\uff41\131\uff41\132" +
    "\uff41\137\uff41\001\002\000\026\035\046\056\u011f\063\u0120" +
    "\113\u0126\125\u0119\127\u0127\131\u0123\132\u0124\133\u0122\137" +
    "\u011e\001\002\000\006\012\uff95\013\uff95\001\002\000\006" +
    "\007\u0165\073\000\001\002\000\006\012\uffa6\013\uffa6\001" +
    "\002\000\004\073\u016a\001\002\000\004\073\uff63\001\002" +
    "\000\004\035\046\001\002\000\004\010\u0169\001\002\000" +
    "\006\010\000\040\274\001\002\000\004\010\uff62\001\002" +
    "\000\004\073\uff64\001\002\000\004\064\012\001\002\000" +
    "\006\012\uff65\013\uff65\001\002\000\006\114\uffa4\171\uffa4" +
    "\001\002\000\006\114\uffa3\171\uffa3\001\002\000\006\012" +
    "\uffaa\013\uffaa\001\002\000\006\114\u0170\171\u0172\001\002" +
    "\000\004\035\u0176\001\002\000\006\012\uffa5\013\uffa5\001" +
    "\002\000\004\116\u0173\001\002\000\004\036\u0174\001\002" +
    "\000\004\035\u0175\001\002\000\006\012\uffa2\013\uffa2\001" +
    "\002\000\006\012\uffa1\013\uffa1\001\002\000\004\055\uff9e" +
    "\001\002\000\004\055\uff9f\001\002\000\004\055\u017b\001" +
    "\002\000\006\012\uffa9\013\uffa9\001\002\000\004\035\046" +
    "\001\002\000\020\037\u0182\172\u0181\173\u017d\174\u017f\175" +
    "\u0180\176\u0183\177\u0184\001\002\000\006\012\uff9c\013\uff9c" +
    "\001\002\000\006\012\uffa0\013\uffa0\001\002\000\006\012" +
    "\uff9b\013\uff9b\001\002\000\006\012\uff99\013\uff99\001\002" +
    "\000\006\012\uff9d\013\uff9d\001\002\000\006\012\uff9a\013" +
    "\uff9a\001\002\000\006\012\uff98\013\uff98\001\002\000\006" +
    "\012\uff97\013\uff97\001\002\000\056\002\ufff7\003\ufff7\004" +
    "\ufff7\012\ufff7\013\ufff7\037\ufff7\045\ufff7\046\ufff7\050\ufff7" +
    "\060\ufff7\064\ufff7\111\ufff7\167\ufff7\213\ufff7\214\ufff7\215" +
    "\ufff7\216\ufff7\217\ufff7\222\ufff7\226\ufff7\227\ufff7\230\ufff7" +
    "\001\002\000\004\055\u0191\001\002\000\004\036\u0188\001" +
    "\002\000\016\020\056\031\060\032\051\034\052\056\054" +
    "\205\063\001\002\000\010\012\000\013\000\040\u018a\001" +
    "\002\000\004\205\063\001\002\000\006\012\uffcb\013\uffcb" +
    "\001\002\000\006\012\uffc8\013\uffc8\001\002\000\004\036" +
    "\u018e\001\002\000\016\020\056\031\060\032\051\034\052" +
    "\056\054\205\063\001\002\000\010\012\000\013\000\040" +
    "\u018a\001\002\000\006\012\uffc9\013\uffc9\001\002\000\010" +
    "\012\000\013\000\040\u018a\001\002\000\006\012\uffca\013" +
    "\uffca\001\002\000\056\002\ufff0\003\ufff0\004\ufff0\012\ufff0" +
    "\013\ufff0\037\ufff0\045\ufff0\046\ufff0\050\ufff0\060\ufff0\064" +
    "\ufff0\111\ufff0\167\ufff0\213\ufff0\214\ufff0\215\ufff0\216\ufff0" +
    "\217\ufff0\222\ufff0\226\ufff0\227\ufff0\230\ufff0\001\002\000" +
    "\004\035\046\001\002\000\004\035\ufee7\001\002\000\004" +
    "\035\ufee8\001\002\000\010\007\u019a\061\000\063\000\001" +
    "\002\000\006\061\u01a4\063\u01a3\001\002\000\006\061\ufee5" +
    "\063\ufee5\001\002\000\004\035\u019b\001\002\000\006\010" +
    "\000\040\u019e\001\002\000\004\010\u019d\001\002\000\006" +
    "\061\ufee6\063\ufee6\001\002\000\004\035\u01a1\001\002\000" +
    "\004\010\ufee4\001\002\000\004\010\ufee2\001\002\000\006" +
    "\010\000\040\u019e\001\002\000\004\010\ufee3\001\002\000" +
    "\004\061\u01b3\001\002\000\004\007\u01a6\001\002\000\006" +
    "\012\ufeea\013\ufeea\001\002\000\016\020\056\031\060\032" +
    "\051\034\052\056\054\205\063\001\002\000\006\010\000" +
    "\040\u01ae\001\002\000\004\010\u01a9\001\002\000\010\012" +
    "\000\013\000\040\u01aa\001\002\000\004\007\u01a6\001\002" +
    "\000\006\012\ufee1\013\ufee1\001\002\000\006\012\ufedc\013" +
    "\ufedc\001\002\000\006\012\ufedd\013\ufedd\001\002\000\016" +
    "\020\056\031\060\032\051\034\052\056\054\205\063\001" +
    "\002\000\004\010\ufee0\001\002\000\004\010\ufede\001\002" +
    "\000\006\010\000\040\u01ae\001\002\000\004\010\ufedf\001" +
    "\002\000\006\012\ufee9\013\ufee9\001\002\000\006\012\uff83" +
    "\013\uff83\001\002\000\004\035\046\001\002\000\004\035" +
    "\u0223\001\002\000\004\051\uff6e\001\002\000\010\203\u01e2" +
    "\204\u01e1\220\u01e3\001\002\000\012\051\uff6b\203\uffc2\204" +
    "\uffc2\220\uffc2\001\002\000\004\035\046\001\002\000\004" +
    "\035\046\001\002\000\004\051\u01bf\001\002\000\004\167" +
    "\u01be\001\002\000\010\203\uffc3\204\uffc3\220\uffc3\001\002" +
    "\000\004\035\046\001\002\000\006\012\uff81\013\uff81\001" +
    "\002\000\004\055\u01c2\001\002\000\004\035\046\001\002" +
    "\000\004\007\u01c4\001\002\000\004\035\046\001\002\000" +
    "\006\010\000\040\274\001\002\000\004\010\u01c7\001\002" +
    "\000\012\012\000\013\000\055\u01c8\142\u01cb\001\002\000" +
    "\004\035\046\001\002\000\006\012\uff6a\013\uff6a\001\002" +
    "\000\006\012\uff66\013\uff66\001\002\000\004\007\u01cc\001" +
    "\002\000\004\035\046\001\002\000\004\010\u01ce\001\002" +
    "\000\006\012\uff68\013\uff68\001\002\000\004\007\u01d0\001" +
    "\002\000\004\035\046\001\002\000\004\010\u01d2\001\002" +
    "\000\012\012\000\013\000\055\u01c8\142\u01cb\001\002\000" +
    "\006\012\uff67\013\uff67\001\002\000\004\010\uff69\001\002" +
    "\000\006\012\uff7e\013\uff7e\001\002\000\004\007\u01d8\001" +
    "\002\000\006\012\uff80\013\uff80\001\002\000\026\035\046" +
    "\056\u011f\063\u0120\113\u0126\125\u0119\127\u0127\131\u0123\132" +
    "\u0124\133\u0122\137\u011e\001\002\000\004\010\u01da\001\002" +
    "\000\010\012\000\013\000\055\u01dc\001\002\000\006\012" +
    "\uff60\013\uff60\001\002\000\006\035\046\113\u01de\001\002" +
    "\000\006\012\uff5d\013\uff5d\001\002\000\006\012\uff5e\013" +
    "\uff5e\001\002\000\006\012\uff5f\013\uff5f\001\002\000\004" +
    "\035\046\001\002\000\004\035\uffc0\001\002\000\004\035" +
    "\uffc1\001\002\000\004\035\046\001\002\000\004\007\u01e5" +
    "\001\002\000\006\010\000\205\u01e8\001\002\000\004\010" +
    "\u01f5\001\002\000\012\010\uffbe\073\uffbe\115\uffbe\144\uffbe" +
    "\001\002\000\004\035\u01ea\001\002\000\012\010\uffbf\073" +
    "\uffbf\115\uffbf\144\uffbf\001\002\000\050\033\105\145\111" +
    "\146\115\147\124\150\107\151\117\152\112\153\106\154" +
    "\113\155\122\156\121\157\104\160\123\161\116\162\103" +
    "\163\126\164\120\165\110\166\125\001\002\000\022\010" +
    "\000\040\000\073\000\115\000\144\000\206\u01ec\207\u01ed" +
    "\210\u01f0\001\002\000\014\010\uffba\040\uffba\073\uffba\115" +
    "\uffba\144\uffba\001\002\000\014\010\uffb9\040\uffb9\073\uffb9" +
    "\115\uffb9\144\uffb9\001\002\000\014\010\000\040\u01f1\073" +
    "\000\115\000\144\000\001\002\000\014\010\uffb7\040\uffb7" +
    "\073\uffb7\115\uffb7\144\uffb7\001\002\000\014\010\uffb8\040" +
    "\uffb8\073\uffb8\115\uffb8\144\uffb8\001\002\000\004\205\u01e8" +
    "\001\002\000\012\010\uffbb\073\uffbb\115\uffbb\144\uffbb\001" +
    "\002\000\012\010\uffbd\073\uffbd\115\uffbd\144\uffbd\001\002" +
    "\000\012\010\uffbc\073\uffbc\115\uffbc\144\uffbc\001\002\000" +
    "\004\221\u01f6\001\002\000\054\033\105\047\u01f8\145\111" +
    "\146\115\147\124\150\107\151\117\152\112\153\106\154" +
    "\113\155\122\156\121\157\104\160\123\161\116\162\103" +
    "\163\126\164\120\165\110\166\125\205\063\001\002\000" +
    "\010\073\uffd8\115\uffd8\214\uffd8\001\002\000\010\073\uffd6" +
    "\115\uffd6\214\uffd6\001\002\000\004\047\u020f\001\002\000" +
    "\010\073\000\115\u01fb\214\000\001\002\000\010\211\u020a" +
    "\212\u020c\213\u0209\001\002\000\006\073\u01ff\214\000\001" +
    "\002\000\010\073\uffb5\144\uffb5\214\uffb5\001\002\000\004" +
    "\214\u0201\001\002\000\004\214\uffda\001\002\000\004\214" +
    "\uffd9\001\002\000\042\003\040\004\041\037\032\045\042" +
    "\046\014\050\036\060\030\064\012\111\025\167\034\213" +
    "\045\214\022\216\044\217\004\222\000\230\013\001\002" +
    "\000\004\222\u0205\001\002\000\004\222\uffd3\001\002\000" +
    "\042\003\040\004\041\037\032\045\042\046\014\050\036" +
    "\060\030\064\012\111\025\167\034\213\045\214\022\216" +
    "\044\217\004\222\uffd4\230\013\001\002\000\022\007\174" +
    "\020\056\031\060\032\051\034\052\035\046\056\054\205" +
    "\063\001\002\000\012\012\302\013\303\041\247\042\246" +
    "\001\002\000\004\215\u0208\001\002\000\006\012\uffdb\013" +
    "\uffdb\001\002\000\004\073\u020d\001\002\000\010\073\uffb4" +
    "\144\uffb4\214\uffb4\001\002\000\010\073\uffb6\144\uffb6\214" +
    "\uffb6\001\002\000\010\073\uffb3\144\uffb3\214\uffb3\001\002" +
    "\000\004\035\u020e\001\002\000\010\073\uffb2\144\uffb2\214" +
    "\uffb2\001\002\000\004\007\u0210\001\002\000\026\035\046" +
    "\056\u011f\063\u0120\113\u0126\125\u0119\127\u0127\131\u0123\132" +
    "\u0124\133\u0122\137\u011e\001\002\000\004\010\u0212\001\002" +
    "\000\010\073\uffd7\115\uffd7\214\uffd7\001\002\000\012\073" +
    "\000\115\000\144\000\205\u01e8\001\002\000\010\073\000" +
    "\115\u01fb\144\000\001\002\000\006\073\000\144\u0216\001" +
    "\002\000\004\135\u0221\001\002\000\004\073\uffb0\001\002" +
    "\000\004\073\u0219\001\002\000\040\003\000\004\000\037" +
    "\000\045\000\046\000\050\000\060\000\064\000\111\000" +
    "\167\000\213\000\214\u021a\216\000\217\000\230\000\001" +
    "\002\000\040\003\uffaf\004\uffaf\037\uffaf\045\uffaf\046\uffaf" +
    "\050\uffaf\060\uffaf\064\uffaf\111\uffaf\167\uffaf\213\uffaf\214" +
    "\uffaf\216\uffaf\217\uffaf\230\uffaf\001\002\000\040\003\uffae" +
    "\004\uffae\037\uffae\045\uffae\046\uffae\050\uffae\060\uffae\064" +
    "\uffae\111\uffae\167\uffae\213\uffae\214\uffae\216\uffae\217\uffae" +
    "\230\uffae\001\002\000\040\003\040\004\041\037\032\045" +
    "\042\046\014\050\036\060\030\064\012\111\025\167\034" +
    "\213\045\214\022\216\044\217\004\230\013\001\002\000" +
    "\046\003\040\004\041\012\000\013\000\037\032\045\042" +
    "\046\014\050\036\060\030\064\012\111\025\167\034\213" +
    "\045\214\022\215\u021f\216\044\217\004\230\013\001\002" +
    "\000\006\012\uffc4\013\uffc4\001\002\000\006\012\uffad\013" +
    "\uffad\001\002\000\006\012\uffac\013\uffac\001\002\000\004" +
    "\073\uffb1\001\002\000\006\012\uff7f\013\uff7f\001\002\000" +
    "\004\144\u0224\001\002\000\004\143\u0225\001\002\000\004" +
    "\035\u0226\001\002\000\006\012\uff61\013\uff61\001\002\000" +
    "\014\012\000\013\000\055\u022b\114\u022a\115\u022c\001\002" +
    "\000\006\012\uff82\013\uff82\001\002\000\006\012\uff7d\013" +
    "\uff7d\001\002\000\004\035\u0251\001\002\000\004\113\u022e" +
    "\001\002\000\006\012\uff7a\013\uff7a\001\002\000\006\012" +
    "\uff79\013\uff79\001\002\000\004\007\u022f\001\002\000\016" +
    "\010\000\116\u0234\117\u0233\120\u0236\121\u0230\122\u0235\001" +
    "\002\000\004\036\u024e\001\002\000\004\010\u0246\001\002" +
    "\000\004\010\uff73\001\002\000\004\036\u0243\001\002\000" +
    "\004\036\u0240\001\002\000\004\036\u023d\001\002\000\004" +
    "\036\u0237\001\002\000\004\020\u0238\001\002\000\006\010" +
    "\000\040\u0239\001\002\000\016\010\000\116\u0234\117\u0233" +
    "\120\u0236\121\u0230\122\u0235\001\002\000\004\010\uff76\001" +
    "\002\000\004\010\uff71\001\002\000\004\010\uff72\001\002" +
    "\000\004\031\u023e\001\002\000\006\010\000\040\u0239\001" +
    "\002\000\004\010\uff74\001\002\000\004\020\u0241\001\002" +
    "\000\006\010\000\040\u0239\001\002\000\004\010\uff78\001" +
    "\002\000\004\020\u0244\001\002\000\006\010\000\040\u0239" +
    "\001\002\000\004\010\uff77\001\002\000\010\012\000\013" +
    "\000\040\u0247\001\002\000\004\007\u024a\001\002\000\006" +
    "\012\uff7c\013\uff7c\001\002\000\006\012\uff6f\013\uff6f\001" +
    "\002\000\016\010\000\116\u0234\117\u0233\120\u0236\121\u0230" +
    "\122\u0235\001\002\000\004\010\u024c\001\002\000\010\012" +
    "\000\013\000\040\u0247\001\002\000\006\012\uff70\013\uff70" +
    "\001\002\000\004\020\u024f\001\002\000\006\010\000\040" +
    "\u0239\001\002\000\004\010\uff75\001\002\000\006\012\uff7b" +
    "\013\uff7b\001\002\000\004\002\001\001\002\000\056\002" +
    "\ufff6\003\ufff6\004\ufff6\012\ufff6\013\ufff6\037\ufff6\045\ufff6" +
    "\046\ufff6\050\ufff6\060\ufff6\064\ufff6\111\ufff6\167\ufff6\213" +
    "\ufff6\214\ufff6\215\ufff6\216\ufff6\217\ufff6\222\ufff6\226\ufff6" +
    "\227\ufff6\230\ufff6\001\002\000\014\012\uffea\013\uffea\035" +
    "\uffea\115\uffea\205\uffea\001\002\000\014\012\uffeb\013\uffeb" +
    "\035\uffeb\115\uffeb\205\uffeb\001\002\000\056\002\ufffb\003" +
    "\ufffb\004\ufffb\012\ufffb\013\ufffb\037\ufffb\045\ufffb\046\ufffb" +
    "\050\ufffb\060\ufffb\064\ufffb\111\ufffb\167\ufffb\213\ufffb\214" +
    "\ufffb\215\ufffb\216\ufffb\217\ufffb\222\ufffb\226\ufffb\227\ufffb" +
    "\230\ufffb\001\002\000\056\002\ufff9\003\ufff9\004\ufff9\012" +
    "\ufff9\013\ufff9\037\ufff9\045\ufff9\046\ufff9\050\ufff9\060\ufff9" +
    "\064\ufff9\111\ufff9\167\ufff9\213\ufff9\214\ufff9\215\ufff9\216" +
    "\ufff9\217\ufff9\222\ufff9\226\ufff9\227\ufff9\230\ufff9\001\002" +
    "\000\056\002\ufff4\003\ufff4\004\ufff4\012\ufff4\013\ufff4\037" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\060\ufff4\064\ufff4\111\ufff4" +
    "\167\ufff4\213\ufff4\214\ufff4\215\ufff4\216\ufff4\217\ufff4\222" +
    "\ufff4\226\ufff4\227\ufff4\230\ufff4\001\002\000\010\012\000" +
    "\013\000\115\u025e\001\002\000\010\012\uffe8\013\uffe8\115" +
    "\uffe8\001\002\000\010\012\uffe7\013\uffe7\115\uffe7\001\002" +
    "\000\010\012\uffe9\013\uffe9\115\uffe9\001\002\000\006\012" +
    "\302\013\303\001\002\000\004\225\u0260\001\002\000\006" +
    "\012\uffe5\013\uffe5\001\002\000\010\012\000\013\000\020" +
    "\u0261\001\002\000\006\012\uffe4\013\uffe4\001\002\000\006" +
    "\012\uffe6\013\uffe6\001\002\000\006\012\uffe3\013\uffe3\001" +
    "\002\000\040\003\040\004\041\037\032\045\042\046\014" +
    "\050\036\060\030\064\012\111\025\167\034\213\045\214" +
    "\022\216\044\217\004\230\013\001\002\000\044\003\040" +
    "\004\041\037\032\045\042\046\014\050\036\060\030\064" +
    "\012\111\025\167\034\213\045\214\022\216\044\217\004" +
    "\226\u0267\227\u0266\230\013\001\002\000\012\012\302\013" +
    "\303\223\u0272\224\u0270\001\002\000\012\012\302\013\303" +
    "\223\u026b\224\u0269\001\002\000\056\002\uffec\003\uffec\004" +
    "\uffec\012\uffec\013\uffec\037\uffec\045\uffec\046\uffec\050\uffec" +
    "\060\uffec\064\uffec\111\uffec\167\uffec\213\uffec\214\uffec\215" +
    "\uffec\216\uffec\217\uffec\222\uffec\226\uffec\227\uffec\230\uffec" +
    "\001\002\000\012\012\000\013\000\035\046\205\063\001" +
    "\002\000\056\002\uffe2\003\uffe2\004\uffe2\012\uffe2\013\uffe2" +
    "\037\uffe2\045\uffe2\046\uffe2\050\uffe2\060\uffe2\064\uffe2\111" +
    "\uffe2\167\uffe2\213\uffe2\214\uffe2\215\uffe2\216\uffe2\217\uffe2" +
    "\222\uffe2\226\uffe2\227\uffe2\230\uffe2\001\002\000\012\012" +
    "\000\013\000\035\046\205\063\001\002\000\006\012\302" +
    "\013\303\001\002\000\056\002\uffe1\003\uffe1\004\uffe1\012" +
    "\uffe1\013\uffe1\037\uffe1\045\uffe1\046\uffe1\050\uffe1\060\uffe1" +
    "\064\uffe1\111\uffe1\167\uffe1\213\uffe1\214\uffe1\215\uffe1\216" +
    "\uffe1\217\uffe1\222\uffe1\226\uffe1\227\uffe1\230\uffe1\001\002" +
    "\000\006\012\302\013\303\001\002\000\056\002\uffe0\003" +
    "\uffe0\004\uffe0\012\uffe0\013\uffe0\037\uffe0\045\uffe0\046\uffe0" +
    "\050\uffe0\060\uffe0\064\uffe0\111\uffe0\167\uffe0\213\uffe0\214" +
    "\uffe0\215\uffe0\216\uffe0\217\uffe0\222\uffe0\226\uffe0\227\uffe0" +
    "\230\uffe0\001\002\000\012\012\000\013\000\035\046\205" +
    "\063\001\002\000\056\002\uffdf\003\uffdf\004\uffdf\012\uffdf" +
    "\013\uffdf\037\uffdf\045\uffdf\046\uffdf\050\uffdf\060\uffdf\064" +
    "\uffdf\111\uffdf\167\uffdf\213\uffdf\214\uffdf\215\uffdf\216\uffdf" +
    "\217\uffdf\222\uffdf\226\uffdf\227\uffdf\230\uffdf\001\002\000" +
    "\012\012\000\013\000\035\046\205\063\001\002\000\006" +
    "\012\302\013\303\001\002\000\056\002\uffde\003\uffde\004" +
    "\uffde\012\uffde\013\uffde\037\uffde\045\uffde\046\uffde\050\uffde" +
    "\060\uffde\064\uffde\111\uffde\167\uffde\213\uffde\214\uffde\215" +
    "\uffde\216\uffde\217\uffde\222\uffde\226\uffde\227\uffde\230\uffde" +
    "\001\002\000\006\012\302\013\303\001\002\000\056\002" +
    "\uffdd\003\uffdd\004\uffdd\012\uffdd\013\uffdd\037\uffdd\045\uffdd" +
    "\046\uffdd\050\uffdd\060\uffdd\064\uffdd\111\uffdd\167\uffdd\213" +
    "\uffdd\214\uffdd\215\uffdd\216\uffdd\217\uffdd\222\uffdd\226\uffdd" +
    "\227\uffdd\230\uffdd\001\002\000\004\035\046\001\002\000" +
    "\006\012\ufec4\013\ufec4\001\002\000\012\012\000\013\000" +
    "\035\046\205\063\001\002\000\006\012\302\013\303\001" +
    "\002\000\056\002\uffdc\003\uffdc\004\uffdc\012\uffdc\013\uffdc" +
    "\037\uffdc\045\uffdc\046\uffdc\050\uffdc\060\uffdc\064\uffdc\111" +
    "\uffdc\167\uffdc\213\uffdc\214\uffdc\215\uffdc\216\uffdc\217\uffdc" +
    "\222\uffdc\226\uffdc\227\uffdc\230\uffdc\001\002\000\034\007" +
    "\uff2d\020\uff2d\031\uff2d\032\uff2d\034\uff2d\035\uff2d\056\uff2d" +
    "\066\uff2d\067\uff2d\070\uff2d\071\uff2d\072\uff2d\205\uff2d\001" +
    "\002\000\004\005\uff2f\001\002\000\034\007\174\020\056" +
    "\031\060\032\051\034\052\035\046\056\054\066\u02a4\067" +
    "\u02a3\070\u02a6\071\u02aa\072\u02a7\205\063\001\002\000\034" +
    "\007\uff2c\020\uff2c\031\uff2c\032\uff2c\034\uff2c\035\uff2c\056" +
    "\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c\072\uff2c\205\uff2c" +
    "\001\002\000\004\005\u0284\001\002\000\010\007\262\031" +
    "\060\032\051\001\002\000\034\007\uff2a\020\uff2a\031\uff2a" +
    "\032\uff2a\034\uff2a\035\uff2a\056\uff2a\066\uff2a\067\uff2a\070" +
    "\uff2a\071\uff2a\072\uff2a\205\uff2a\001\002\000\034\007\uff2b" +
    "\020\uff2b\031\uff2b\032\uff2b\034\uff2b\035\uff2b\056\uff2b\066" +
    "\uff2b\067\uff2b\070\uff2b\071\uff2b\072\uff2b\205\uff2b\001\002" +
    "\000\004\035\046\001\002\000\030\012\000\013\000\015" +
    "\000\075\000\076\u0291\077\u0292\100\u0293\101\u0296\103\000" +
    "\105\000\106\000\001\002\000\036\012\000\013\000\015" +
    "\000\035\u0288\040\000\073\u0287\075\000\076\000\077\000" +
    "\100\000\101\000\103\000\105\000\106\000\001\002\000" +
    "\006\020\u028f\035\u0290\001\002\000\034\012\uff05\013\uff05" +
    "\015\uff05\040\uff05\055\uff05\075\uff05\076\uff05\077\uff05\100" +
    "\uff05\101\uff05\103\uff05\105\uff05\106\uff05\001\002\000\032" +
    "\012\000\013\000\015\000\040\u028b\075\000\076\000\077" +
    "\000\100\000\101\000\103\000\105\000\106\000\001\002" +
    "\000\034\012\uff04\013\uff04\015\uff04\040\uff04\055\uff04\075" +
    "\uff04\076\uff04\077\uff04\100\uff04\101\uff04\103\uff04\105\uff04" +
    "\106\uff04\001\002\000\004\035\046\001\002\000\030\012" +
    "\uff0a\013\uff0a\015\uff0a\075\uff0a\076\uff0a\077\uff0a\100\uff0a" +
    "\101\uff0a\103\uff0a\105\uff0a\106\uff0a\001\002\000\030\012" +
    "\uff08\013\uff08\015\uff08\075\uff08\076\uff08\077\uff08\100\uff08" +
    "\101\uff08\103\uff08\105\uff08\106\uff08\001\002\000\030\012" +
    "\uff09\013\uff09\015\uff09\075\uff09\076\uff09\077\uff09\100\uff09" +
    "\101\uff09\103\uff09\105\uff09\106\uff09\001\002\000\034\012" +
    "\uff07\013\uff07\015\uff07\040\uff07\055\uff07\075\uff07\076\uff07" +
    "\077\uff07\100\uff07\101\uff07\103\uff07\105\uff07\106\uff07\001" +
    "\002\000\034\012\uff06\013\uff06\015\uff06\040\uff06\055\uff06" +
    "\075\uff06\076\uff06\077\uff06\100\uff06\101\uff06\103\uff06\105" +
    "\uff06\106\uff06\001\002\000\004\075\uff01\001\002\000\006" +
    "\075\000\102\u02da\001\002\000\006\075\000\102\u02da\001" +
    "\002\000\004\075\u02dc\001\002\000\020\012\uff02\013\uff02" +
    "\015\uff02\075\ufefd\103\uff02\105\uff02\106\uff02\001\002\000" +
    "\006\075\000\102\u02da\001\002\000\016\012\000\013\000" +
    "\015\212\103\000\105\000\106\000\001\002\000\014\012" +
    "\000\013\000\103\u029a\105\000\106\000\001\002\000\012" +
    "\012\ufef9\013\ufef9\105\ufef9\106\ufef9\001\002\000\004\104" +
    "\u02d6\001\002\000\012\012\000\013\000\105\u029c\106\000" +
    "\001\002\000\016\035\046\066\u02a4\067\u02a3\070\u02a6\071" +
    "\u02aa\072\u02a7\001\002\000\010\012\ufef7\013\ufef7\106\ufef7" +
    "\001\002\000\010\012\000\013\000\106\u029f\001\002\000" +
    "\004\104\u02a2\001\002\000\006\012\uff30\013\uff30\001\002" +
    "\000\006\012\ufef0\013\ufef0\001\002\000\016\035\046\066" +
    "\u02a4\067\u02a3\070\u02a6\071\u02aa\072\u02a7\001\002\000\004" +
    "\007\u02c7\001\002\000\004\007\u02c4\001\002\000\042\005" +
    "\uff1c\012\uff1c\013\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c" +
    "\025\uff1c\027\uff1c\030\uff1c\036\uff1c\040\uff1c\073\uff1c\107" +
    "\uff1c\110\uff1c\136\uff1c\001\002\000\004\007\u02c1\001\002" +
    "\000\004\007\u02be\001\002\000\016\007\u02ba\012\000\013" +
    "\000\040\000\107\u013d\110\u013c\001\002\000\014\012\000" +
    "\013\000\040\000\107\u013d\110\u013c\001\002\000\004\007" +
    "\u02ab\001\002\000\012\032\u02af\035\000\043\u02ac\065\u02ad" +
    "\001\002\000\004\010\uff1a\001\002\000\004\035\uff18\001" +
    "\002\000\004\035\046\001\002\000\004\010\uff1b\001\002" +
    "\000\004\010\u02b2\001\002\000\004\035\uff17\001\002\000" +
    "\042\005\uff1e\012\uff1e\013\uff1e\021\uff1e\022\uff1e\023\uff1e" +
    "\024\uff1e\025\uff1e\027\uff1e\030\uff1e\036\uff1e\040\uff1e\073" +
    "\uff1e\107\uff1e\110\uff1e\136\uff1e\001\002\000\004\010\uff19" +
    "\001\002\000\010\012\000\013\000\040\u02b5\001\002\000" +
    "\010\012\000\013\000\106\u029f\001\002\000\006\012\ufeeb" +
    "\013\ufeeb\001\002\000\006\012\ufef1\013\ufef1\001\002\000" +
    "\006\012\ufeec\013\ufeec\001\002\000\010\012\000\013\000" +
    "\040\u02b5\001\002\000\020\010\000\020\056\031\060\032" +
    "\051\034\052\056\054\205\063\001\002\000\004\010\u02bc" +
    "\001\002\000\042\005\uffd5\012\uffd5\013\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\036\uffd5" +
    "\040\uffd5\073\uffd5\107\uffd5\110\uffd5\136\uffd5\001\002\000" +
    "\006\012\ufef2\013\ufef2\001\002\000\012\032\u02af\035\000" +
    "\043\u02ac\065\u02ad\001\002\000\004\010\u02c0\001\002\000" +
    "\042\005\uff1d\012\uff1d\013\uff1d\021\uff1d\022\uff1d\023\uff1d" +
    "\024\uff1d\025\uff1d\027\uff1d\030\uff1d\036\uff1d\040\uff1d\073" +
    "\uff1d\107\uff1d\110\uff1d\136\uff1d\001\002\000\012\032\u02af" +
    "\035\000\043\u02ac\065\u02ad\001\002\000\004\010\u02c3\001" +
    "\002\000\042\005\uff1f\012\uff1f\013\uff1f\021\uff1f\022\uff1f" +
    "\023\uff1f\024\uff1f\025\uff1f\027\uff1f\030\uff1f\036\uff1f\040" +
    "\uff1f\073\uff1f\107\uff1f\110\uff1f\136\uff1f\001\002\000\012" +
    "\032\u02af\035\000\043\u02ac\065\u02ad\001\002\000\004\010" +
    "\u02c6\001\002\000\042\005\uff21\012\uff21\013\uff21\021\uff21" +
    "\022\uff21\023\uff21\024\uff21\025\uff21\027\uff21\030\uff21\036" +
    "\uff21\040\uff21\073\uff21\107\uff21\110\uff21\136\uff21\001\002" +
    "\000\012\032\u02af\035\000\043\u02ac\065\u02ad\001\002\000" +
    "\004\010\u02c9\001\002\000\042\005\uff20\012\uff20\013\uff20" +
    "\021\uff20\022\uff20\023\uff20\024\uff20\025\uff20\027\uff20\030" +
    "\uff20\036\uff20\040\uff20\073\uff20\107\uff20\110\uff20\136\uff20" +
    "\001\002\000\026\007\u02ba\021\215\022\220\023\216\024" +
    "\224\025\223\027\225\030\221\036\222\136\226\001\002" +
    "\000\010\012\ufef8\013\ufef8\106\ufef8\001\002\000\024\021" +
    "\215\022\220\023\216\024\224\025\223\027\225\030\221" +
    "\036\222\136\226\001\002\000\016\020\056\031\060\032" +
    "\051\034\052\056\054\205\063\001\002\000\014\012\000" +
    "\013\000\016\234\017\237\106\000\001\002\000\010\012" +
    "\ufef6\013\ufef6\106\ufef6\001\002\000\016\035\046\066\u02a4" +
    "\067\u02a3\070\u02a6\071\u02aa\072\u02a7\001\002\000\010\012" +
    "\ufef3\013\ufef3\106\ufef3\001\002\000\010\012\ufef4\013\ufef4" +
    "\106\ufef4\001\002\000\016\020\056\031\060\032\051\034" +
    "\052\056\054\205\063\001\002\000\014\012\000\013\000" +
    "\016\234\017\237\106\000\001\002\000\010\012\ufef5\013" +
    "\ufef5\106\ufef5\001\002\000\004\035\046\001\002\000\014" +
    "\012\000\013\000\040\274\105\000\106\000\001\002\000" +
    "\012\012\ufefa\013\ufefa\105\ufefa\106\ufefa\001\002\000\004" +
    "\075\ufefe\001\002\000\004\075\ufefc\001\002\000\004\075" +
    "\ufefb\001\002\000\004\035\046\001\002\000\010\035\u0288" +
    "\055\000\073\u0287\001\002\000\004\055\u02df\001\002\000" +
    "\004\035\046\001\002\000\004\036\u02e1\001\002\000\004" +
    "\035\046\001\002\000\030\012\000\013\000\015\000\075" +
    "\000\076\u0291\077\u0292\100\u0293\101\u0296\103\000\105\000" +
    "\106\000\001\002\000\016\012\uff03\013\uff03\015\uff03\103" +
    "\uff03\105\uff03\106\uff03\001\002\000\004\075\ufeff\001\002" +
    "\000\004\075\uff00\001\002\000\010\005\uff28\040\uff28\073" +
    "\uff28\001\002\000\010\005\000\040\000\073\u02ed\001\002" +
    "\000\004\005\uff2e\001\002\000\014\005\uff27\040\uff27\041" +
    "\247\042\246\073\uff27\001\002\000\024\005\ufeb7\007\u02ba" +
    "\036\u02eb\040\ufeb7\041\ufeb7\042\ufeb7\043\ufeb7\044\ufeb7\073" +
    "\ufeb7\001\002\000\022\007\174\020\056\031\060\032\051" +
    "\034\052\035\046\056\054\205\063\001\002\000\014\005" +
    "\uff26\040\uff26\041\247\042\246\073\uff26\001\002\000\006" +
    "\020\u02f4\035\u02f5\001\002\000\006\005\000\040\u02f0\001" +
    "\002\000\006\005\uff14\040\uff14\001\002\000\044\006\u0281" +
    "\007\000\020\000\031\000\032\000\034\000\035\000\043" +
    "\u027d\056\000\065\u027c\066\000\067\000\070\000\071\000" +
    "\072\000\074\u027f\205\000\001\002\000\004\005\uff29\001" +
    "\002\000\004\005\uff24\001\002\000\004\005\uff25\001\002" +
    "\000\006\005\uff16\040\uff16\001\002\000\006\005\uff15\040" +
    "\uff15\001\002\000\056\002\ufff2\003\ufff2\004\ufff2\012\ufff2" +
    "\013\ufff2\037\ufff2\045\ufff2\046\ufff2\050\ufff2\060\ufff2\064" +
    "\ufff2\111\ufff2\167\ufff2\213\ufff2\214\ufff2\215\ufff2\216\ufff2" +
    "\217\ufff2\222\ufff2\226\ufff2\227\ufff2\230\ufff2\001\002\000" +
    "\056\002\ufffa\003\ufffa\004\ufffa\012\ufffa\013\ufffa\037\ufffa" +
    "\045\ufffa\046\ufffa\050\ufffa\060\ufffa\064\ufffa\111\ufffa\167" +
    "\ufffa\213\ufffa\214\ufffa\215\ufffa\216\ufffa\217\ufffa\222\ufffa" +
    "\226\ufffa\227\ufffa\230\ufffa\001\002\000\056\002\ufff5\003" +
    "\ufff5\004\ufff5\012\ufff5\013\ufff5\037\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\060\ufff5\064\ufff5\111\ufff5\167\ufff5\213\ufff5\214" +
    "\ufff5\215\ufff5\216\ufff5\217\ufff5\222\ufff5\226\ufff5\227\ufff5" +
    "\230\ufff5\001\002\000\056\002\ufff8\003\ufff8\004\ufff8\012" +
    "\ufff8\013\ufff8\037\ufff8\045\ufff8\046\ufff8\050\ufff8\060\ufff8" +
    "\064\ufff8\111\ufff8\167\ufff8\213\ufff8\214\ufff8\215\ufff8\216" +
    "\ufff8\217\ufff8\222\ufff8\226\ufff8\227\ufff8\230\ufff8\001\002" +
    "\000\056\002\ufff3\003\ufff3\004\ufff3\012\ufff3\013\ufff3\037" +
    "\ufff3\045\ufff3\046\ufff3\050\ufff3\060\ufff3\064\ufff3\111\ufff3" +
    "\167\ufff3\213\ufff3\214\ufff3\215\ufff3\216\ufff3\217\ufff3\222" +
    "\ufff3\226\ufff3\227\ufff3\230\ufff3\001\002\000\022\012\000" +
    "\013\000\020\056\031\060\032\051\034\052\056\054\205" +
    "\063\001\002\000\006\012\uffd1\013\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02fa\000\050\002\017\003\023\004\042\005\026\013" +
    "\034\040\007\042\016\056\005\071\032\125\022\163\006" +
    "\202\010\204\004\207\015\223\036\226\030\234\025\235" +
    "\014\242\020\001\001\000\004\015\u02fa\001\001\000\004" +
    "\010\u02f9\001\001\000\004\010\u02f8\001\001\000\004\010" +
    "\u02f7\001\001\000\004\010\u02f6\001\001\000\004\010\u02f5" +
    "\001\001\000\010\006\u0281\072\u027f\073\u027d\001\001\000" +
    "\004\235\u0278\001\001\000\002\001\001\000\012\006\u025a" +
    "\015\u0259\206\u025b\236\u0258\001\001\000\004\010\u0257\001" +
    "\001\000\004\010\u0256\001\001\000\004\010\u0255\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0252\001" +
    "\001\000\002\001\001\000\012\006\u01b8\126\u01b3\133\u01bb" +
    "\210\u01b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0194\057\u0193\001\001\000\004\010\u0192\001\001" +
    "\000\004\206\u0186\001\001\000\004\010\u0184\001\001\000" +
    "\004\164\357\001\001\000\004\010\351\001\001\000\010" +
    "\041\305\046\306\054\312\001\001\000\004\010\303\001" +
    "\001\000\002\001\001\000\006\006\165\014\270\001\001" +
    "\000\006\006\165\014\164\001\001\000\044\002\017\005" +
    "\162\013\034\040\007\042\016\056\005\071\032\125\022" +
    "\163\006\202\010\204\004\207\015\223\036\226\030\234" +
    "\025\235\014\242\020\001\001\000\004\206\101\001\001" +
    "\000\004\015\046\001\001\000\006\006\077\011\076\001" +
    "\001\000\020\006\060\024\063\034\047\036\052\037\054" +
    "\206\056\224\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\066\225\065\001\001\000\020\006" +
    "\060\024\063\034\047\036\052\037\054\206\056\224\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\073\034\047\036\052" +
    "\037\054\206\072\001\001\000\002\001\001\000\006\006" +
    "\066\225\074\001\001\000\002\001\001\000\004\015\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\153\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\146\203\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\047\036\052\037\127\001\001\000\002\001" +
    "\001\000\010\034\047\036\052\037\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\047\036\052\037\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\047\036\052\037\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\206\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\150\001\001\000\006\006\146" +
    "\203\151\001\001\000\002\001\001\000\010\034\047\036" +
    "\052\037\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\047\036\052\037\156\001\001\000\002\001" +
    "\001\000\010\034\047\036\052\037\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\262\034\260\001\001\000\004\015\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\170\001\001\000" +
    "\002\001\001\000\030\015\200\024\174\025\172\026\201" +
    "\031\177\032\175\033\176\034\047\036\052\037\054\206" +
    "\072\001\001\000\006\006\212\016\257\001\001\000\024" +
    "\015\200\024\174\031\255\032\175\033\176\034\047\036" +
    "\052\037\054\206\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\203\027\204\001\001\000\004\015\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\015\200\024\174\025\207\026\201\031\177" +
    "\032\175\033\176\034\047\036\052\037\054\206\072\001" +
    "\001\000\006\006\212\016\210\001\001\000\002\001\001" +
    "\000\004\015\213\001\001\000\002\001\001\000\004\007" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\231\034\047\036\052\037\054\206\072\001\001\000" +
    "\002\001\001\000\004\034\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\235\021\232\023\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\240\015\237" +
    "\022\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\243\034\047\036\052\037\054\206\072\001" +
    "\001\000\010\006\235\021\244\023\234\001\001\000\002" +
    "\001\001\000\022\015\200\024\174\032\254\033\176\034" +
    "\047\036\052\037\054\206\072\001\001\000\022\015\200" +
    "\024\174\032\247\033\176\034\047\036\052\037\054\206" +
    "\072\001\001\000\002\001\001\000\020\015\200\024\174" +
    "\033\253\034\047\036\052\037\054\206\072\001\001\000" +
    "\020\015\200\024\174\033\252\034\047\036\052\037\054" +
    "\206\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\266\001\001\000" +
    "\006\006\265\020\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\272\001\001\000\006" +
    "\006\275\055\274\001\001\000\004\015\277\001\001\000" +
    "\006\006\212\016\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\275\055\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\315\043\332\001\001\000\006\006\315" +
    "\043\327\001\001\000\006\006\315\043\316\001\001\000" +
    "\002\001\001\000\004\015\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\321\044\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\325\045\324" +
    "\001\001\000\002\001\001\000\006\015\321\044\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\330\001\001\000\006\006\275\055\331\001" +
    "\001\000\002\001\001\000\004\015\333\001\001\000\012" +
    "\015\336\047\340\050\337\052\334\001\001\000\002\001" +
    "\001\000\004\015\342\001\001\000\006\006\275\055\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\345\051\344\001\001\000\004\015\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\170\u0179\171\u0178\001\001\000\006\165" +
    "\u016d\166\u016e\001\001\000\006\015\u0160\137\u0161\001\001" +
    "\000\006\015\u0104\173\u0103\001\001\000\004\177\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\200\363\201\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\374\162\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\201\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\174\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\u0120\144\u011c\150\u0124" +
    "\151\u011a\155\u011b\175\u0119\001\001\000\006\015\u010c\176" +
    "\u010d\001\001\000\004\015\u0116\001\001\000\004\015\u0114" +
    "\001\001\000\004\015\u0112\001\001\000\006\006\u0110\233" +
    "\u010f\001\001\000\002\001\001\000\006\015\u010c\176\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u0110\233\u0113\001\001\000\002\001\001" +
    "\000\006\006\u0110\233\u0115\001\001\000\002\001\001\000" +
    "\006\006\u0110\233\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0157\152\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u0141" +
    "\161\u0140\001\001\000\002\001\001\000\014\024\u0154\034" +
    "\047\036\052\037\054\206\072\001\001\000\004\153\u014d" +
    "\001\001\000\004\015\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u012c\001\001" +
    "\000\002\001\001\000\004\015\u012e\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\u0134\133\u0136\143\u0135" +
    "\155\u0131\001\001\000\002\001\001\000\006\006\u0141\161" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0139\001\001\000\006\006\275\055\u013a\001\001\000\006" +
    "\006\u013d\123\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u0143\001" +
    "\001\000\006\006\275\055\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\240\015\237\022\u0148\157" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\u014c\001\001\000" +
    "\002\001\001\000\010\006\u0150\154\u014e\155\u014f\001\001" +
    "\000\002\001\001\000\010\006\u0153\155\u0152\156\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\u0120\144" +
    "\u011c\150\u0158\151\u011a\155\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u015a\001" +
    "\001\000\002\001\001\000\004\034\u015c\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\u0120\144\u011c\150" +
    "\u015f\151\u011a\155\u011b\001\001\000\002\001\001\000\006" +
    "\006\u0163\140\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0166\141\u0165\001\001" +
    "\000\002\001\001\000\006\006\275\055\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u016a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\167\u0170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u017b\001\001\000\004\172\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\u0188\034\047\036\052" +
    "\037\054\206\072\001\001\000\006\006\u018b\205\u018a\001" +
    "\001\000\004\206\u018c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\u018e\034\047\036" +
    "\052\037\054\206\072\001\001\000\006\006\u018b\205\u018f" +
    "\001\001\000\002\001\001\000\006\006\u018b\205\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0196" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0198\060\u0197\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u019b\001\001\000\006\006\u019f\062\u019e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u019f\062" +
    "\u01a1\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u01a4\001\001\000\002\001\001\000\016\024\u01a6\034" +
    "\047\036\052\037\054\064\u01a7\206\072\001\001\000\006" +
    "\006\u01af\065\u01ae\001\001\000\002\001\001\000\006\006" +
    "\u01ab\066\u01aa\001\001\000\004\063\u01ac\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\u01b0\034\047\036\052\037\054\206\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u01af\065\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0226\127\u0227\001\001\000\004\145\u0221\001" +
    "\001\000\002\001\001\000\004\211\u01df\001\001\000\002" +
    "\001\001\000\006\015\u01d5\146\u01d6\001\001\000\006\015" +
    "\u0160\137\u01d4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u01c0\134\u01bf\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01c2\001\001" +
    "\000\002\001\001\000\006\015\u01c4\135\u01c5\001\001\000" +
    "\006\006\275\055\u01d3\001\001\000\002\001\001\000\006" +
    "\006\u01c9\136\u01c8\001\001\000\004\015\u01ce\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u01c4\135\u01cc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01c4\135\u01d0\001\001" +
    "\000\002\001\001\000\006\006\u01c9\136\u01d2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\u0120\144\u011c\150" +
    "\u01d8\151\u011a\155\u011b\001\001\000\002\001\001\000\006" +
    "\006\u01dc\147\u01da\001\001\000\002\001\001\000\004\015" +
    "\u01de\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01e3\001\001\000\002\001\001" +
    "\000\010\006\u01e6\212\u01e5\213\u01e8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\153\u01ea\001\001\000\006\006\u01ee\215\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u01f1" +
    "\214\u01f2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\213\u01f3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\153\u01f6\206" +
    "\u01f8\231\u01f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u01fc\216\u01fb\001\001\000" +
    "\004\217\u020a\001\001\000\006\006\u01ff\227\u01fd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\017\004\u0203\005\026\006\u0202" +
    "\013\034\040\007\042\016\056\005\071\032\125\022\163" +
    "\006\202\010\204\004\207\015\223\036\226\030\230\u0201" +
    "\234\025\235\014\242\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\002\017\005\162\013\034\040\007" +
    "\042\016\056\005\071\032\125\022\163\006\202\010\204" +
    "\004\207\015\223\036\226\030\234\025\235\014\242\020" +
    "\001\001\000\024\015\200\024\174\031\u0205\032\175\033" +
    "\176\034\047\036\052\037\054\206\072\001\001\000\004" +
    "\010\u0206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\u0120\144\u011c\150\u0210\151\u011a\155\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\u01e6\212\u0213\213\u01e8\001\001\000\006\006\u01fc\216\u0214" +
    "\001\001\000\006\006\u0216\220\u0217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u021a" +
    "\221\u021b\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\017\004\u021c\005\026\013\034\040\007\042\016" +
    "\056\005\071\032\125\022\163\006\202\010\204\004\207" +
    "\015\223\036\226\030\234\025\235\014\242\020\001\001" +
    "\000\050\002\017\005\162\006\u021f\013\034\040\007\042" +
    "\016\056\005\071\032\125\022\163\006\202\010\204\004" +
    "\207\015\222\u021d\223\036\226\030\234\025\235\014\242" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u022c\130\u0228\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0231\131\u0230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u023a\142\u0239\001\001\000\006\006\u0231\131\u023b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u023a\142\u023e\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u023a\142\u0241" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u023a\142\u0244\001\001\000\002\001\001\000\006\006\u0248" +
    "\132\u0247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0231\131\u024a\001\001\000\002" +
    "\001\001\000\006\006\u0248\132\u024c\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u023a\142\u024f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u025e\237\u025c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0263\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0262\240\u0261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\017\004\u0264\005\026\013\034\040\007\042\016" +
    "\056\005\071\032\125\022\163\006\202\010\204\004\207" +
    "\015\223\036\226\030\234\025\235\014\242\020\001\001" +
    "\000\046\002\017\005\162\013\034\040\007\042\016\056" +
    "\005\071\032\125\022\163\006\202\010\204\004\207\015" +
    "\223\036\226\030\234\025\235\014\241\u0267\242\020\001" +
    "\001\000\004\010\u0270\001\001\000\004\010\u0269\001\001" +
    "\000\002\001\001\000\012\006\u025a\015\u0259\206\u025b\236" +
    "\u026d\001\001\000\002\001\001\000\012\006\u025a\015\u0259" +
    "\206\u025b\236\u026b\001\001\000\004\010\u026c\001\001\000" +
    "\002\001\001\000\004\010\u026e\001\001\000\002\001\001" +
    "\000\012\006\u025a\015\u0259\206\u025b\236\u0274\001\001\000" +
    "\002\001\001\000\012\006\u025a\015\u0259\206\u025b\236\u0272" +
    "\001\001\000\004\010\u0273\001\001\000\002\001\001\000" +
    "\004\010\u0275\001\001\000\002\001\001\000\004\015\u0277" +
    "\001\001\000\002\001\001\000\012\006\u025a\015\u0259\206" +
    "\u025b\236\u0279\001\001\000\004\010\u027a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\015" +
    "\u02e9\024\174\031\u02e8\032\175\033\176\034\047\036\052" +
    "\037\054\074\u02e7\075\u02e6\100\u02e5\206\072\232\u02a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0282" +
    "\034\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0285\107\u0284\001\001\000\010\006\u0294\112\u0296" +
    "\113\u0293\001\001\000\006\006\u0289\111\u0288\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u028c\110\u028b" +
    "\001\001\000\002\001\001\000\006\015\u0285\107\u028d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u02da\114\u02e4\001\001\000\006\006\u02da\114\u02e3" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u02da\114\u02d8\001\001\000\006\006\212\016\u0297\001\001" +
    "\000\006\006\u0298\116\u029a\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u029c\117\u029d\001\001\000\012" +
    "\015\u02c9\100\u02cb\120\u02ca\232\u02a4\001\001\000\002\001" +
    "\001\000\006\006\u02a0\122\u029f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u02a7\100" +
    "\u02a8\232\u02a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u013d\123\u02b8\001\001\000\006\006\u013d\123\u02b3" +
    "\001\001\000\002\001\001\000\010\006\u02b0\101\u02af\102" +
    "\u02ad\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u02b2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u02b5\124\u02b6\001\001\000\006\006\u02a0\122\u02b7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u02b5\124\u02bc\001\001\000\020\006\060\024" +
    "\063\034\047\036\052\037\054\206\056\224\u02ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u02b0\101\u02be\102\u02ad\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u02b0\101\u02c1\102\u02ad\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\u02b0" +
    "\101\u02c4\102\u02ad\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u02b0\101\u02c7\102\u02ad\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u02d2\001\001\000" +
    "\002\001\001\000\004\007\u02cc\001\001\000\014\024\u02cd" +
    "\034\047\036\052\037\054\206\072\001\001\000\010\006" +
    "\u02d0\023\u02cf\121\u02ce\001\001\000\002\001\001\000\012" +
    "\015\u02c9\100\u02cb\120\u02d1\232\u02a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\u02d3\034\047\036\052" +
    "\037\054\206\072\001\001\000\010\006\u02d0\023\u02cf\121" +
    "\u02d4\001\001\000\002\001\001\000\004\015\u02d6\001\001" +
    "\000\006\006\275\055\u02d7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u02dc\001\001\000\006\006\u0289\111\u02dd\001\001\000" +
    "\002\001\001\000\004\015\u02df\001\001\000\002\001\001" +
    "\000\004\015\u02e1\001\001\000\010\006\u0294\112\u02e2\113" +
    "\u0293\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u02ee\103\u02ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\200\024\174\031\u02eb\032\175\033\176\034" +
    "\047\036\052\037\054\206\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u02f1\076\u02f0\001\001\000" +
    "\002\001\001\000\010\006\u0281\072\u02f2\073\u027d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\060\024\063\034\047\036\052\037\054" +
    "\206\056\224\u02fb\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public int cont = 0;
    public String errores="";
    
    public void syntax_error(Symbol s){
         errores +="Error de sintaxis. Linea: " + (s.right + 1) +" Columna: " + s.left + ". Texto: \"" + s.value + "\"\n";
    }

    public Symbol getS(){
        return this.s;
}

public void unrecovered_syntax_error(Symbol s){ 
   report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= querys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // querys ::= querys sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // querys ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= eliminar fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= update fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= truncate fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= drop fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= insert fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= select fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= create fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= alter fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= procedure fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sets fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= declares fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= exec fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= functions fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= begin_transaction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= save_point 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // begin_transaction ::= trans transaction_name with_trans fin querys fin_transaction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_transaction",154, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // trans ::= BEGIN TRAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trans",155, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // trans ::= BEGIN TRANSACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trans",155, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // transaction_name ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // transaction_name ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // transaction_name ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // with_trans ::= WITH MARK description 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_trans",157, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // with_trans ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_trans",157, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // description ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("description",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // description ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("description",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fin_transaction ::= COMMIT fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fin_transaction ::= COMMIT TRAN transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // fin_transaction ::= COMMIT TRANSACTION transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fin_transaction ::= ROLLBACK fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fin_transaction ::= ROLLBACK TRAN transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fin_transaction ::= ROLLBACK TRANSACTION transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // save_point ::= SAVE trans transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("save_point",160, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functions ::= CREATE alterar FUNCTION objeto_nombre PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO RETURNS tipo_retorno with_procedure as BEGIN interno_funcion RETURN E fin END 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",148, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // as ::= AS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // as ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_retorno ::= tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_retorno ::= VARIABLES TABLE PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_retorno ::= TABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamar_funciones ::= objeto_nombre PARENTESIS_ABIERTO enviar_datos PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funciones",152, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // interno_funcion ::= querys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interno_funcion",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // interno_funcion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interno_funcion",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exec ::= EXECUTE objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exec ::= EXEC objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // enviar_datos ::= VARIABLES ASIGNAR data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // enviar_datos ::= data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enviar_datos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mandar_mas ::= COMA enviar_datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mandar_mas ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sets ::= SET VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sets ::= SET NOCOUNT ON sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sets2 ::= COMA VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sets2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declares ::= DECLARE VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declares2 ::= COMA VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declares2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procedure ::= CREATE alterar proc objeto_nombre parametros with_procedure replication AS empezar querys final 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",133, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // alterar ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // alterar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= PROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros1 ::= ARROBA IDENTIFICADOR tipo_dato tipo_parametro parametros2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros1",137, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros2 ::= COMA parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_parametro ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_parametro ::= READONLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_parametro ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // with_procedure ::= WITH procedure_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // with_procedure ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // procedure_option ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_option ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_option ::= EXECUTE AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // replication ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // replication ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // empezar ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // empezar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // final ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // final ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alter ::= ALTER opciones 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opciones ::= DATABASE database_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opciones ::= INDEX index_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opciones ::= TABLE table_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opciones ::= USER user_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opciones ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // database_alter ::= nombre_actual tipo_alter_base 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_alter",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nombre_actual ::= CURRENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // nombre_actual ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_alter_base ::= MODIFY NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo_alter_base ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // index_alter ::= nombre_index ON objeto_nombre accion_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_alter",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // nombre_index ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // nombre_index ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // accion_index ::= REBUILD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // accion_index ::= DISABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // accion_index ::= REORGANIZE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // accion_index ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // accion_index ::= RESUME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // accion_index ::= PAUSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // accion_index ::= ABORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // table_alter ::= objeto_nombre accion_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_alter",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // accion_alter ::= ALTER COLUMN add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // accion_alter ::= ADD tipo_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // accion_alter ::= DROP drop_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo_add ::= add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_add",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // drop_column ::= CONSTRAINT objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // drop_column ::= COLUMN objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // drop_column ::= INDEX objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // drop_column ::= objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mas_drop ::= COMA drop_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_drop",153, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mas_drop ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_drop",153, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // user_alter ::= IDENTIFICADOR WITH set_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_alter",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // set_item ::= set_item1 set_item2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // set_item1 ::= NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // set_item1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // set_item1 ::= LOGIN ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // set_item1 ::= PASSWORD ASIGNAR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // set_item2 ::= COMA set_item1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // set_item2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // create ::= CREATE opciones_crear 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // opciones_crear ::= DATABASE database_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // opciones_crear ::= opciones_index INDEX index_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // opciones_crear ::= TABLE table_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // opciones_crear ::= USER user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // opciones_crear ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // database_create ::= objeto_nombre extras_database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_create",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // extras_database ::= ON PRIMARY PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // extras_database ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // extras_database ::= WITH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // extras_database ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // filespec ::= NAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // filespec ::= NAMES ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // filespec ::= FILE ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // filespec ::= FILENAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // filespec ::= SIZE ASIGNAR INT_NUM mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // filespec ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // mas_file2 ::= COMA filespec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // mas_file2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // mas_file ::= COMA PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // mas_file ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // opciones_index ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // opciones_index ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // opciones_index ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // opciones_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // index_create ::= objeto_nombre ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_create",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // column_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_index",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // mas_index ::= INCLUDE PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // mas_index ::= ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // mas_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // view_create ::= objeto_nombre column_view AS select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_create",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // column_view ::= PARENTESIS_ABIERTO column_view1 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // column_view ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // column_view1 ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // user ::= IDENTIFICADOR FOR LOGIN IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // table_create ::= objeto_nombre PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO extra_create_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_create",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // extra_create_table ::= ON objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // extra_create_table ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // extra_create_table ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // add_column ::= add_column1 add_column2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // add_column1 ::= objeto_nombre tipo_dato constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // add_column1 ::= aux2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // add_column2 ::= COMA add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // add_column2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // tipo_dato ::= CHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tipo_dato ::= VARCHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tipo_dato ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // tipo_dato ::= IMAGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipo_dato ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // tipo_dato ::= VARBINARY PARENTESIS_ABIERTO MAX PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipo_dato ::= DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipo_dato ::= DATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipo_dato ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // tipo_dato ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipo_dato ::= TIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipo_dato ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipo_dato ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipo_dato ::= FLOAT PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo_dato ::= MONEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipo_dato ::= BIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // tipo_dato ::= DECIMAL PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // tipo_dato ::= NUMERIC PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // constraint ::= constraint1 constraint2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // constraint ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // constraint1 ::= IDENTITY PARENTESIS_ABIERTO NUM COMA NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // constraint1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // constraint1 ::= UNIQUE extra_unique 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // constraint1 ::= PRIMARY KEY extra_primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // constraint1 ::= FOREIGN KEY PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO REFERENCES objeto_nombre PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // constraint1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // constraint1 ::= CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // constraint1 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // extra_unique ::= PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // extra_unique ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // extra_primary ::= opciones_index PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto tipo_orden PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // extra_primary ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // constraint2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // constraint2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expresion_logica ::= otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // aux2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // aux2 ::= CONSTRAINT objeto_nombre constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // select ::= SELECT option_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // option_select ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // option_select ::= seleccion columna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // seleccion ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // seleccion ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // seleccion ::= TOP expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // seleccion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // columna1 ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // columna1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // columna1 ::= objeto_nombre ASIGNAR E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // columna2 ::= COMA option_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // columna2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // data_tipo_operacion ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // data_tipo_operacion ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // funciones ::= AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // funciones ::= COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funciones ::= MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funciones ::= MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funciones ::= llamar_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // valor ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // valor ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // valor ::= puede objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // puede ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // puede ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // alias_columna ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // alias_columna ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // alias_columna ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // operacion ::= operacion_matematica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // operacion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // operacion_matematica ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_matematica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // operacion_logica ::= data_tipo_operacion operadores data_tipo_operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // operador ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // origen ::= objeto_nombre alias_tabla origen1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // origen1 ::= COMA origen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // origen1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // alias_tabla ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // alias_tabla ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // alias_tabla ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // alias_tabla ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // joins ::= tipo_join JOIN objeto_nombre alias_tabla ON objeto_nombre ASIGNAR objeto_nombre joins 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // joins ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // tipo_join ::= INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // tipo_join ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // tipo_join1 ::= OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // tipo_join1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // agrupado ::= GROUP BY objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // agrupado ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // teniendo ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // teniendo1 ::= funciones operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // teniendo1 ::= objeto_nombre operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // teniendo2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // orden ::= ORDER BY objeto_nombre tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // orden ::= ORDER BY funciones tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // tipo_orden ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // tipo_orden ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // tipo_orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // orden2 ::= COMA orden 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // orden2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // insert ::= INSERT into objeto_nombre campos VALUES valores 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // insert ::= INSERT into objeto_nombre campos DEFAULT VALUES 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // into ::= INTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // into ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // campos ::= PARENTESIS_ABIERTO campos2 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // campos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // campos2 ::= IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // mas_de_un_identificador ::= COMA IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // mas_de_un_identificador ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // valores ::= PARENTESIS_ABIERTO valores2 PARENTESIS_CERRADO mas_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // valores2 ::= data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // mas_valores2 ::= COMA data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // mas_valores2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // mas_valores ::= COMA valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // mas_valores ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // drop ::= DROP tipo_objeto 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // if_op ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // if_op ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // tipo_objeto ::= TABLE if_op tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // tipo_objeto ::= index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // tipo_objeto ::= database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // tipo_objeto ::= PROCEDURE objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // tipo_objeto ::= FUNCTION objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // tabla ::= objeto_nombre tabla2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // tabla2 ::= COMA tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // tabla2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // index ::= INDEX if_op objeto_nombre index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // index2 ::= drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // index2 ::= drop_backward_compatible_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // drop_relational_or_xml_or_spatial_index ::= ON objeto_nombre drop_relational_or_xml_or_spatial_index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // drop_relational_or_xml_or_spatial_index2 ::= COMA objeto_nombre drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // drop_relational_or_xml_or_spatial_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // drop_backward_compatible_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // drop_backward_compatible_index2 ::= mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // drop_backward_compatible_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // database ::= DATABASE if_op objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // mas_de_un_objeto ::= COMA objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // mas_de_un_objeto ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // truncate ::= TRUNCATE TABLE objeto_nombre 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("truncate",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // update ::= UPDATE opciones_delete objeto_nombre SET objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // asignaciones ::= asignaciones1 asignaciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // asignaciones2 ::= COMA objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // asignaciones2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // asignaciones1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // E ::= E SUMA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // E ::= E RESTA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // T ::= T MULTIPLICACION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // T ::= T DIVISION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // T ::= F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // F ::= PARENTESIS_ABIERTO E PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // F ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // F ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NUM ::= INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // NUM ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // FLOTANTE ::= FLOAT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOTANTE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // VALORES_NUMEROS ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // VALORES_NUMEROS ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // eliminar ::= DELETE opciones_delete FROM objeto_nombre mas_de_un_objeto condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // fin ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // fin ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // opciones_delete ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // opciones_delete ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expresion ::= PARENTESIS_ABIERTO NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // expresion ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // porcentaje ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // porcentaje ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // condicionales ::= WHERE objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // condicionales ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // condicionales1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // otra_condicion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // otra_condicion ::= objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // data_tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // data_tipo ::= VALORES_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // data_tipo ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // data_tipo ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // VARIABLES ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",132, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // operadores ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // operadores ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // operadores ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // operadores ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // operadores ::= DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // operadores ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // operadores ::= BETWEEN NUM AND INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // operadores ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // operadores ::= IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // objeto_nombre ::= IDENTIFICADOR objeto_nombre1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // objeto_nombre1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // objeto_nombre1 ::= PUNTO objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // objeto_nombre2 ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // objeto_nombre2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
