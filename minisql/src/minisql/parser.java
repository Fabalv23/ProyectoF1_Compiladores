
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package minisql;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\002\002\004\000\002\006\002\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\243\011\000\002\245\010\000\002\245\003\000\002" +
    "\244\003\000\002\244\003\000\002\244\003\000\002\247" +
    "\003\000\002\247\006\000\002\246\005\000\002\246\003" +
    "\000\002\234\010\000\002\235\004\000\002\235\004\000" +
    "\002\236\003\000\002\236\003\000\002\236\003\000\002" +
    "\237\005\000\002\237\003\000\002\240\003\000\002\240" +
    "\003\000\002\241\004\000\002\241\006\000\002\241\006" +
    "\000\002\241\004\000\002\241\006\000\002\241\006\000" +
    "\002\242\006\000\002\226\023\000\002\227\003\000\002" +
    "\227\003\000\002\231\003\000\002\231\007\000\002\231" +
    "\003\000\002\232\006\000\002\230\003\000\002\230\003" +
    "\000\002\223\005\000\002\223\005\000\002\224\006\000" +
    "\002\224\004\000\002\224\003\000\002\225\004\000\002" +
    "\225\003\000\002\204\007\000\002\204\006\000\002\205" +
    "\007\000\002\205\003\000\002\202\006\000\002\203\006" +
    "\000\002\203\003\000\002\207\015\000\002\210\004\000" +
    "\002\210\003\000\002\211\003\000\002\211\003\000\002" +
    "\212\003\000\002\212\003\000\002\213\007\000\002\214" +
    "\004\000\002\214\003\000\002\215\003\000\002\215\003" +
    "\000\002\215\003\000\002\215\003\000\002\216\004\000" +
    "\002\216\003\000\002\217\003\000\002\217\003\000\002" +
    "\217\005\000\002\220\004\000\002\220\003\000\002\221" +
    "\003\000\002\221\003\000\002\222\003\000\002\222\003" +
    "\000\002\163\004\000\002\164\004\000\002\164\004\000" +
    "\002\164\004\000\002\164\004\000\002\164\004\000\002" +
    "\165\004\000\002\166\003\000\002\166\003\000\002\167" +
    "\006\000\002\167\004\000\002\170\006\000\002\171\003" +
    "\000\002\171\003\000\002\172\003\000\002\172\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\172\003\000\002\173\004\000\002\174" +
    "\005\000\002\174\004\000\002\174\004\000\002\175\003" +
    "\000\002\176\005\000\002\176\005\000\002\176\005\000" +
    "\002\176\004\000\002\233\004\000\002\233\003\000\002" +
    "\177\005\000\002\200\004\000\002\201\005\000\002\201" +
    "\003\000\002\201\005\000\002\201\005\000\002\162\004" +
    "\000\002\162\003\000\002\125\004\000\002\126\004\000" +
    "\002\126\005\000\002\126\004\000\002\126\004\000\002" +
    "\126\004\000\002\127\004\000\002\130\010\000\002\130" +
    "\004\000\002\130\003\000\002\130\003\000\002\131\006" +
    "\000\002\131\006\000\002\131\006\000\002\131\006\000" +
    "\002\131\006\000\002\131\003\000\002\142\004\000\002" +
    "\142\003\000\002\132\007\000\002\132\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\133\003" +
    "\000\002\134\011\000\002\135\004\000\002\136\006\000" +
    "\002\136\010\000\002\136\003\000\002\137\006\000\002" +
    "\140\005\000\002\140\003\000\002\141\004\000\002\145" +
    "\006\000\002\146\007\000\002\147\004\000\002\147\004" +
    "\000\002\147\003\000\002\150\004\000\002\151\005\000" +
    "\002\151\003\000\002\152\004\000\002\152\003\000\002" +
    "\153\006\000\002\153\006\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\153\006\000\002\153\003" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\153\006\000\002\153\003\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\153\010\000\002\153\010" +
    "\000\002\154\004\000\002\154\003\000\002\155\010\000" +
    "\002\155\003\000\002\155\004\000\002\155\005\000\002" +
    "\155\014\000\002\155\004\000\002\155\006\000\002\155" +
    "\004\000\002\161\006\000\002\161\003\000\002\143\010" +
    "\000\002\143\003\000\002\156\003\000\002\156\003\000" +
    "\002\157\003\000\002\144\003\000\002\144\005\000\002" +
    "\071\013\000\002\072\003\000\002\072\004\000\002\073" +
    "\003\000\002\073\003\000\002\073\004\000\002\073\003" +
    "\000\002\074\005\000\002\075\003\000\002\075\003\000" +
    "\002\075\005\000\002\076\004\000\002\076\003\000\002" +
    "\077\003\000\002\077\003\000\002\100\006\000\002\100" +
    "\006\000\002\100\006\000\002\100\006\000\002\100\006" +
    "\000\002\100\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\004\000\002\102\003\000\002\102\003\000\002" +
    "\103\004\000\002\103\004\000\002\103\003\000\002\104" +
    "\003\000\002\104\003\000\002\105\003\000\002\067\005" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\107\005\000\002" +
    "\110\004\000\002\110\003\000\002\111\004\000\002\111" +
    "\004\000\002\111\003\000\002\111\003\000\002\112\013" +
    "\000\002\112\003\000\002\113\003\000\002\113\004\000" +
    "\002\113\004\000\002\113\004\000\002\113\003\000\002" +
    "\114\003\000\002\114\003\000\002\116\006\000\002\116" +
    "\003\000\002\117\004\000\002\117\003\000\002\120\006" +
    "\000\002\120\006\000\002\121\004\000\002\121\003\000" +
    "\002\122\007\000\002\122\007\000\002\122\003\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\124" +
    "\004\000\002\124\003\000\002\056\010\000\002\056\010" +
    "\000\002\057\003\000\002\057\003\000\002\060\005\000" +
    "\002\060\003\000\002\061\004\000\002\062\005\000\002" +
    "\062\003\000\002\063\006\000\002\064\004\000\002\065" +
    "\005\000\002\065\003\000\002\066\004\000\002\066\003" +
    "\000\002\042\004\000\002\043\004\000\002\043\003\000" +
    "\002\041\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\004\000\002\041\004\000\002\044\004\000\002\045" +
    "\004\000\002\045\003\000\002\046\006\000\002\047\003" +
    "\000\002\047\003\000\002\050\005\000\002\051\005\000" +
    "\002\051\003\000\002\052\004\000\002\053\003\000\002" +
    "\053\003\000\002\054\006\000\002\055\005\000\002\055" +
    "\003\000\002\040\005\000\002\002\012\000\002\025\004" +
    "\000\002\027\007\000\002\027\003\000\002\026\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\033" +
    "\005\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\036\003\000\002\037\003\000" +
    "\002\037\003\000\002\013\010\000\002\010\003\000\002" +
    "\010\003\000\002\014\005\000\002\014\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\016\007\000\002\016\003\000\002\021\004\000" +
    "\002\021\003\000\002\022\003\000\002\022\006\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\206\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\006\000\002\007\003\000\002\007\003\000\002\015" +
    "\004\000\002\011\003\000\002\011\004\000\002\012\004" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0314\000\040\003\041\004\042\037\033\045\043\046" +
    "\014\050\037\060\031\064\012\111\026\167\035\213\046" +
    "\214\023\216\045\217\004\230\013\001\002\000\004\035" +
    "\047\001\002\000\006\012\333\013\334\001\002\000\006" +
    "\012\333\013\334\001\002\000\006\012\333\013\334\001" +
    "\002\000\006\012\333\013\334\001\002\000\006\012\333" +
    "\013\334\001\002\000\044\006\u029b\007\000\020\000\031" +
    "\000\032\000\034\000\035\000\043\u0297\056\000\065\u0296" +
    "\066\000\067\000\070\000\071\000\072\000\074\u0299\205" +
    "\000\001\002\000\004\214\023\001\002\000\004\047\u0291" +
    "\001\002\000\014\012\000\013\000\035\047\115\000\205" +
    "\064\001\002\000\006\012\333\013\334\001\002\000\006" +
    "\012\333\013\334\001\002\000\006\012\333\013\334\001" +
    "\002\000\006\012\333\013\334\001\002\000\056\002\uffee" +
    "\003\uffee\004\uffee\012\uffee\013\uffee\037\uffee\045\uffee\046" +
    "\uffee\050\uffee\060\uffee\064\uffee\111\uffee\167\uffee\213\uffee" +
    "\214\uffee\215\uffee\216\uffee\217\uffee\222\uffee\226\uffee\227" +
    "\uffee\230\uffee\001\002\000\006\223\u026e\224\u026d\001\002" +
    "\000\006\012\333\013\334\001\002\000\004\002\u026b\001" +
    "\002\000\032\017\u01d6\047\u01d3\051\000\052\u01ce\112\u01cf" +
    "\123\u01d4\137\u01d0\140\u014d\141\u0151\203\000\204\000\220" +
    "\000\001\002\000\056\002\uffef\003\uffef\004\uffef\012\uffef" +
    "\013\uffef\037\uffef\045\uffef\046\uffef\050\uffef\060\uffef\064" +
    "\uffef\111\uffef\167\uffef\213\uffef\214\uffef\215\uffef\216\uffef" +
    "\217\uffef\222\uffef\226\uffef\227\uffef\230\uffef\001\002\000" +
    "\056\002\ufffd\003\ufffd\004\ufffd\012\ufffd\013\ufffd\037\ufffd" +
    "\045\ufffd\046\ufffd\050\ufffd\060\ufffd\064\ufffd\111\ufffd\167" +
    "\ufffd\213\ufffd\214\ufffd\215\ufffd\216\ufffd\217\ufffd\222\ufffd" +
    "\226\ufffd\227\ufffd\230\ufffd\001\002\000\006\035\000\062" +
    "\u01af\001\002\000\006\012\333\013\334\001\002\000\006" +
    "\124\u019f\205\064\001\002\000\006\012\333\013\334\001" +
    "\002\000\014\047\u0107\051\u0104\052\u0105\112\u0108\123\u0106" +
    "\001\002\000\006\012\333\013\334\001\002\000\014\047" +
    "\343\051\341\052\342\204\336\220\345\001\002\000\006" +
    "\012\333\013\334\001\002\000\056\002\uffec\003\uffec\004" +
    "\uffec\012\uffec\013\uffec\037\uffec\045\uffec\046\uffec\050\uffec" +
    "\060\uffec\064\uffec\111\uffec\167\uffec\213\uffec\214\uffec\215" +
    "\uffec\216\uffec\217\uffec\222\uffec\226\uffec\227\uffec\230\uffec" +
    "\001\002\000\006\005\000\006\215\001\002\000\006\006" +
    "\215\035\000\001\002\000\042\002\uffff\003\041\004\042" +
    "\037\033\045\043\046\014\050\037\060\031\064\012\111" +
    "\026\167\035\213\046\214\023\216\045\217\004\230\013" +
    "\001\002\000\006\035\047\205\064\001\002\000\004\035" +
    "\047\001\002\000\256\005\000\007\000\010\000\011\077" +
    "\012\000\013\000\015\000\020\000\021\000\022\000\023" +
    "\000\024\000\025\000\027\000\030\000\031\000\032\000" +
    "\033\000\034\000\035\000\036\000\037\000\040\000\041" +
    "\000\042\000\043\000\044\000\050\000\055\000\056\000" +
    "\061\000\062\000\063\000\073\000\075\000\076\000\077" +
    "\000\100\000\101\000\103\000\105\000\106\000\107\000" +
    "\110\000\113\000\114\000\115\000\125\000\127\000\131" +
    "\000\132\000\136\000\137\000\144\000\145\000\146\000" +
    "\147\000\150\000\151\000\152\000\153\000\154\000\155" +
    "\000\156\000\157\000\160\000\161\000\162\000\163\000" +
    "\164\000\165\000\166\000\167\000\172\000\173\000\174" +
    "\000\175\000\176\000\177\000\202\000\205\000\231\000" +
    "\232\000\233\000\234\000\236\000\001\002\000\022\012" +
    "\000\013\000\020\060\031\061\032\052\034\053\056\056" +
    "\205\064\001\002\000\064\005\ufea7\010\ufea7\012\ufea7\013" +
    "\ufea7\015\ufea7\016\ufea7\017\ufea7\040\ufea7\041\ufea7\042\ufea7" +
    "\043\ufea7\044\ufea7\056\ufea7\063\ufea7\073\ufea7\103\ufea7\105" +
    "\ufea7\106\ufea7\113\ufea7\125\ufea7\127\ufea7\131\ufea7\132\ufea7" +
    "\137\ufea7\236\ufea7\001\002\000\116\005\ufea9\007\ufea9\010" +
    "\ufea9\012\ufea9\013\ufea9\014\ufea9\015\ufea9\016\ufea9\017\ufea9" +
    "\020\ufea9\031\ufea9\032\ufea9\034\ufea9\035\ufea9\040\ufea9\041" +
    "\ufea9\042\ufea9\043\ufea9\044\ufea9\056\ufea9\063\ufea9\066\ufea9" +
    "\067\ufea9\070\ufea9\071\ufea9\072\ufea9\073\ufea9\103\ufea9\105" +
    "\ufea9\106\ufea9\113\ufea9\125\ufea9\127\ufea9\131\ufea9\132\ufea9" +
    "\137\ufea9\205\ufea9\236\ufea9\001\002\000\064\005\ufea8\010" +
    "\ufea8\012\ufea8\013\ufea8\015\ufea8\016\ufea8\017\ufea8\040\ufea8" +
    "\041\ufea8\042\ufea8\043\ufea8\044\ufea8\056\ufea8\063\ufea8\073" +
    "\ufea8\103\ufea8\105\ufea8\106\ufea8\113\ufea8\125\ufea8\127\ufea8" +
    "\131\ufea8\132\ufea8\137\ufea8\236\ufea8\001\002\000\064\005" +
    "\ufe93\010\ufe93\012\ufe93\013\ufe93\015\ufe93\016\ufe93\017\ufe93" +
    "\040\ufe93\041\ufe93\042\ufe93\043\ufe93\044\ufe93\056\ufe93\063" +
    "\ufe93\073\ufe93\103\ufe93\105\ufe93\106\ufe93\113\ufe93\125\ufe93" +
    "\127\ufe93\131\ufe93\132\ufe93\137\ufe93\236\ufe93\001\002\000" +
    "\064\005\ufea6\010\ufea6\012\ufea6\013\ufea6\015\ufea6\016\ufea6" +
    "\017\ufea6\040\ufea6\041\ufea6\042\ufea6\043\ufea6\044\ufea6\056" +
    "\ufea6\063\ufea6\073\ufea6\103\ufea6\105\ufea6\106\ufea6\113\ufea6" +
    "\125\ufea6\127\ufea6\131\ufea6\132\ufea6\137\ufea6\236\ufea6\001" +
    "\002\000\064\005\ufe92\010\ufe92\012\ufe92\013\ufe92\015\ufe92" +
    "\016\ufe92\017\ufe92\040\ufe92\041\ufe92\042\ufe92\043\ufe92\044" +
    "\ufe92\056\ufe92\063\ufe92\073\ufe92\103\ufe92\105\ufe92\106\ufe92" +
    "\113\ufe92\125\ufe92\127\ufe92\131\ufe92\132\ufe92\137\ufe92\236" +
    "\ufe92\001\002\000\014\010\ufe91\012\ufe91\013\ufe91\036\073" +
    "\040\ufe91\001\002\000\064\005\ufe94\010\ufe94\012\ufe94\013" +
    "\ufe94\015\ufe94\016\ufe94\017\ufe94\040\ufe94\041\ufe94\042\ufe94" +
    "\043\ufe94\044\ufe94\056\ufe94\063\ufe94\073\ufe94\103\ufe94\105" +
    "\ufe94\106\ufe94\113\ufe94\125\ufe94\127\ufe94\131\ufe94\132\ufe94" +
    "\137\ufe94\236\ufe94\001\002\000\116\005\ufeaa\007\ufeaa\010" +
    "\ufeaa\012\ufeaa\013\ufeaa\014\ufeaa\015\ufeaa\016\ufeaa\017\ufeaa" +
    "\020\ufeaa\031\ufeaa\032\ufeaa\034\ufeaa\035\ufeaa\040\ufeaa\041" +
    "\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\056\ufeaa\063\ufeaa\066\ufeaa" +
    "\067\ufeaa\070\ufeaa\071\ufeaa\072\ufeaa\073\ufeaa\103\ufeaa\105" +
    "\ufeaa\106\ufeaa\113\ufeaa\125\ufeaa\127\ufeaa\131\ufeaa\132\ufeaa" +
    "\137\ufeaa\205\ufeaa\236\ufeaa\001\002\000\010\010\uffc3\012" +
    "\uffc3\013\uffc3\001\002\000\006\012\uffc7\013\uffc7\001\002" +
    "\000\004\035\072\001\002\000\012\010\000\012\000\013" +
    "\000\040\066\001\002\000\024\010\000\012\000\013\000" +
    "\020\060\031\061\032\052\034\053\056\056\205\064\001" +
    "\002\000\010\010\uffc4\012\uffc4\013\uffc4\001\002\000\010" +
    "\010\uffc1\012\uffc1\013\uffc1\001\002\000\010\010\uffc2\012" +
    "\uffc2\013\uffc2\001\002\000\140\005\ufe90\010\ufe90\012\ufe90" +
    "\013\ufe90\015\ufe90\016\ufe90\017\ufe90\033\ufe90\036\ufe90\040" +
    "\ufe90\041\ufe90\042\ufe90\043\ufe90\044\ufe90\047\ufe90\056\ufe90" +
    "\063\ufe90\073\ufe90\103\ufe90\105\ufe90\106\ufe90\113\ufe90\115" +
    "\ufe90\125\ufe90\127\ufe90\131\ufe90\132\ufe90\137\ufe90\145\ufe90" +
    "\146\ufe90\147\ufe90\150\ufe90\151\ufe90\152\ufe90\153\ufe90\154" +
    "\ufe90\155\ufe90\156\ufe90\157\ufe90\160\ufe90\161\ufe90\162\ufe90" +
    "\163\ufe90\164\ufe90\165\ufe90\166\ufe90\236\ufe90\001\002\000" +
    "\016\020\060\031\061\032\052\034\053\056\056\205\064" +
    "\001\002\000\064\005\ufe91\010\ufe91\012\ufe91\013\ufe91\015" +
    "\ufe91\016\ufe91\017\ufe91\040\ufe91\041\ufe91\042\ufe91\043\ufe91" +
    "\044\ufe91\056\ufe91\063\ufe91\073\ufe91\103\ufe91\105\ufe91\106" +
    "\ufe91\113\ufe91\125\ufe91\127\ufe91\131\ufe91\132\ufe91\137\ufe91" +
    "\236\ufe91\001\002\000\012\010\000\012\000\013\000\040" +
    "\066\001\002\000\010\010\uffc5\012\uffc5\013\uffc5\001\002" +
    "\000\004\035\047\001\002\000\254\005\ufe86\007\ufe86\010" +
    "\ufe86\012\ufe86\013\ufe86\015\ufe86\020\ufe86\021\ufe86\022\ufe86" +
    "\023\ufe86\024\ufe86\025\ufe86\027\ufe86\030\ufe86\031\ufe86\032" +
    "\ufe86\033\ufe86\034\ufe86\035\ufe86\036\ufe86\037\ufe86\040\ufe86" +
    "\041\ufe86\042\ufe86\043\ufe86\044\ufe86\050\ufe86\055\ufe86\056" +
    "\ufe86\061\ufe86\062\ufe86\063\ufe86\073\ufe86\075\ufe86\076\ufe86" +
    "\077\ufe86\100\ufe86\101\ufe86\103\ufe86\105\ufe86\106\ufe86\107" +
    "\ufe86\110\ufe86\113\ufe86\114\ufe86\115\ufe86\125\ufe86\127\ufe86" +
    "\131\ufe86\132\ufe86\136\ufe86\137\ufe86\144\ufe86\145\ufe86\146" +
    "\ufe86\147\ufe86\150\ufe86\151\ufe86\152\ufe86\153\ufe86\154\ufe86" +
    "\155\ufe86\156\ufe86\157\ufe86\160\ufe86\161\ufe86\162\ufe86\163" +
    "\ufe86\164\ufe86\165\ufe86\166\ufe86\167\ufe86\172\ufe86\173\ufe86" +
    "\174\ufe86\175\ufe86\176\ufe86\177\ufe86\202\ufe86\205\ufe86\231" +
    "\ufe86\232\ufe86\233\ufe86\234\ufe86\236\ufe86\001\002\000\254" +
    "\005\ufe85\007\ufe85\010\ufe85\012\ufe85\013\ufe85\015\ufe85\020" +
    "\ufe85\021\ufe85\022\ufe85\023\ufe85\024\ufe85\025\ufe85\027\ufe85" +
    "\030\ufe85\031\ufe85\032\ufe85\033\ufe85\034\ufe85\035\ufe85\036" +
    "\ufe85\037\ufe85\040\ufe85\041\ufe85\042\ufe85\043\ufe85\044\ufe85" +
    "\050\ufe85\055\ufe85\056\ufe85\061\ufe85\062\ufe85\063\ufe85\073" +
    "\ufe85\075\ufe85\076\ufe85\077\ufe85\100\ufe85\101\ufe85\103\ufe85" +
    "\105\ufe85\106\ufe85\107\ufe85\110\ufe85\113\ufe85\114\ufe85\115" +
    "\ufe85\125\ufe85\127\ufe85\131\ufe85\132\ufe85\136\ufe85\137\ufe85" +
    "\144\ufe85\145\ufe85\146\ufe85\147\ufe85\150\ufe85\151\ufe85\152" +
    "\ufe85\153\ufe85\154\ufe85\155\ufe85\156\ufe85\157\ufe85\160\ufe85" +
    "\161\ufe85\162\ufe85\163\ufe85\164\ufe85\165\ufe85\166\ufe85\167" +
    "\ufe85\172\ufe85\173\ufe85\174\ufe85\175\ufe85\176\ufe85\177\ufe85" +
    "\202\ufe85\205\ufe85\231\ufe85\232\ufe85\233\ufe85\234\ufe85\236" +
    "\ufe85\001\002\000\254\005\ufe84\007\ufe84\010\ufe84\012\ufe84" +
    "\013\ufe84\015\ufe84\020\ufe84\021\ufe84\022\ufe84\023\ufe84\024" +
    "\ufe84\025\ufe84\027\ufe84\030\ufe84\031\ufe84\032\ufe84\033\ufe84" +
    "\034\ufe84\035\ufe84\036\ufe84\037\ufe84\040\ufe84\041\ufe84\042" +
    "\ufe84\043\ufe84\044\ufe84\050\ufe84\055\ufe84\056\ufe84\061\ufe84" +
    "\062\ufe84\063\ufe84\073\ufe84\075\ufe84\076\ufe84\077\ufe84\100" +
    "\ufe84\101\ufe84\103\ufe84\105\ufe84\106\ufe84\107\ufe84\110\ufe84" +
    "\113\ufe84\114\ufe84\115\ufe84\125\ufe84\127\ufe84\131\ufe84\132" +
    "\ufe84\136\ufe84\137\ufe84\144\ufe84\145\ufe84\146\ufe84\147\ufe84" +
    "\150\ufe84\151\ufe84\152\ufe84\153\ufe84\154\ufe84\155\ufe84\156" +
    "\ufe84\157\ufe84\160\ufe84\161\ufe84\162\ufe84\163\ufe84\164\ufe84" +
    "\165\ufe84\166\ufe84\167\ufe84\172\ufe84\173\ufe84\174\ufe84\175" +
    "\ufe84\176\ufe84\177\ufe84\202\ufe84\205\ufe84\231\ufe84\232\ufe84" +
    "\233\ufe84\234\ufe84\236\ufe84\001\002\000\010\231\000\232" +
    "\166\233\170\001\002\000\050\033\110\145\112\146\117" +
    "\147\125\150\111\151\121\152\114\153\107\154\115\155" +
    "\124\156\123\157\106\160\127\161\120\162\105\163\130" +
    "\164\122\165\113\166\126\001\002\000\050\010\uff3e\012" +
    "\uff3e\013\uff3e\040\uff3e\056\uff3e\063\uff3e\073\uff3e\113\uff3e" +
    "\115\uff3e\125\uff3e\127\uff3e\131\uff3e\132\uff3e\137\uff3e\144" +
    "\uff3e\206\uff3e\207\uff3e\210\uff3e\214\uff3e\001\002\000\050" +
    "\010\uff41\012\uff41\013\uff41\040\uff41\056\uff41\063\uff41\073" +
    "\uff41\113\uff41\115\uff41\125\uff41\127\uff41\131\uff41\132\uff41" +
    "\137\uff41\144\uff41\206\uff41\207\uff41\210\uff41\214\uff41\001" +
    "\002\000\050\010\uff45\012\uff45\013\uff45\040\uff45\056\uff45" +
    "\063\uff45\073\uff45\113\uff45\115\uff45\125\uff45\127\uff45\131" +
    "\uff45\132\uff45\137\uff45\144\uff45\206\uff45\207\uff45\210\uff45" +
    "\214\uff45\001\002\000\050\010\uff3b\012\uff3b\013\uff3b\040" +
    "\uff3b\056\uff3b\063\uff3b\073\uff3b\113\uff3b\115\uff3b\125\uff3b" +
    "\127\uff3b\131\uff3b\132\uff3b\137\uff3b\144\uff3b\206\uff3b\207" +
    "\uff3b\210\uff3b\214\uff3b\001\002\000\050\010\uff49\012\uff49" +
    "\013\uff49\040\uff49\056\uff49\063\uff49\073\uff49\113\uff49\115" +
    "\uff49\125\uff49\127\uff49\131\uff49\132\uff49\137\uff49\144\uff49" +
    "\206\uff49\207\uff49\210\uff49\214\uff49\001\002\000\004\007" +
    "\162\001\002\000\004\007\155\001\002\000\050\010\uff46" +
    "\012\uff46\013\uff46\040\uff46\056\uff46\063\uff46\073\uff46\113" +
    "\uff46\115\uff46\125\uff46\127\uff46\131\uff46\132\uff46\137\uff46" +
    "\144\uff46\206\uff46\207\uff46\210\uff46\214\uff46\001\002\000" +
    "\050\010\uff44\012\uff44\013\uff44\040\uff44\056\uff44\063\uff44" +
    "\073\uff44\113\uff44\115\uff44\125\uff44\127\uff44\131\uff44\132" +
    "\uff44\137\uff44\144\uff44\206\uff44\207\uff44\210\uff44\214\uff44" +
    "\001\002\000\010\012\000\013\000\040\147\001\002\000" +
    "\004\007\144\001\002\000\004\007\141\001\002\000\052" +
    "\007\136\010\uff48\012\uff48\013\uff48\040\uff48\056\uff48\063" +
    "\uff48\073\uff48\113\uff48\115\uff48\125\uff48\127\uff48\131\uff48" +
    "\132\uff48\137\uff48\144\uff48\206\uff48\207\uff48\210\uff48\214" +
    "\uff48\001\002\000\050\010\uff3c\012\uff3c\013\uff3c\040\uff3c" +
    "\056\uff3c\063\uff3c\073\uff3c\113\uff3c\115\uff3c\125\uff3c\127" +
    "\uff3c\131\uff3c\132\uff3c\137\uff3c\144\uff3c\206\uff3c\207\uff3c" +
    "\210\uff3c\214\uff3c\001\002\000\050\010\uff42\012\uff42\013" +
    "\uff42\040\uff42\056\uff42\063\uff42\073\uff42\113\uff42\115\uff42" +
    "\125\uff42\127\uff42\131\uff42\132\uff42\137\uff42\144\uff42\206" +
    "\uff42\207\uff42\210\uff42\214\uff42\001\002\000\050\010\uff43" +
    "\012\uff43\013\uff43\040\uff43\056\uff43\063\uff43\073\uff43\113" +
    "\uff43\115\uff43\125\uff43\127\uff43\131\uff43\132\uff43\137\uff43" +
    "\144\uff43\206\uff43\207\uff43\210\uff43\214\uff43\001\002\000" +
    "\050\010\uff4a\012\uff4a\013\uff4a\040\uff4a\056\uff4a\063\uff4a" +
    "\073\uff4a\113\uff4a\115\uff4a\125\uff4a\127\uff4a\131\uff4a\132" +
    "\uff4a\137\uff4a\144\uff4a\206\uff4a\207\uff4a\210\uff4a\214\uff4a" +
    "\001\002\000\004\007\131\001\002\000\050\010\uff40\012" +
    "\uff40\013\uff40\040\uff40\056\uff40\063\uff40\073\uff40\113\uff40" +
    "\115\uff40\125\uff40\127\uff40\131\uff40\132\uff40\137\uff40\144" +
    "\uff40\206\uff40\207\uff40\210\uff40\214\uff40\001\002\000\050" +
    "\010\uff3d\012\uff3d\013\uff3d\040\uff3d\056\uff3d\063\uff3d\073" +
    "\uff3d\113\uff3d\115\uff3d\125\uff3d\127\uff3d\131\uff3d\132\uff3d" +
    "\137\uff3d\144\uff3d\206\uff3d\207\uff3d\210\uff3d\214\uff3d\001" +
    "\002\000\010\031\061\032\052\034\053\001\002\000\004" +
    "\040\133\001\002\000\010\031\061\032\052\034\053\001" +
    "\002\000\004\010\135\001\002\000\050\010\uff39\012\uff39" +
    "\013\uff39\040\uff39\056\uff39\063\uff39\073\uff39\113\uff39\115" +
    "\uff39\125\uff39\127\uff39\131\uff39\132\uff39\137\uff39\144\uff39" +
    "\206\uff39\207\uff39\210\uff39\214\uff39\001\002\000\004\072" +
    "\137\001\002\000\004\010\140\001\002\000\050\010\uff47" +
    "\012\uff47\013\uff47\040\uff47\056\uff47\063\uff47\073\uff47\113" +
    "\uff47\115\uff47\125\uff47\127\uff47\131\uff47\132\uff47\137\uff47" +
    "\144\uff47\206\uff47\207\uff47\210\uff47\214\uff47\001\002\000" +
    "\010\031\061\032\052\034\053\001\002\000\004\010\143" +
    "\001\002\000\050\010\uff3f\012\uff3f\013\uff3f\040\uff3f\056" +
    "\uff3f\063\uff3f\073\uff3f\113\uff3f\115\uff3f\125\uff3f\127\uff3f" +
    "\131\uff3f\132\uff3f\137\uff3f\144\uff3f\206\uff3f\207\uff3f\210" +
    "\uff3f\214\uff3f\001\002\000\010\031\061\032\052\034\053" +
    "\001\002\000\004\010\146\001\002\000\050\010\uff4b\012" +
    "\uff4b\013\uff4b\040\uff4b\056\uff4b\063\uff4b\073\uff4b\113\uff4b" +
    "\115\uff4b\125\uff4b\127\uff4b\131\uff4b\132\uff4b\137\uff4b\144" +
    "\uff4b\206\uff4b\207\uff4b\210\uff4b\214\uff4b\001\002\000\004" +
    "\205\064\001\002\000\006\012\uffbc\013\uffbc\001\002\000" +
    "\006\012\uffba\013\uffba\001\002\000\050\033\110\145\112" +
    "\146\117\147\125\150\111\151\121\152\114\153\107\154" +
    "\115\155\124\156\123\157\106\160\127\161\120\162\105" +
    "\163\130\164\122\165\113\166\126\001\002\000\010\012" +
    "\000\013\000\040\147\001\002\000\006\012\uffbb\013\uffbb" +
    "\001\002\000\010\031\061\032\052\034\053\001\002\000" +
    "\004\040\157\001\002\000\010\031\061\032\052\034\053" +
    "\001\002\000\004\010\161\001\002\000\050\010\uff3a\012" +
    "\uff3a\013\uff3a\040\uff3a\056\uff3a\063\uff3a\073\uff3a\113\uff3a" +
    "\115\uff3a\125\uff3a\127\uff3a\131\uff3a\132\uff3a\137\uff3a\144" +
    "\uff3a\206\uff3a\207\uff3a\210\uff3a\214\uff3a\001\002\000\010" +
    "\031\061\032\052\034\053\001\002\000\004\010\164\001" +
    "\002\000\050\010\uff4c\012\uff4c\013\uff4c\040\uff4c\056\uff4c" +
    "\063\uff4c\073\uff4c\113\uff4c\115\uff4c\125\uff4c\127\uff4c\131" +
    "\uff4c\132\uff4c\137\uff4c\144\uff4c\206\uff4c\207\uff4c\210\uff4c" +
    "\214\uff4c\001\002\000\004\231\171\001\002\000\004\231" +
    "\uffe8\001\002\000\004\231\uffe6\001\002\000\004\231\uffe7" +
    "\001\002\000\004\144\172\001\002\000\004\064\012\001" +
    "\002\000\010\012\000\013\000\236\176\001\002\000\006" +
    "\012\uffeb\013\uffeb\001\002\000\006\012\uffe9\013\uffe9\001" +
    "\002\000\004\035\047\001\002\000\004\234\200\001\002" +
    "\000\004\235\201\001\002\000\004\005\202\001\002\000" +
    "\004\035\047\001\002\000\010\012\uffe5\013\uffe5\062\205" +
    "\001\002\000\006\012\uffea\013\uffea\001\002\000\004\205" +
    "\064\001\002\000\010\012\000\013\000\040\207\001\002" +
    "\000\004\205\064\001\002\000\006\012\uffe2\013\uffe2\001" +
    "\002\000\006\012\uffe4\013\uffe4\001\002\000\010\012\000" +
    "\013\000\040\207\001\002\000\006\012\uffe3\013\uffe3\001" +
    "\002\000\056\002\ufffe\003\ufffe\004\ufffe\012\ufffe\013\ufffe" +
    "\037\ufffe\045\ufffe\046\ufffe\050\ufffe\060\ufffe\064\ufffe\111" +
    "\ufffe\167\ufffe\213\ufffe\214\ufffe\215\ufffe\216\ufffe\217\ufffe" +
    "\222\ufffe\226\ufffe\227\ufffe\230\ufffe\001\002\000\010\007" +
    "\313\031\061\032\052\001\002\000\004\035\047\001\002" +
    "\000\006\005\ufea1\035\ufea1\001\002\000\004\037\221\001" +
    "\002\000\004\035\047\001\002\000\004\036\223\001\002" +
    "\000\022\007\225\020\060\031\061\032\052\034\053\035" +
    "\047\056\056\205\064\001\002\000\010\012\000\013\000" +
    "\015\243\001\002\000\022\007\225\020\060\031\061\032" +
    "\052\034\053\035\047\056\056\205\064\001\002\000\030" +
    "\005\ufeab\010\ufeab\012\ufeab\013\ufeab\015\ufeab\040\ufeab\041" +
    "\ufeab\042\ufeab\043\ufeab\044\ufeab\073\ufeab\001\002\000\030" +
    "\005\ufeb1\010\ufeb1\012\ufeb1\013\ufeb1\015\ufeb1\040\ufeb1\041" +
    "\ufeb1\042\ufeb1\043\302\044\303\073\ufeb1\001\002\000\030" +
    "\005\ufeae\010\ufeae\012\ufeae\013\ufeae\015\ufeae\040\ufeae\041" +
    "\ufeae\042\ufeae\043\ufeae\044\ufeae\073\ufeae\001\002\000\016" +
    "\012\ufeb4\013\ufeb4\015\ufeb4\040\ufeb4\041\300\042\277\001" +
    "\002\000\030\005\ufeac\010\ufeac\012\ufeac\013\ufeac\015\ufeac" +
    "\040\ufeac\041\ufeac\042\ufeac\043\ufeac\044\ufeac\073\ufeac\001" +
    "\002\000\012\012\000\013\000\015\000\040\234\001\002" +
    "\000\004\035\047\001\002\000\010\012\ufeb5\013\ufeb5\015" +
    "\ufeb5\001\002\000\010\012\ufeb7\013\ufeb7\015\ufeb7\001\002" +
    "\000\004\036\240\001\002\000\022\007\225\020\060\031" +
    "\061\032\052\034\053\035\047\056\056\205\064\001\002" +
    "\000\010\012\000\013\000\015\243\001\002\000\010\012" +
    "\ufeb6\013\ufeb6\015\ufeb6\001\002\000\004\035\047\001\002" +
    "\000\020\012\ufe9b\013\ufe9b\015\ufe9b\103\ufe9b\105\ufe9b\106" +
    "\ufe9b\236\ufe9b\001\002\000\024\021\246\022\251\023\247" +
    "\024\255\025\254\027\256\030\252\036\253\136\257\001" +
    "\002\000\016\020\ufe8f\031\ufe8f\032\ufe8f\034\ufe8f\056\ufe8f" +
    "\205\ufe8f\001\002\000\016\020\ufe8d\031\ufe8d\032\ufe8d\034" +
    "\ufe8d\056\ufe8d\205\ufe8d\001\002\000\016\020\060\031\061" +
    "\032\052\034\053\056\056\205\064\001\002\000\016\020" +
    "\ufe8e\031\ufe8e\032\ufe8e\034\ufe8e\056\ufe8e\205\ufe8e\001\002" +
    "\000\006\031\061\032\052\001\002\000\016\020\ufe88\031" +
    "\ufe88\032\ufe88\034\ufe88\056\ufe88\205\ufe88\001\002\000\016" +
    "\020\ufe8b\031\ufe8b\032\ufe8b\034\ufe8b\056\ufe8b\205\ufe8b\001" +
    "\002\000\016\020\ufe8c\031\ufe8c\032\ufe8c\034\ufe8c\056\ufe8c" +
    "\205\ufe8c\001\002\000\016\020\ufe8a\031\ufe8a\032\ufe8a\034" +
    "\ufe8a\056\ufe8a\205\ufe8a\001\002\000\016\020\ufe87\031\ufe87" +
    "\032\ufe87\034\ufe87\056\ufe87\205\ufe87\001\002\000\004\016" +
    "\261\001\002\000\004\031\262\001\002\000\016\020\ufe89" +
    "\031\ufe89\032\ufe89\034\ufe89\056\ufe89\205\ufe89\001\002\000" +
    "\024\012\000\013\000\015\000\016\265\017\270\103\000" +
    "\105\000\106\000\236\000\001\002\000\020\012\ufe9c\013" +
    "\ufe9c\015\ufe9c\103\ufe9c\105\ufe9c\106\ufe9c\236\ufe9c\001\002" +
    "\000\036\010\ufe96\012\ufe96\013\ufe96\015\ufe96\035\ufe96\066" +
    "\ufe96\067\ufe96\070\ufe96\071\ufe96\072\ufe96\103\ufe96\105\ufe96" +
    "\106\ufe96\236\ufe96\001\002\000\024\010\000\012\000\013" +
    "\000\015\000\035\047\103\000\105\000\106\000\236\000" +
    "\001\002\000\022\010\ufe99\012\ufe99\013\ufe99\015\ufe99\103" +
    "\ufe99\105\ufe99\106\ufe99\236\ufe99\001\002\000\036\010\ufe95" +
    "\012\ufe95\013\ufe95\015\ufe95\035\ufe95\066\ufe95\067\ufe95\070" +
    "\ufe95\071\ufe95\072\ufe95\103\ufe95\105\ufe95\106\ufe95\236\ufe95" +
    "\001\002\000\024\021\246\022\251\023\247\024\255\025" +
    "\254\027\256\030\252\036\253\136\257\001\002\000\022" +
    "\010\ufe98\012\ufe98\013\ufe98\015\ufe98\103\ufe98\105\ufe98\106" +
    "\ufe98\236\ufe98\001\002\000\022\010\ufe9a\012\ufe9a\013\ufe9a" +
    "\015\ufe9a\103\ufe9a\105\ufe9a\106\ufe9a\236\ufe9a\001\002\000" +
    "\016\020\060\031\061\032\052\034\053\056\056\205\064" +
    "\001\002\000\026\010\000\012\000\013\000\015\000\016" +
    "\265\017\270\103\000\105\000\106\000\236\000\001\002" +
    "\000\022\010\ufe97\012\ufe97\013\ufe97\015\ufe97\103\ufe97\105" +
    "\ufe97\106\ufe97\236\ufe97\001\002\000\022\007\225\020\060" +
    "\031\061\032\052\034\053\035\047\056\056\205\064\001" +
    "\002\000\022\007\225\020\060\031\061\032\052\034\053" +
    "\035\047\056\056\205\064\001\002\000\030\005\ufeb3\010" +
    "\ufeb3\012\ufeb3\013\ufeb3\015\ufeb3\040\ufeb3\041\ufeb3\042\ufeb3" +
    "\043\302\044\303\073\ufeb3\001\002\000\022\007\225\020" +
    "\060\031\061\032\052\034\053\035\047\056\056\205\064" +
    "\001\002\000\022\007\225\020\060\031\061\032\052\034" +
    "\053\035\047\056\056\205\064\001\002\000\030\005\ufeaf" +
    "\010\ufeaf\012\ufeaf\013\ufeaf\015\ufeaf\040\ufeaf\041\ufeaf\042" +
    "\ufeaf\043\ufeaf\044\ufeaf\073\ufeaf\001\002\000\030\005\ufeb0" +
    "\010\ufeb0\012\ufeb0\013\ufeb0\015\ufeb0\040\ufeb0\041\ufeb0\042" +
    "\ufeb0\043\ufeb0\044\ufeb0\073\ufeb0\001\002\000\030\005\ufeb2" +
    "\010\ufeb2\012\ufeb2\013\ufeb2\015\ufeb2\040\ufeb2\041\ufeb2\042" +
    "\ufeb2\043\302\044\303\073\ufeb2\001\002\000\010\010\310" +
    "\041\300\042\277\001\002\000\030\005\ufead\010\ufead\012" +
    "\ufead\013\ufead\015\ufead\040\ufead\041\ufead\042\ufead\043\ufead" +
    "\044\ufead\073\ufead\001\002\000\006\012\ufeb8\013\ufeb8\001" +
    "\002\000\040\005\ufe9f\007\ufe9f\014\ufe9f\020\ufe9f\031\ufe9f" +
    "\032\ufe9f\034\ufe9f\035\ufe9f\056\ufe9f\066\ufe9f\067\ufe9f\070" +
    "\ufe9f\071\ufe9f\072\ufe9f\205\ufe9f\001\002\000\006\031\061" +
    "\032\052\001\002\000\010\005\000\014\316\035\000\001" +
    "\002\000\006\005\ufea2\035\ufea2\001\002\000\006\005\ufe9e" +
    "\035\ufe9e\001\002\000\006\005\ufe9d\035\ufe9d\001\002\000" +
    "\004\010\321\001\002\000\040\005\ufea0\007\ufea0\014\ufea0" +
    "\020\ufea0\031\ufea0\032\ufea0\034\ufea0\035\ufea0\056\ufea0\066" +
    "\ufea0\067\ufea0\070\ufea0\071\ufea0\072\ufea0\205\ufea0\001\002" +
    "\000\004\005\323\001\002\000\004\035\047\001\002\000" +
    "\012\012\000\013\000\015\000\040\325\001\002\000\004" +
    "\035\047\001\002\000\010\012\000\013\000\015\243\001" +
    "\002\000\024\010\ufeba\012\ufeba\013\ufeba\015\ufeba\105\ufeba" +
    "\106\ufeba\107\ufeba\110\ufeba\236\ufeba\001\002\000\006\012" +
    "\ufea5\013\ufea5\001\002\000\026\010\000\012\000\013\000" +
    "\015\000\040\325\105\000\106\000\107\000\110\000\236" +
    "\000\001\002\000\024\010\ufebb\012\ufebb\013\ufebb\015\ufebb" +
    "\105\ufebb\106\ufebb\107\ufebb\110\ufebb\236\ufebb\001\002\000" +
    "\056\002\ufea4\003\ufea4\004\ufea4\012\ufea4\013\ufea4\037\ufea4" +
    "\045\ufea4\046\ufea4\050\ufea4\060\ufea4\064\ufea4\111\ufea4\167" +
    "\ufea4\213\ufea4\214\ufea4\215\ufea4\216\ufea4\217\ufea4\222\ufea4" +
    "\226\ufea4\227\ufea4\230\ufea4\001\002\000\056\002\ufea3\003" +
    "\ufea3\004\ufea3\012\ufea3\013\ufea3\037\ufea3\045\ufea3\046\ufea3" +
    "\050\ufea3\060\ufea3\064\ufea3\111\ufea3\167\ufea3\213\ufea3\214" +
    "\ufea3\215\ufea3\216\ufea3\217\ufea3\222\ufea3\226\ufea3\227\ufea3" +
    "\230\ufea3\001\002\000\056\002\ufff1\003\ufff1\004\ufff1\012" +
    "\ufff1\013\ufff1\037\ufff1\045\ufff1\046\ufff1\050\ufff1\060\ufff1" +
    "\064\ufff1\111\ufff1\167\ufff1\213\ufff1\214\ufff1\215\ufff1\216" +
    "\ufff1\217\ufff1\222\ufff1\226\ufff1\227\ufff1\230\ufff1\001\002" +
    "\000\004\035\047\001\002\000\006\012\ufed0\013\ufed0\001" +
    "\002\000\006\012\ufecc\013\ufecc\001\002\000\006\035\000" +
    "\053\351\001\002\000\006\035\000\053\351\001\002\000" +
    "\006\035\000\053\351\001\002\000\006\012\ufecb\013\ufecb" +
    "\001\002\000\004\035\047\001\002\000\006\012\ufec9\013" +
    "\ufec9\001\002\000\004\035\ufece\001\002\000\004\035\047" +
    "\001\002\000\004\054\352\001\002\000\004\035\ufecf\001" +
    "\002\000\010\012\000\013\000\040\355\001\002\000\006" +
    "\012\ufecd\013\ufecd\001\002\000\004\035\047\001\002\000" +
    "\006\012\ufec8\013\ufec8\001\002\000\006\012\ufec6\013\ufec6" +
    "\001\002\000\006\012\ufec7\013\ufec7\001\002\000\004\035" +
    "\047\001\002\000\010\012\000\013\000\040\325\001\002" +
    "\000\006\012\ufebc\013\ufebc\001\002\000\004\035\047\001" +
    "\002\000\006\035\047\055\367\001\002\000\006\012\ufec3" +
    "\013\ufec3\001\002\000\004\035\047\001\002\000\010\012" +
    "\000\013\000\040\325\001\002\000\006\012\ufec4\013\ufec4" +
    "\001\002\000\006\012\ufec5\013\ufec5\001\002\000\006\012" +
    "\ufebf\013\ufebf\001\002\000\010\012\000\013\000\040\375" +
    "\001\002\000\004\035\047\001\002\000\006\012\ufec2\013" +
    "\ufec2\001\002\000\006\012\ufec0\013\ufec0\001\002\000\004" +
    "\055\367\001\002\000\006\012\ufec1\013\ufec1\001\002\000" +
    "\006\012\ufeca\013\ufeca\001\002\000\056\002\ufffc\003\ufffc" +
    "\004\ufffc\012\ufffc\013\ufffc\037\ufffc\045\ufffc\046\ufffc\050" +
    "\ufffc\060\ufffc\064\ufffc\111\ufffc\167\ufffc\213\ufffc\214\ufffc" +
    "\215\ufffc\216\ufffc\217\ufffc\222\ufffc\226\ufffc\227\ufffc\230" +
    "\ufffc\001\002\000\006\035\u0191\074\u0190\001\002\000\006" +
    "\035\u0186\170\u0185\001\002\000\004\035\047\001\002\000" +
    "\004\035\047\001\002\000\004\035\u010b\001\002\000\006" +
    "\012\uffa0\013\uffa0\001\002\000\006\012\uff9c\013\uff9c\001" +
    "\002\000\004\115\u010c\001\002\000\012\056\u010f\116\u0110" +
    "\143\u010e\200\u0112\001\002\000\006\012\uff80\013\uff80\001" +
    "\002\000\004\036\u011b\001\002\000\010\012\uff7d\013\uff7d" +
    "\040\uff7d\001\002\000\004\036\u0119\001\002\000\010\012" +
    "\000\013\000\040\u0115\001\002\000\004\036\u0113\001\002" +
    "\000\004\020\u0114\001\002\000\010\012\uff7b\013\uff7b\040" +
    "\uff7b\001\002\000\012\056\u010f\116\u0110\143\u010e\200\u0112" +
    "\001\002\000\006\012\uff79\013\uff79\001\002\000\006\012" +
    "\uff7f\013\uff7f\001\002\000\006\012\uff7a\013\uff7a\001\002" +
    "\000\004\035\u011a\001\002\000\010\012\uff7e\013\uff7e\040" +
    "\uff7e\001\002\000\004\035\u011c\001\002\000\010\012\uff7c" +
    "\013\uff7c\040\uff7c\001\002\000\006\012\uff9d\013\uff9d\001" +
    "\002\000\010\050\u0122\167\u011f\202\u0121\001\002\000\004" +
    "\201\u0178\001\002\000\006\012\uff8b\013\uff8b\001\002\000" +
    "\026\035\047\056\u0138\063\u0139\113\u013f\125\u0132\127\u0140" +
    "\131\u013c\132\u013d\133\u013b\137\u0137\001\002\000\012\035" +
    "\047\051\u0125\133\u0124\201\u0123\001\002\000\004\035\047" +
    "\001\002\000\004\035\047\001\002\000\004\035\047\001" +
    "\002\000\010\012\000\013\000\040\u0128\001\002\000\006" +
    "\012\uff88\013\uff88\001\002\000\012\035\047\051\u0125\133" +
    "\u0124\201\u0123\001\002\000\006\012\uff83\013\uff83\001\002" +
    "\000\006\012\uff81\013\uff81\001\002\000\006\012\uff82\013" +
    "\uff82\001\002\000\010\012\000\013\000\040\u0128\001\002" +
    "\000\006\012\uff84\013\uff84\001\002\000\010\012\000\013" +
    "\000\040\u0128\001\002\000\006\012\uff86\013\uff86\001\002" +
    "\000\010\012\000\013\000\040\u0128\001\002\000\006\012" +
    "\uff85\013\uff85\001\002\000\004\007\u0173\001\002\000\006" +
    "\012\uff89\013\uff89\001\002\000\012\010\000\012\000\013" +
    "\000\040\u016f\001\002\000\012\010\uff27\012\uff27\013\uff27" +
    "\040\uff27\001\002\000\012\010\uff4f\012\uff4f\013\uff4f\040" +
    "\uff4f\001\002\000\034\007\u015c\010\000\012\000\013\000" +
    "\040\000\056\000\063\000\113\000\125\000\127\000\131" +
    "\000\132\000\137\000\001\002\000\032\010\uff35\012\uff35" +
    "\013\uff35\040\uff35\056\uff35\063\uff35\113\uff35\125\uff35\127" +
    "\uff35\131\uff35\132\uff35\137\uff35\001\002\000\016\020\060" +
    "\031\061\032\052\034\053\056\056\205\064\001\002\000" +
    "\050\033\110\145\112\146\117\147\125\150\111\151\121" +
    "\152\114\153\107\154\115\155\124\156\123\157\106\160" +
    "\127\161\120\162\105\163\130\164\122\165\113\166\126" +
    "\001\002\000\004\035\047\001\002\000\004\056\u0164\001" +
    "\002\000\004\007\u0160\001\002\000\006\012\uff87\013\uff87" +
    "\001\002\000\004\126\u014a\001\002\000\004\126\u0141\001" +
    "\002\000\004\007\u0142\001\002\000\004\035\047\001\002" +
    "\000\004\010\u0144\001\002\000\004\130\u0145\001\002\000" +
    "\004\035\047\001\002\000\004\007\u0147\001\002\000\004" +
    "\035\047\001\002\000\004\010\u0149\001\002\000\032\010" +
    "\uff32\012\uff32\013\uff32\040\uff32\056\uff32\063\uff32\113\uff32" +
    "\125\uff32\127\uff32\131\uff32\132\uff32\137\uff32\001\002\000" +
    "\030\007\000\056\u0138\063\u0139\113\u013f\125\u0132\127\u0140" +
    "\131\u013c\132\u013d\137\u014c\140\u014d\141\u0151\001\002\000" +
    "\032\010\uff2b\012\uff2b\013\uff2b\040\uff2b\056\uff2b\063\uff2b" +
    "\113\uff2b\125\uff2b\127\uff2b\131\uff2b\132\uff2b\137\uff2b\001" +
    "\002\000\034\007\u015c\010\000\012\000\013\000\040\000" +
    "\056\000\063\000\113\000\125\000\127\000\131\000\132" +
    "\000\137\000\001\002\000\006\007\uff62\051\uff62\001\002" +
    "\000\004\007\uff60\001\002\000\032\010\uff33\012\uff33\013" +
    "\uff33\040\uff33\056\uff33\063\uff33\113\uff33\125\uff33\127\uff33" +
    "\131\uff33\132\uff33\137\uff33\001\002\000\004\007\u0152\001" +
    "\002\000\006\007\uff61\051\uff61\001\002\000\004\035\047" +
    "\001\002\000\012\010\000\040\325\107\000\110\000\001" +
    "\002\000\010\010\000\107\u0156\110\u0155\001\002\000\014" +
    "\010\ufee3\012\ufee3\013\ufee3\040\ufee3\236\ufee3\001\002\000" +
    "\014\010\ufee4\012\ufee4\013\ufee4\040\ufee4\236\ufee4\001\002" +
    "\000\014\010\ufee2\012\ufee2\013\ufee2\040\ufee2\236\ufee2\001" +
    "\002\000\004\010\u0159\001\002\000\032\010\uff2c\012\uff2c" +
    "\013\uff2c\040\uff2c\056\uff2c\063\uff2c\113\uff2c\125\uff2c\127" +
    "\uff2c\131\uff2c\132\uff2c\137\uff2c\001\002\000\032\010\uff34" +
    "\012\uff34\013\uff34\040\uff34\056\uff34\063\uff34\113\uff34\125" +
    "\uff34\127\uff34\131\uff34\132\uff34\137\uff34\001\002\000\032" +
    "\010\uff2d\012\uff2d\013\uff2d\040\uff2d\056\uff2d\063\uff2d\113" +
    "\uff2d\125\uff2d\127\uff2d\131\uff2d\132\uff2d\137\uff2d\001\002" +
    "\000\004\035\047\001\002\000\006\010\000\040\325\001" +
    "\002\000\004\010\u015f\001\002\000\032\010\uff2e\012\uff2e" +
    "\013\uff2e\040\uff2e\056\uff2e\063\uff2e\113\uff2e\125\uff2e\127" +
    "\uff2e\131\uff2e\132\uff2e\137\uff2e\001\002\000\006\010\000" +
    "\035\047\001\002\000\004\010\u0163\001\002\000\004\010" +
    "\uff28\001\002\000\032\010\uff30\012\uff30\013\uff30\040\uff30" +
    "\056\uff30\063\uff30\113\uff30\125\uff30\127\uff30\131\uff30\132" +
    "\uff30\137\uff30\001\002\000\032\010\uff31\012\uff31\013\uff31" +
    "\040\uff31\056\uff31\063\uff31\113\uff31\125\uff31\127\uff31\131" +
    "\uff31\132\uff31\137\uff31\001\002\000\022\056\u0138\063\u0139" +
    "\113\u013f\125\u0132\127\u0140\131\u013c\132\u013d\137\u0137\001" +
    "\002\000\012\010\uff26\012\uff26\013\uff26\040\uff26\001\002" +
    "\000\032\010\000\012\000\013\000\040\000\056\u0138\063" +
    "\u0139\113\u013f\125\u0132\127\u0140\131\u013c\132\u013d\137\u0137" +
    "\001\002\000\012\010\uff50\012\uff50\013\uff50\040\uff50\001" +
    "\002\000\032\010\000\012\000\013\000\040\000\056\u0138" +
    "\063\u0139\113\u013f\125\u0132\127\u0140\131\u013c\132\u013d\137" +
    "\u0137\001\002\000\012\010\uff37\012\uff37\013\uff37\040\uff37" +
    "\001\002\000\012\010\uff38\012\uff38\013\uff38\040\uff38\001" +
    "\002\000\012\010\uff2a\012\uff2a\013\uff2a\040\uff2a\001\002" +
    "\000\012\010\uff29\012\uff29\013\uff29\040\uff29\001\002\000" +
    "\032\010\uff2f\012\uff2f\013\uff2f\040\uff2f\056\uff2f\063\uff2f" +
    "\113\uff2f\125\uff2f\127\uff2f\131\uff2f\132\uff2f\137\uff2f\001" +
    "\002\000\026\035\047\056\u0138\063\u0139\113\u013f\125\u0132" +
    "\127\u0140\131\u013c\132\u013d\133\u013b\137\u0137\001\002\000" +
    "\010\010\uff51\012\uff51\013\uff51\001\002\000\010\010\uff4d" +
    "\012\uff4d\013\uff4d\001\002\000\010\010\uff4e\012\uff4e\013" +
    "\uff4e\001\002\000\006\031\061\032\052\001\002\000\004" +
    "\040\u0175\001\002\000\006\031\061\032\052\001\002\000" +
    "\004\010\u0177\001\002\000\032\010\uff36\012\uff36\013\uff36" +
    "\040\uff36\056\uff36\063\uff36\113\uff36\125\uff36\127\uff36\131" +
    "\uff36\132\uff36\137\uff36\001\002\000\026\035\047\056\u0138" +
    "\063\u0139\113\u013f\125\u0132\127\u0140\131\u013c\132\u013d\133" +
    "\u013b\137\u0137\001\002\000\006\012\uff8a\013\uff8a\001\002" +
    "\000\006\007\u017e\073\000\001\002\000\006\012\uff9b\013" +
    "\uff9b\001\002\000\004\073\u0183\001\002\000\004\073\uff58" +
    "\001\002\000\004\035\047\001\002\000\004\010\u0182\001" +
    "\002\000\006\010\000\040\325\001\002\000\004\010\uff57" +
    "\001\002\000\004\073\uff59\001\002\000\004\064\012\001" +
    "\002\000\006\012\uff5a\013\uff5a\001\002\000\006\114\uff99" +
    "\171\uff99\001\002\000\006\114\uff98\171\uff98\001\002\000" +
    "\006\012\uff9f\013\uff9f\001\002\000\006\114\u0189\171\u018b" +
    "\001\002\000\004\035\u018f\001\002\000\006\012\uff9a\013" +
    "\uff9a\001\002\000\004\116\u018c\001\002\000\004\036\u018d" +
    "\001\002\000\004\035\u018e\001\002\000\006\012\uff97\013" +
    "\uff97\001\002\000\006\012\uff96\013\uff96\001\002\000\004" +
    "\055\uff93\001\002\000\004\055\uff94\001\002\000\004\055" +
    "\u0194\001\002\000\006\012\uff9e\013\uff9e\001\002\000\004" +
    "\035\047\001\002\000\020\037\u019b\172\u019a\173\u0196\174" +
    "\u0198\175\u0199\176\u019c\177\u019d\001\002\000\006\012\uff91" +
    "\013\uff91\001\002\000\006\012\uff95\013\uff95\001\002\000" +
    "\006\012\uff90\013\uff90\001\002\000\006\012\uff8e\013\uff8e" +
    "\001\002\000\006\012\uff92\013\uff92\001\002\000\006\012" +
    "\uff8f\013\uff8f\001\002\000\006\012\uff8d\013\uff8d\001\002" +
    "\000\006\012\uff8c\013\uff8c\001\002\000\056\002\ufff7\003" +
    "\ufff7\004\ufff7\012\ufff7\013\ufff7\037\ufff7\045\ufff7\046\ufff7" +
    "\050\ufff7\060\ufff7\064\ufff7\111\ufff7\167\ufff7\213\ufff7\214" +
    "\ufff7\215\ufff7\216\ufff7\217\ufff7\222\ufff7\226\ufff7\227\ufff7" +
    "\230\ufff7\001\002\000\004\055\u01aa\001\002\000\004\036" +
    "\u01a1\001\002\000\016\020\060\031\061\032\052\034\053" +
    "\056\056\205\064\001\002\000\010\012\000\013\000\040" +
    "\u01a3\001\002\000\004\205\064\001\002\000\006\012\uffc0" +
    "\013\uffc0\001\002\000\006\012\uffbd\013\uffbd\001\002\000" +
    "\004\036\u01a7\001\002\000\016\020\060\031\061\032\052" +
    "\034\053\056\056\205\064\001\002\000\010\012\000\013" +
    "\000\040\u01a3\001\002\000\006\012\uffbe\013\uffbe\001\002" +
    "\000\010\012\000\013\000\040\u01a3\001\002\000\006\012" +
    "\uffbf\013\uffbf\001\002\000\056\002\ufff0\003\ufff0\004\ufff0" +
    "\012\ufff0\013\ufff0\037\ufff0\045\ufff0\046\ufff0\050\ufff0\060" +
    "\ufff0\064\ufff0\111\ufff0\167\ufff0\213\ufff0\214\ufff0\215\ufff0" +
    "\216\ufff0\217\ufff0\222\ufff0\226\ufff0\227\ufff0\230\ufff0\001" +
    "\002\000\004\035\047\001\002\000\004\035\ufedc\001\002" +
    "\000\004\035\ufedd\001\002\000\010\007\u01b3\061\000\063" +
    "\000\001\002\000\006\061\u01bd\063\u01bc\001\002\000\006" +
    "\061\ufeda\063\ufeda\001\002\000\004\035\u01b4\001\002\000" +
    "\006\010\000\040\u01b7\001\002\000\004\010\u01b6\001\002" +
    "\000\006\061\ufedb\063\ufedb\001\002\000\004\035\u01ba\001" +
    "\002\000\004\010\ufed9\001\002\000\004\010\ufed7\001\002" +
    "\000\006\010\000\040\u01b7\001\002\000\004\010\ufed8\001" +
    "\002\000\004\061\u01cc\001\002\000\004\007\u01bf\001\002" +
    "\000\006\012\ufedf\013\ufedf\001\002\000\016\020\060\031" +
    "\061\032\052\034\053\056\056\205\064\001\002\000\006" +
    "\010\000\040\u01c7\001\002\000\004\010\u01c2\001\002\000" +
    "\010\012\000\013\000\040\u01c3\001\002\000\004\007\u01bf" +
    "\001\002\000\006\012\ufed6\013\ufed6\001\002\000\006\012" +
    "\ufed1\013\ufed1\001\002\000\006\012\ufed2\013\ufed2\001\002" +
    "\000\016\020\060\031\061\032\052\034\053\056\056\205" +
    "\064\001\002\000\004\010\ufed5\001\002\000\004\010\ufed3" +
    "\001\002\000\006\010\000\040\u01c7\001\002\000\004\010" +
    "\ufed4\001\002\000\006\012\ufede\013\ufede\001\002\000\006" +
    "\012\uff78\013\uff78\001\002\000\004\035\047\001\002\000" +
    "\004\035\u023c\001\002\000\004\051\uff63\001\002\000\010" +
    "\203\u01fb\204\u01fa\220\u01fc\001\002\000\012\051\uff60\203" +
    "\uffb7\204\uffb7\220\uffb7\001\002\000\004\035\047\001\002" +
    "\000\004\035\047\001\002\000\004\051\u01d8\001\002\000" +
    "\004\167\u01d7\001\002\000\010\203\uffb8\204\uffb8\220\uffb8" +
    "\001\002\000\004\035\047\001\002\000\006\012\uff76\013" +
    "\uff76\001\002\000\004\055\u01db\001\002\000\004\035\047" +
    "\001\002\000\004\007\u01dd\001\002\000\004\035\047\001" +
    "\002\000\006\010\000\040\325\001\002\000\004\010\u01e0" +
    "\001\002\000\012\012\000\013\000\055\u01e1\142\u01e4\001" +
    "\002\000\004\035\047\001\002\000\006\012\uff5f\013\uff5f" +
    "\001\002\000\006\012\uff5b\013\uff5b\001\002\000\004\007" +
    "\u01e5\001\002\000\004\035\047\001\002\000\004\010\u01e7" +
    "\001\002\000\006\012\uff5d\013\uff5d\001\002\000\004\007" +
    "\u01e9\001\002\000\004\035\047\001\002\000\004\010\u01eb" +
    "\001\002\000\012\012\000\013\000\055\u01e1\142\u01e4\001" +
    "\002\000\006\012\uff5c\013\uff5c\001\002\000\004\010\uff5e" +
    "\001\002\000\006\012\uff73\013\uff73\001\002\000\004\007" +
    "\u01f1\001\002\000\006\012\uff75\013\uff75\001\002\000\026" +
    "\035\047\056\u0138\063\u0139\113\u013f\125\u0132\127\u0140\131" +
    "\u013c\132\u013d\133\u013b\137\u0137\001\002\000\004\010\u01f3" +
    "\001\002\000\010\012\000\013\000\055\u01f5\001\002\000" +
    "\006\012\uff55\013\uff55\001\002\000\006\035\047\113\u01f7" +
    "\001\002\000\006\012\uff52\013\uff52\001\002\000\006\012" +
    "\uff53\013\uff53\001\002\000\006\012\uff54\013\uff54\001\002" +
    "\000\004\035\047\001\002\000\004\035\uffb5\001\002\000" +
    "\004\035\uffb6\001\002\000\004\035\047\001\002\000\004" +
    "\007\u01fe\001\002\000\006\010\000\205\u0201\001\002\000" +
    "\004\010\u020e\001\002\000\012\010\uffb3\073\uffb3\115\uffb3" +
    "\144\uffb3\001\002\000\004\035\u0203\001\002\000\012\010" +
    "\uffb4\073\uffb4\115\uffb4\144\uffb4\001\002\000\050\033\110" +
    "\145\112\146\117\147\125\150\111\151\121\152\114\153" +
    "\107\154\115\155\124\156\123\157\106\160\127\161\120" +
    "\162\105\163\130\164\122\165\113\166\126\001\002\000" +
    "\022\010\000\040\000\073\000\115\000\144\000\206\u0205" +
    "\207\u0206\210\u0209\001\002\000\014\010\uffaf\040\uffaf\073" +
    "\uffaf\115\uffaf\144\uffaf\001\002\000\014\010\uffae\040\uffae" +
    "\073\uffae\115\uffae\144\uffae\001\002\000\014\010\000\040" +
    "\u020a\073\000\115\000\144\000\001\002\000\014\010\uffac" +
    "\040\uffac\073\uffac\115\uffac\144\uffac\001\002\000\014\010" +
    "\uffad\040\uffad\073\uffad\115\uffad\144\uffad\001\002\000\004" +
    "\205\u0201\001\002\000\012\010\uffb0\073\uffb0\115\uffb0\144" +
    "\uffb0\001\002\000\012\010\uffb2\073\uffb2\115\uffb2\144\uffb2" +
    "\001\002\000\012\010\uffb1\073\uffb1\115\uffb1\144\uffb1\001" +
    "\002\000\004\221\u020f\001\002\000\054\033\110\047\u0211" +
    "\145\112\146\117\147\125\150\111\151\121\152\114\153" +
    "\107\154\115\155\124\156\123\157\106\160\127\161\120" +
    "\162\105\163\130\164\122\165\113\166\126\205\064\001" +
    "\002\000\010\073\uffcd\115\uffcd\214\uffcd\001\002\000\010" +
    "\073\uffcb\115\uffcb\214\uffcb\001\002\000\004\047\u0228\001" +
    "\002\000\010\073\000\115\u0214\214\000\001\002\000\010" +
    "\211\u0223\212\u0225\213\u0222\001\002\000\006\073\u0218\214" +
    "\000\001\002\000\010\073\uffaa\144\uffaa\214\uffaa\001\002" +
    "\000\004\214\u021a\001\002\000\004\214\uffcf\001\002\000" +
    "\004\214\uffce\001\002\000\042\003\041\004\042\037\033" +
    "\045\043\046\014\050\037\060\031\064\012\111\026\167" +
    "\035\213\046\214\023\216\045\217\004\222\000\230\013" +
    "\001\002\000\004\222\uffc8\001\002\000\004\222\u021e\001" +
    "\002\000\042\003\041\004\042\037\033\045\043\046\014" +
    "\050\037\060\031\064\012\111\026\167\035\213\046\214" +
    "\023\216\045\217\004\222\uffc9\230\013\001\002\000\022" +
    "\007\225\020\060\031\061\032\052\034\053\035\047\056" +
    "\056\205\064\001\002\000\012\012\333\013\334\041\300" +
    "\042\277\001\002\000\004\215\u0221\001\002\000\006\012" +
    "\uffd0\013\uffd0\001\002\000\004\073\u0226\001\002\000\010" +
    "\073\uffa9\144\uffa9\214\uffa9\001\002\000\010\073\uffab\144" +
    "\uffab\214\uffab\001\002\000\010\073\uffa8\144\uffa8\214\uffa8" +
    "\001\002\000\004\035\u0227\001\002\000\010\073\uffa7\144" +
    "\uffa7\214\uffa7\001\002\000\004\007\u0229\001\002\000\026" +
    "\035\047\056\u0138\063\u0139\113\u013f\125\u0132\127\u0140\131" +
    "\u013c\132\u013d\133\u013b\137\u0137\001\002\000\004\010\u022b" +
    "\001\002\000\010\073\uffcc\115\uffcc\214\uffcc\001\002\000" +
    "\012\073\000\115\000\144\000\205\u0201\001\002\000\010" +
    "\073\000\115\u0214\144\000\001\002\000\006\073\000\144" +
    "\u022f\001\002\000\004\135\u023a\001\002\000\004\073\uffa5" +
    "\001\002\000\004\073\u0232\001\002\000\040\003\000\004" +
    "\000\037\000\045\000\046\000\050\000\060\000\064\000" +
    "\111\000\167\000\213\000\214\u0233\216\000\217\000\230" +
    "\000\001\002\000\040\003\uffa4\004\uffa4\037\uffa4\045\uffa4" +
    "\046\uffa4\050\uffa4\060\uffa4\064\uffa4\111\uffa4\167\uffa4\213" +
    "\uffa4\214\uffa4\216\uffa4\217\uffa4\230\uffa4\001\002\000\040" +
    "\003\uffa3\004\uffa3\037\uffa3\045\uffa3\046\uffa3\050\uffa3\060" +
    "\uffa3\064\uffa3\111\uffa3\167\uffa3\213\uffa3\214\uffa3\216\uffa3" +
    "\217\uffa3\230\uffa3\001\002\000\040\003\041\004\042\037" +
    "\033\045\043\046\014\050\037\060\031\064\012\111\026" +
    "\167\035\213\046\214\023\216\045\217\004\230\013\001" +
    "\002\000\046\003\041\004\042\012\000\013\000\037\033" +
    "\045\043\046\014\050\037\060\031\064\012\111\026\167" +
    "\035\213\046\214\023\215\u0239\216\045\217\004\230\013" +
    "\001\002\000\006\012\uffa1\013\uffa1\001\002\000\006\012" +
    "\uffb9\013\uffb9\001\002\000\006\012\uffa2\013\uffa2\001\002" +
    "\000\004\073\uffa6\001\002\000\006\012\uff74\013\uff74\001" +
    "\002\000\004\144\u023d\001\002\000\004\143\u023e\001\002" +
    "\000\004\035\u023f\001\002\000\006\012\uff56\013\uff56\001" +
    "\002\000\014\012\000\013\000\055\u0244\114\u0243\115\u0245" +
    "\001\002\000\006\012\uff77\013\uff77\001\002\000\006\012" +
    "\uff72\013\uff72\001\002\000\004\035\u026a\001\002\000\004" +
    "\113\u0247\001\002\000\006\012\uff6f\013\uff6f\001\002\000" +
    "\006\012\uff6e\013\uff6e\001\002\000\004\007\u0248\001\002" +
    "\000\016\010\000\116\u024d\117\u024c\120\u024f\121\u0249\122" +
    "\u024e\001\002\000\004\036\u0267\001\002\000\004\010\u025f" +
    "\001\002\000\004\010\uff68\001\002\000\004\036\u025c\001" +
    "\002\000\004\036\u0259\001\002\000\004\036\u0256\001\002" +
    "\000\004\036\u0250\001\002\000\004\020\u0251\001\002\000" +
    "\006\010\000\040\u0252\001\002\000\016\010\000\116\u024d" +
    "\117\u024c\120\u024f\121\u0249\122\u024e\001\002\000\004\010" +
    "\uff6b\001\002\000\004\010\uff66\001\002\000\004\010\uff67" +
    "\001\002\000\004\031\u0257\001\002\000\006\010\000\040" +
    "\u0252\001\002\000\004\010\uff69\001\002\000\004\020\u025a" +
    "\001\002\000\006\010\000\040\u0252\001\002\000\004\010" +
    "\uff6d\001\002\000\004\020\u025d\001\002\000\006\010\000" +
    "\040\u0252\001\002\000\004\010\uff6c\001\002\000\010\012" +
    "\000\013\000\040\u0260\001\002\000\004\007\u0263\001\002" +
    "\000\006\012\uff71\013\uff71\001\002\000\006\012\uff64\013" +
    "\uff64\001\002\000\016\010\000\116\u024d\117\u024c\120\u024f" +
    "\121\u0249\122\u024e\001\002\000\004\010\u0265\001\002\000" +
    "\010\012\000\013\000\040\u0260\001\002\000\006\012\uff65" +
    "\013\uff65\001\002\000\004\020\u0268\001\002\000\006\010" +
    "\000\040\u0252\001\002\000\004\010\uff6a\001\002\000\006" +
    "\012\uff70\013\uff70\001\002\000\004\002\001\001\002\000" +
    "\056\002\ufff6\003\ufff6\004\ufff6\012\ufff6\013\ufff6\037\ufff6" +
    "\045\ufff6\046\ufff6\050\ufff6\060\ufff6\064\ufff6\111\ufff6\167" +
    "\ufff6\213\ufff6\214\ufff6\215\ufff6\216\ufff6\217\ufff6\222\ufff6" +
    "\226\ufff6\227\ufff6\230\ufff6\001\002\000\014\012\uffdf\013" +
    "\uffdf\035\uffdf\115\uffdf\205\uffdf\001\002\000\014\012\uffe0" +
    "\013\uffe0\035\uffe0\115\uffe0\205\uffe0\001\002\000\056\002" +
    "\ufffb\003\ufffb\004\ufffb\012\ufffb\013\ufffb\037\ufffb\045\ufffb" +
    "\046\ufffb\050\ufffb\060\ufffb\064\ufffb\111\ufffb\167\ufffb\213" +
    "\ufffb\214\ufffb\215\ufffb\216\ufffb\217\ufffb\222\ufffb\226\ufffb" +
    "\227\ufffb\230\ufffb\001\002\000\056\002\ufff9\003\ufff9\004" +
    "\ufff9\012\ufff9\013\ufff9\037\ufff9\045\ufff9\046\ufff9\050\ufff9" +
    "\060\ufff9\064\ufff9\111\ufff9\167\ufff9\213\ufff9\214\ufff9\215" +
    "\ufff9\216\ufff9\217\ufff9\222\ufff9\226\ufff9\227\ufff9\230\ufff9" +
    "\001\002\000\056\002\ufff4\003\ufff4\004\ufff4\012\ufff4\013" +
    "\ufff4\037\ufff4\045\ufff4\046\ufff4\050\ufff4\060\ufff4\064\ufff4" +
    "\111\ufff4\167\ufff4\213\ufff4\214\ufff4\215\ufff4\216\ufff4\217" +
    "\ufff4\222\ufff4\226\ufff4\227\ufff4\230\ufff4\001\002\000\056" +
    "\002\uffed\003\uffed\004\uffed\012\uffed\013\uffed\037\uffed\045" +
    "\uffed\046\uffed\050\uffed\060\uffed\064\uffed\111\uffed\167\uffed" +
    "\213\uffed\214\uffed\215\uffed\216\uffed\217\uffed\222\uffed\226" +
    "\uffed\227\uffed\230\uffed\001\002\000\010\012\000\013\000" +
    "\115\u0278\001\002\000\010\012\uffdd\013\uffdd\115\uffdd\001" +
    "\002\000\010\012\uffdc\013\uffdc\115\uffdc\001\002\000\010" +
    "\012\uffde\013\uffde\115\uffde\001\002\000\006\012\333\013" +
    "\334\001\002\000\004\225\u027a\001\002\000\006\012\uffda" +
    "\013\uffda\001\002\000\010\012\000\013\000\020\u027b\001" +
    "\002\000\006\012\uffd9\013\uffd9\001\002\000\006\012\uffdb" +
    "\013\uffdb\001\002\000\006\012\uffd8\013\uffd8\001\002\000" +
    "\040\003\041\004\042\037\033\045\043\046\014\050\037" +
    "\060\031\064\012\111\026\167\035\213\046\214\023\216" +
    "\045\217\004\230\013\001\002\000\044\003\041\004\042" +
    "\037\033\045\043\046\014\050\037\060\031\064\012\111" +
    "\026\167\035\213\046\214\023\216\045\217\004\226\u0281" +
    "\227\u0282\230\013\001\002\000\056\002\uffe1\003\uffe1\004" +
    "\uffe1\012\uffe1\013\uffe1\037\uffe1\045\uffe1\046\uffe1\050\uffe1" +
    "\060\uffe1\064\uffe1\111\uffe1\167\uffe1\213\uffe1\214\uffe1\215" +
    "\uffe1\216\uffe1\217\uffe1\222\uffe1\226\uffe1\227\uffe1\230\uffe1" +
    "\001\002\000\012\012\333\013\334\223\u028c\224\u028a\001" +
    "\002\000\012\012\333\013\334\223\u0285\224\u0283\001\002" +
    "\000\012\012\000\013\000\035\047\205\064\001\002\000" +
    "\056\002\uffd4\003\uffd4\004\uffd4\012\uffd4\013\uffd4\037\uffd4" +
    "\045\uffd4\046\uffd4\050\uffd4\060\uffd4\064\uffd4\111\uffd4\167" +
    "\uffd4\213\uffd4\214\uffd4\215\uffd4\216\uffd4\217\uffd4\222\uffd4" +
    "\226\uffd4\227\uffd4\230\uffd4\001\002\000\012\012\000\013" +
    "\000\035\047\205\064\001\002\000\006\012\333\013\334" +
    "\001\002\000\056\002\uffd3\003\uffd3\004\uffd3\012\uffd3\013" +
    "\uffd3\037\uffd3\045\uffd3\046\uffd3\050\uffd3\060\uffd3\064\uffd3" +
    "\111\uffd3\167\uffd3\213\uffd3\214\uffd3\215\uffd3\216\uffd3\217" +
    "\uffd3\222\uffd3\226\uffd3\227\uffd3\230\uffd3\001\002\000\006" +
    "\012\333\013\334\001\002\000\056\002\uffd2\003\uffd2\004" +
    "\uffd2\012\uffd2\013\uffd2\037\uffd2\045\uffd2\046\uffd2\050\uffd2" +
    "\060\uffd2\064\uffd2\111\uffd2\167\uffd2\213\uffd2\214\uffd2\215" +
    "\uffd2\216\uffd2\217\uffd2\222\uffd2\226\uffd2\227\uffd2\230\uffd2" +
    "\001\002\000\012\012\000\013\000\035\047\205\064\001" +
    "\002\000\056\002\uffd7\003\uffd7\004\uffd7\012\uffd7\013\uffd7" +
    "\037\uffd7\045\uffd7\046\uffd7\050\uffd7\060\uffd7\064\uffd7\111" +
    "\uffd7\167\uffd7\213\uffd7\214\uffd7\215\uffd7\216\uffd7\217\uffd7" +
    "\222\uffd7\226\uffd7\227\uffd7\230\uffd7\001\002\000\012\012" +
    "\000\013\000\035\047\205\064\001\002\000\006\012\333" +
    "\013\334\001\002\000\056\002\uffd6\003\uffd6\004\uffd6\012" +
    "\uffd6\013\uffd6\037\uffd6\045\uffd6\046\uffd6\050\uffd6\060\uffd6" +
    "\064\uffd6\111\uffd6\167\uffd6\213\uffd6\214\uffd6\215\uffd6\216" +
    "\uffd6\217\uffd6\222\uffd6\226\uffd6\227\uffd6\230\uffd6\001\002" +
    "\000\006\012\333\013\334\001\002\000\056\002\uffd5\003" +
    "\uffd5\004\uffd5\012\uffd5\013\uffd5\037\uffd5\045\uffd5\046\uffd5" +
    "\050\uffd5\060\uffd5\064\uffd5\111\uffd5\167\uffd5\213\uffd5\214" +
    "\uffd5\215\uffd5\216\uffd5\217\uffd5\222\uffd5\226\uffd5\227\uffd5" +
    "\230\uffd5\001\002\000\004\035\047\001\002\000\006\012" +
    "\ufeb9\013\ufeb9\001\002\000\012\012\000\013\000\035\047" +
    "\205\064\001\002\000\006\012\333\013\334\001\002\000" +
    "\056\002\uffd1\003\uffd1\004\uffd1\012\uffd1\013\uffd1\037\uffd1" +
    "\045\uffd1\046\uffd1\050\uffd1\060\uffd1\064\uffd1\111\uffd1\167" +
    "\uffd1\213\uffd1\214\uffd1\215\uffd1\216\uffd1\217\uffd1\222\uffd1" +
    "\226\uffd1\227\uffd1\230\uffd1\001\002\000\034\007\uff22\020" +
    "\uff22\031\uff22\032\uff22\034\uff22\035\uff22\056\uff22\066\uff22" +
    "\067\uff22\070\uff22\071\uff22\072\uff22\205\uff22\001\002\000" +
    "\004\005\uff24\001\002\000\034\007\225\020\060\031\061" +
    "\032\052\034\053\035\047\056\056\066\u02c1\067\u02c0\070" +
    "\u02c3\071\u02c7\072\u02c4\205\064\001\002\000\034\007\uff21" +
    "\020\uff21\031\uff21\032\uff21\034\uff21\035\uff21\056\uff21\066" +
    "\uff21\067\uff21\070\uff21\071\uff21\072\uff21\205\uff21\001\002" +
    "\000\004\005\u029e\001\002\000\010\007\313\031\061\032" +
    "\052\001\002\000\034\007\uff1f\020\uff1f\031\uff1f\032\uff1f" +
    "\034\uff1f\035\uff1f\056\uff1f\066\uff1f\067\uff1f\070\uff1f\071" +
    "\uff1f\072\uff1f\205\uff1f\001\002\000\034\007\uff20\020\uff20" +
    "\031\uff20\032\uff20\034\uff20\035\uff20\056\uff20\066\uff20\067" +
    "\uff20\070\uff20\071\uff20\072\uff20\205\uff20\001\002\000\004" +
    "\035\047\001\002\000\032\012\000\013\000\015\000\075" +
    "\000\076\u02ac\077\u02ab\100\u02ad\101\u02b1\103\000\105\000" +
    "\106\000\236\000\001\002\000\040\012\000\013\000\015" +
    "\000\035\u02a2\040\000\073\u02a1\075\000\076\000\077\000" +
    "\100\000\101\000\103\000\105\000\106\000\236\000\001" +
    "\002\000\006\020\u02a9\035\u02aa\001\002\000\036\012\ufefa" +
    "\013\ufefa\015\ufefa\040\ufefa\055\ufefa\075\ufefa\076\ufefa\077" +
    "\ufefa\100\ufefa\101\ufefa\103\ufefa\105\ufefa\106\ufefa\236\ufefa" +
    "\001\002\000\034\012\000\013\000\015\000\040\u02a5\075" +
    "\000\076\000\077\000\100\000\101\000\103\000\105\000" +
    "\106\000\236\000\001\002\000\036\012\ufef9\013\ufef9\015" +
    "\ufef9\040\ufef9\055\ufef9\075\ufef9\076\ufef9\077\ufef9\100\ufef9" +
    "\101\ufef9\103\ufef9\105\ufef9\106\ufef9\236\ufef9\001\002\000" +
    "\004\035\047\001\002\000\032\012\ufeff\013\ufeff\015\ufeff" +
    "\075\ufeff\076\ufeff\077\ufeff\100\ufeff\101\ufeff\103\ufeff\105" +
    "\ufeff\106\ufeff\236\ufeff\001\002\000\032\012\ufefd\013\ufefd" +
    "\015\ufefd\075\ufefd\076\ufefd\077\ufefd\100\ufefd\101\ufefd\103" +
    "\ufefd\105\ufefd\106\ufefd\236\ufefd\001\002\000\032\012\ufefe" +
    "\013\ufefe\015\ufefe\075\ufefe\076\ufefe\077\ufefe\100\ufefe\101" +
    "\ufefe\103\ufefe\105\ufefe\106\ufefe\236\ufefe\001\002\000\036" +
    "\012\ufefc\013\ufefc\015\ufefc\040\ufefc\055\ufefc\075\ufefc\076" +
    "\ufefc\077\ufefc\100\ufefc\101\ufefc\103\ufefc\105\ufefc\106\ufefc" +
    "\236\ufefc\001\002\000\036\012\ufefb\013\ufefb\015\ufefb\040" +
    "\ufefb\055\ufefb\075\ufefb\076\ufefb\077\ufefb\100\ufefb\101\ufefb" +
    "\103\ufefb\105\ufefb\106\ufefb\236\ufefb\001\002\000\006\075" +
    "\000\102\u02b3\001\002\000\004\075\ufef6\001\002\000\006" +
    "\075\000\102\u02b3\001\002\000\004\075\u02f6\001\002\000" +
    "\022\012\ufef7\013\ufef7\015\ufef7\075\ufef2\103\ufef7\105\ufef7" +
    "\106\ufef7\236\ufef7\001\002\000\020\012\000\013\000\015" +
    "\243\103\000\105\000\106\000\236\000\001\002\000\006" +
    "\075\000\102\u02b3\001\002\000\004\075\ufef3\001\002\000" +
    "\004\075\ufef1\001\002\000\004\075\ufef0\001\002\000\016" +
    "\012\000\013\000\103\u02b7\105\000\106\000\236\000\001" +
    "\002\000\014\012\ufeee\013\ufeee\105\ufeee\106\ufeee\236\ufeee" +
    "\001\002\000\004\104\u02f3\001\002\000\014\012\000\013" +
    "\000\105\u02b9\106\000\236\000\001\002\000\016\035\047" +
    "\066\u02c1\067\u02c0\070\u02c3\071\u02c7\072\u02c4\001\002\000" +
    "\012\012\ufeec\013\ufeec\106\ufeec\236\ufeec\001\002\000\012" +
    "\012\000\013\000\106\u02bc\236\000\001\002\000\004\104" +
    "\u02bf\001\002\000\010\012\uff25\013\uff25\236\uff25\001\002" +
    "\000\010\012\ufee5\013\ufee5\236\ufee5\001\002\000\016\035" +
    "\047\066\u02c1\067\u02c0\070\u02c3\071\u02c7\072\u02c4\001\002" +
    "\000\004\007\u02e4\001\002\000\004\007\u02e1\001\002\000" +
    "\044\005\uff11\012\uff11\013\uff11\021\uff11\022\uff11\023\uff11" +
    "\024\uff11\025\uff11\027\uff11\030\uff11\036\uff11\040\uff11\073" +
    "\uff11\107\uff11\110\uff11\136\uff11\236\uff11\001\002\000\004" +
    "\007\u02de\001\002\000\004\007\u02db\001\002\000\020\007" +
    "\u02d7\012\000\013\000\040\000\107\u0156\110\u0155\236\000" +
    "\001\002\000\016\012\000\013\000\040\000\107\u0156\110" +
    "\u0155\236\000\001\002\000\004\007\u02c8\001\002\000\012" +
    "\032\u02cc\035\000\043\u02c9\065\u02ca\001\002\000\004\010" +
    "\uff0f\001\002\000\004\035\uff0d\001\002\000\004\035\047" +
    "\001\002\000\004\010\uff10\001\002\000\004\010\u02cf\001" +
    "\002\000\004\035\uff0c\001\002\000\044\005\uff13\012\uff13" +
    "\013\uff13\021\uff13\022\uff13\023\uff13\024\uff13\025\uff13\027" +
    "\uff13\030\uff13\036\uff13\040\uff13\073\uff13\107\uff13\110\uff13" +
    "\136\uff13\236\uff13\001\002\000\004\010\uff0e\001\002\000" +
    "\012\012\000\013\000\040\u02d2\236\000\001\002\000\012" +
    "\012\000\013\000\106\u02bc\236\000\001\002\000\010\012" +
    "\ufee0\013\ufee0\236\ufee0\001\002\000\010\012\ufee6\013\ufee6" +
    "\236\ufee6\001\002\000\010\012\ufee1\013\ufee1\236\ufee1\001" +
    "\002\000\012\012\000\013\000\040\u02d2\236\000\001\002" +
    "\000\020\010\000\020\060\031\061\032\052\034\053\056" +
    "\056\205\064\001\002\000\004\010\u02d9\001\002\000\044" +
    "\005\uffca\012\uffca\013\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\030\uffca\036\uffca\040\uffca\073\uffca" +
    "\107\uffca\110\uffca\136\uffca\236\uffca\001\002\000\010\012" +
    "\ufee7\013\ufee7\236\ufee7\001\002\000\012\032\u02cc\035\000" +
    "\043\u02c9\065\u02ca\001\002\000\004\010\u02dd\001\002\000" +
    "\044\005\uff12\012\uff12\013\uff12\021\uff12\022\uff12\023\uff12" +
    "\024\uff12\025\uff12\027\uff12\030\uff12\036\uff12\040\uff12\073" +
    "\uff12\107\uff12\110\uff12\136\uff12\236\uff12\001\002\000\012" +
    "\032\u02cc\035\000\043\u02c9\065\u02ca\001\002\000\004\010" +
    "\u02e0\001\002\000\044\005\uff14\012\uff14\013\uff14\021\uff14" +
    "\022\uff14\023\uff14\024\uff14\025\uff14\027\uff14\030\uff14\036" +
    "\uff14\040\uff14\073\uff14\107\uff14\110\uff14\136\uff14\236\uff14" +
    "\001\002\000\012\032\u02cc\035\000\043\u02c9\065\u02ca\001" +
    "\002\000\004\010\u02e3\001\002\000\044\005\uff16\012\uff16" +
    "\013\uff16\021\uff16\022\uff16\023\uff16\024\uff16\025\uff16\027" +
    "\uff16\030\uff16\036\uff16\040\uff16\073\uff16\107\uff16\110\uff16" +
    "\136\uff16\236\uff16\001\002\000\012\032\u02cc\035\000\043" +
    "\u02c9\065\u02ca\001\002\000\004\010\u02e6\001\002\000\044" +
    "\005\uff15\012\uff15\013\uff15\021\uff15\022\uff15\023\uff15\024" +
    "\uff15\025\uff15\027\uff15\030\uff15\036\uff15\040\uff15\073\uff15" +
    "\107\uff15\110\uff15\136\uff15\236\uff15\001\002\000\026\007" +
    "\u02d7\021\246\022\251\023\247\024\255\025\254\027\256" +
    "\030\252\036\253\136\257\001\002\000\012\012\ufeed\013" +
    "\ufeed\106\ufeed\236\ufeed\001\002\000\024\021\246\022\251" +
    "\023\247\024\255\025\254\027\256\030\252\036\253\136" +
    "\257\001\002\000\016\020\060\031\061\032\052\034\053" +
    "\056\056\205\064\001\002\000\016\012\000\013\000\016" +
    "\265\017\270\106\000\236\000\001\002\000\012\012\ufeeb" +
    "\013\ufeeb\106\ufeeb\236\ufeeb\001\002\000\016\035\047\066" +
    "\u02c1\067\u02c0\070\u02c3\071\u02c7\072\u02c4\001\002\000\012" +
    "\012\ufee8\013\ufee8\106\ufee8\236\ufee8\001\002\000\012\012" +
    "\ufee9\013\ufee9\106\ufee9\236\ufee9\001\002\000\016\020\060" +
    "\031\061\032\052\034\053\056\056\205\064\001\002\000" +
    "\016\012\000\013\000\016\265\017\270\106\000\236\000" +
    "\001\002\000\012\012\ufeea\013\ufeea\106\ufeea\236\ufeea\001" +
    "\002\000\004\035\047\001\002\000\016\012\000\013\000" +
    "\040\325\105\000\106\000\236\000\001\002\000\014\012" +
    "\ufeef\013\ufeef\105\ufeef\106\ufeef\236\ufeef\001\002\000\004" +
    "\035\047\001\002\000\010\035\u02a2\055\000\073\u02a1\001" +
    "\002\000\004\055\u02f9\001\002\000\004\035\047\001\002" +
    "\000\004\036\u02fb\001\002\000\004\035\047\001\002\000" +
    "\032\012\000\013\000\015\000\075\000\076\u02ac\077\u02ab" +
    "\100\u02ad\101\u02b1\103\000\105\000\106\000\236\000\001" +
    "\002\000\020\012\ufef8\013\ufef8\015\ufef8\103\ufef8\105\ufef8" +
    "\106\ufef8\236\ufef8\001\002\000\004\075\ufef4\001\002\000" +
    "\004\075\ufef5\001\002\000\010\005\uff1d\040\uff1d\073\uff1d" +
    "\001\002\000\010\005\000\040\000\073\u0307\001\002\000" +
    "\004\005\uff23\001\002\000\014\005\uff1c\040\uff1c\041\300" +
    "\042\277\073\uff1c\001\002\000\024\005\ufeac\007\u02d7\036" +
    "\u0305\040\ufeac\041\ufeac\042\ufeac\043\ufeac\044\ufeac\073\ufeac" +
    "\001\002\000\022\007\225\020\060\031\061\032\052\034" +
    "\053\035\047\056\056\205\064\001\002\000\014\005\uff1b" +
    "\040\uff1b\041\300\042\277\073\uff1b\001\002\000\006\020" +
    "\u030e\035\u030f\001\002\000\006\005\000\040\u030a\001\002" +
    "\000\006\005\uff09\040\uff09\001\002\000\044\006\u029b\007" +
    "\000\020\000\031\000\032\000\034\000\035\000\043\u0297" +
    "\056\000\065\u0296\066\000\067\000\070\000\071\000\072" +
    "\000\074\u0299\205\000\001\002\000\004\005\uff1e\001\002" +
    "\000\004\005\uff19\001\002\000\004\005\uff1a\001\002\000" +
    "\006\005\uff0b\040\uff0b\001\002\000\006\005\uff0a\040\uff0a" +
    "\001\002\000\056\002\ufff2\003\ufff2\004\ufff2\012\ufff2\013" +
    "\ufff2\037\ufff2\045\ufff2\046\ufff2\050\ufff2\060\ufff2\064\ufff2" +
    "\111\ufff2\167\ufff2\213\ufff2\214\ufff2\215\ufff2\216\ufff2\217" +
    "\ufff2\222\ufff2\226\ufff2\227\ufff2\230\ufff2\001\002\000\056" +
    "\002\ufffa\003\ufffa\004\ufffa\012\ufffa\013\ufffa\037\ufffa\045" +
    "\ufffa\046\ufffa\050\ufffa\060\ufffa\064\ufffa\111\ufffa\167\ufffa" +
    "\213\ufffa\214\ufffa\215\ufffa\216\ufffa\217\ufffa\222\ufffa\226" +
    "\ufffa\227\ufffa\230\ufffa\001\002\000\056\002\ufff5\003\ufff5" +
    "\004\ufff5\012\ufff5\013\ufff5\037\ufff5\045\ufff5\046\ufff5\050" +
    "\ufff5\060\ufff5\064\ufff5\111\ufff5\167\ufff5\213\ufff5\214\ufff5" +
    "\215\ufff5\216\ufff5\217\ufff5\222\ufff5\226\ufff5\227\ufff5\230" +
    "\ufff5\001\002\000\056\002\ufff8\003\ufff8\004\ufff8\012\ufff8" +
    "\013\ufff8\037\ufff8\045\ufff8\046\ufff8\050\ufff8\060\ufff8\064" +
    "\ufff8\111\ufff8\167\ufff8\213\ufff8\214\ufff8\215\ufff8\216\ufff8" +
    "\217\ufff8\222\ufff8\226\ufff8\227\ufff8\230\ufff8\001\002\000" +
    "\056\002\ufff3\003\ufff3\004\ufff3\012\ufff3\013\ufff3\037\ufff3" +
    "\045\ufff3\046\ufff3\050\ufff3\060\ufff3\064\ufff3\111\ufff3\167" +
    "\ufff3\213\ufff3\214\ufff3\215\ufff3\216\ufff3\217\ufff3\222\ufff3" +
    "\226\ufff3\227\ufff3\230\ufff3\001\002\000\022\012\000\013" +
    "\000\020\060\031\061\032\052\034\053\056\056\205\064" +
    "\001\002\000\006\012\uffc6\013\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0314\000\052\002\020\003\024\004\043\005\027\013" +
    "\035\040\007\042\017\056\005\071\033\125\023\163\006" +
    "\202\010\204\004\207\016\223\037\226\031\234\026\235" +
    "\014\242\021\243\015\001\001\000\004\015\u0314\001\001" +
    "\000\004\010\u0313\001\001\000\004\010\u0312\001\001\000" +
    "\004\010\u0311\001\001\000\004\010\u0310\001\001\000\004" +
    "\010\u030f\001\001\000\010\006\u029b\072\u0299\073\u0297\001" +
    "\001\000\004\235\u0292\001\001\000\002\001\001\000\012" +
    "\006\u0274\015\u0273\206\u0275\236\u0272\001\001\000\004\010" +
    "\u0271\001\001\000\004\010\u0270\001\001\000\004\010\u026f" +
    "\001\001\000\004\010\u026e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u026b\001\001\000\002\001\001" +
    "\000\012\006\u01d1\126\u01cc\133\u01d4\210\u01d0\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u01ad\057\u01ac" +
    "\001\001\000\004\010\u01ab\001\001\000\004\206\u019f\001" +
    "\001\000\004\010\u019d\001\001\000\004\164\u0108\001\001" +
    "\000\004\010\u0102\001\001\000\010\041\336\046\337\054" +
    "\343\001\001\000\004\010\334\001\001\000\002\001\001" +
    "\000\006\006\216\014\321\001\001\000\006\006\216\014" +
    "\215\001\001\000\046\002\020\005\213\013\035\040\007" +
    "\042\017\056\005\071\033\125\023\163\006\202\010\204" +
    "\004\207\016\223\037\226\031\234\026\235\014\242\021" +
    "\243\015\001\001\000\006\015\102\206\103\001\001\000" +
    "\004\015\047\001\001\000\006\006\100\011\077\001\001" +
    "\000\020\006\061\024\064\034\050\036\054\037\053\206" +
    "\056\224\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\067\225\066\001\001\000\020\006\061" +
    "\024\064\034\050\036\054\037\053\206\056\224\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\074\034\050\036\054\037" +
    "\053\206\073\001\001\000\002\001\001\000\006\006\067" +
    "\225\075\001\001\000\002\001\001\000\004\015\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\166\244\164\001\001\000\004\153\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\150\203\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\050\036\054" +
    "\037\131\001\001\000\002\001\001\000\010\034\050\036" +
    "\054\037\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\050\036\054\037\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\050\036\054\037\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\206\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\152\001\001\000\006\006\150\203\153\001\001\000\002" +
    "\001\001\000\010\034\050\036\054\037\155\001\001\000" +
    "\002\001\001\000\010\034\050\036\054\037\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\050\036" +
    "\054\037\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\172\001\001" +
    "\000\006\006\174\245\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\202\247" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\206\205\001\001\000\006\006\207\246\210\001\001\000" +
    "\004\206\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\207\246\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\313\034\311\001\001\000\004" +
    "\015\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\221\001\001\000\002\001\001\000\030\015\231" +
    "\024\225\025\223\026\232\031\230\032\226\033\227\034" +
    "\050\036\054\037\053\206\073\001\001\000\006\006\243" +
    "\016\310\001\001\000\024\015\231\024\225\031\306\032" +
    "\226\033\227\034\050\036\054\037\053\206\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\234\027\235" +
    "\001\001\000\004\015\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\231\024\225" +
    "\025\240\026\232\031\230\032\226\033\227\034\050\036" +
    "\054\037\053\206\073\001\001\000\006\006\243\016\241" +
    "\001\001\000\002\001\001\000\004\015\244\001\001\000" +
    "\002\001\001\000\004\007\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\262\034\050\036\054\037" +
    "\053\206\073\001\001\000\002\001\001\000\004\034\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\266\021" +
    "\263\023\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\271\015\270\022\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\274\034\050\036" +
    "\054\037\053\206\073\001\001\000\010\006\266\021\275" +
    "\023\265\001\001\000\002\001\001\000\022\015\231\024" +
    "\225\032\305\033\227\034\050\036\054\037\053\206\073" +
    "\001\001\000\022\015\231\024\225\032\300\033\227\034" +
    "\050\036\054\037\053\206\073\001\001\000\002\001\001" +
    "\000\020\015\231\024\225\033\304\034\050\036\054\037" +
    "\053\206\073\001\001\000\020\015\231\024\225\033\303" +
    "\034\050\036\054\037\053\206\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\317\001\001\000\006\006\316\020\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\323\001\001\000\006\006\326\055\325\001\001\000" +
    "\004\015\330\001\001\000\006\006\243\016\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\326\055" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\346\043\363" +
    "\001\001\000\006\006\346\043\360\001\001\000\006\006" +
    "\346\043\347\001\001\000\002\001\001\000\004\015\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\352\044\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\356\045\355\001\001\000\002\001\001\000" +
    "\006\015\352\044\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\361\001\001\000" +
    "\006\006\326\055\362\001\001\000\002\001\001\000\004" +
    "\015\364\001\001\000\012\015\367\047\371\050\370\052" +
    "\365\001\001\000\002\001\001\000\004\015\373\001\001" +
    "\000\006\006\326\055\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\376\051\375" +
    "\001\001\000\004\015\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\170\u0192\171" +
    "\u0191\001\001\000\006\165\u0186\166\u0187\001\001\000\006" +
    "\015\u0179\137\u017a\001\001\000\006\015\u011d\173\u011c\001" +
    "\001\000\004\177\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\200\u010c\201\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u0115\162\u0116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\201\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\u0139\144\u0135\150\u013d\151\u0133\155\u0134\175\u0132\001" +
    "\001\000\006\015\u0125\176\u0126\001\001\000\004\015\u012f" +
    "\001\001\000\004\015\u012d\001\001\000\004\015\u012b\001" +
    "\001\000\006\006\u0129\233\u0128\001\001\000\002\001\001" +
    "\000\006\015\u0125\176\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0129\233\u012c" +
    "\001\001\000\002\001\001\000\006\006\u0129\233\u012e\001" +
    "\001\000\002\001\001\000\006\006\u0129\233\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0170\152\u016f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u015a\161\u0159\001\001\000\002\001" +
    "\001\000\014\024\u016d\034\050\036\054\037\053\206\073" +
    "\001\001\000\004\153\u0166\001\001\000\004\015\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0145\001\001\000\002\001\001\000\004\015" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\u014d\133\u014f\143\u014e\155\u014a\001\001\000\002\001" +
    "\001\000\006\006\u015a\161\u0159\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0152\001\001\000\006\006\326" +
    "\055\u0153\001\001\000\006\006\u0156\123\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u015c\001\001\000\006\006\326\055\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\271\015\270\022\u0161\157\u0160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\u0165\001\001\000\002\001\001\000\010\006\u0169" +
    "\154\u0167\155\u0168\001\001\000\002\001\001\000\010\006" +
    "\u016c\155\u016b\156\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\u0139\144\u0135\150\u0171\151\u0133\155\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\u0173\001\001\000\002\001\001\000\004" +
    "\034\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\u0139\144\u0135\150\u0178\151\u0133\155\u0134\001\001" +
    "\000\002\001\001\000\006\006\u017c\140\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u017f\141\u017e\001\001\000\002\001\001\000\006\006" +
    "\326\055\u0180\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\167\u0189" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0194\001\001" +
    "\000\004\172\u0196\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\u01a1\034\050\036\054\037\053\206\073\001\001\000" +
    "\006\006\u01a4\205\u01a3\001\001\000\004\206\u01a5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\u01a7\034\050\036\054\037\053\206\073\001\001" +
    "\000\006\006\u01a4\205\u01a8\001\001\000\002\001\001\000" +
    "\006\006\u01a4\205\u01aa\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01af\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u01b1\060\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u01b4\001\001\000" +
    "\006\006\u01b8\062\u01b7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u01b8\062\u01ba\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\u01bd\001\001\000\002\001" +
    "\001\000\016\024\u01bf\034\050\036\054\037\053\064\u01c0" +
    "\206\073\001\001\000\006\006\u01c8\065\u01c7\001\001\000" +
    "\002\001\001\000\006\006\u01c4\066\u01c3\001\001\000\004" +
    "\063\u01c5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\u01c9\034\050\036\054\037\053" +
    "\206\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u01c8\065\u01ca\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u023f\127\u0240\001" +
    "\001\000\004\145\u023a\001\001\000\002\001\001\000\004" +
    "\211\u01f8\001\001\000\002\001\001\000\006\015\u01ee\146" +
    "\u01ef\001\001\000\006\015\u0179\137\u01ed\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u01d9\134\u01d8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u01db\001\001\000\002\001\001\000\006\015" +
    "\u01dd\135\u01de\001\001\000\006\006\326\055\u01ec\001\001" +
    "\000\002\001\001\000\006\006\u01e2\136\u01e1\001\001\000" +
    "\004\015\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u01dd\135\u01e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u01dd\135\u01e9\001\001\000\002\001\001\000\006\006" +
    "\u01e2\136\u01eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\u0139\144\u0135\150\u01f1\151\u0133\155\u0134\001\001" +
    "\000\002\001\001\000\006\006\u01f5\147\u01f3\001\001\000" +
    "\002\001\001\000\004\015\u01f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u022b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u01fc" +
    "\001\001\000\002\001\001\000\010\006\u01ff\212\u01fe\213" +
    "\u0201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\153\u0203\001\001\000" +
    "\006\006\u0207\215\u0206\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u020a\214\u020b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\213\u020c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\153\u020f\206\u0211\231\u0212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0215\216\u0214\001\001\000\004\217\u0223\001\001\000\006" +
    "\006\u0218\227\u0216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\002\020" +
    "\004\u021c\005\027\006\u021a\013\035\040\007\042\017\056" +
    "\005\071\033\125\023\163\006\202\010\204\004\207\016" +
    "\223\037\226\031\230\u021b\234\026\235\014\242\021\243" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\020\005\213\013\035\040\007\042\017\056\005\071" +
    "\033\125\023\163\006\202\010\204\004\207\016\223\037" +
    "\226\031\234\026\235\014\242\021\243\015\001\001\000" +
    "\024\015\231\024\225\031\u021e\032\226\033\227\034\050" +
    "\036\054\037\053\206\073\001\001\000\004\010\u021f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\u0139\144\u0135\150\u0229\151\u0133\155\u0134\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u01ff\212\u022c" +
    "\213\u0201\001\001\000\006\006\u0215\216\u022d\001\001\000" +
    "\006\006\u022f\220\u0230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0233\221\u0234\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\020" +
    "\004\u0235\005\027\013\035\040\007\042\017\056\005\071" +
    "\033\125\023\163\006\202\010\204\004\207\016\223\037" +
    "\226\031\234\026\235\014\242\021\243\015\001\001\000" +
    "\052\002\020\005\213\006\u0236\013\035\040\007\042\017" +
    "\056\005\071\033\125\023\163\006\202\010\204\004\207" +
    "\016\222\u0237\223\037\226\031\234\026\235\014\242\021" +
    "\243\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u0245\130\u0241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u024a\131\u0249\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0253\142\u0252\001\001\000\006\006\u024a\131\u0254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0253\142\u0257\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u0253\142" +
    "\u025a\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u0253\142\u025d\001\001\000\002\001\001\000\006\006" +
    "\u0261\132\u0260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u024a\131\u0263\001\001\000" +
    "\002\001\001\000\006\006\u0261\132\u0265\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0253\142\u0268\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0278\237\u0276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u027d" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u027c\240\u027b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\020\004\u027e\005\027\013" +
    "\035\040\007\042\017\056\005\071\033\125\023\163\006" +
    "\202\010\204\004\207\016\223\037\226\031\234\026\235" +
    "\014\242\021\243\015\001\001\000\050\002\020\005\213" +
    "\013\035\040\007\042\017\056\005\071\033\125\023\163" +
    "\006\202\010\204\004\207\016\223\037\226\031\234\026" +
    "\235\014\241\u027f\242\021\243\015\001\001\000\002\001" +
    "\001\000\004\010\u028a\001\001\000\004\010\u0283\001\001" +
    "\000\012\006\u0274\015\u0273\206\u0275\236\u0287\001\001\000" +
    "\002\001\001\000\012\006\u0274\015\u0273\206\u0275\236\u0285" +
    "\001\001\000\004\010\u0286\001\001\000\002\001\001\000" +
    "\004\010\u0288\001\001\000\002\001\001\000\012\006\u0274" +
    "\015\u0273\206\u0275\236\u028e\001\001\000\002\001\001\000" +
    "\012\006\u0274\015\u0273\206\u0275\236\u028c\001\001\000\004" +
    "\010\u028d\001\001\000\002\001\001\000\004\010\u028f\001" +
    "\001\000\002\001\001\000\004\015\u0291\001\001\000\002" +
    "\001\001\000\012\006\u0274\015\u0273\206\u0275\236\u0293\001" +
    "\001\000\004\010\u0294\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\015\u0303\024\225\031" +
    "\u0302\032\226\033\227\034\050\036\054\037\053\074\u0301" +
    "\075\u0300\100\u02ff\206\073\232\u02c1\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u029c\034\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u029f\107" +
    "\u029e\001\001\000\010\006\u02ae\112\u02af\113\u02ad\001\001" +
    "\000\006\006\u02a3\111\u02a2\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u02a6\110\u02a5\001\001\000\002" +
    "\001\001\000\006\015\u029f\107\u02a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u02b3\114\u02fe\001\001\000" +
    "\002\001\001\000\006\006\u02b3\114\u02fd\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\243\016\u02b4\001" +
    "\001\000\006\006\u02b3\114\u02b1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u02b5\116" +
    "\u02b7\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u02b9\117\u02ba\001\001\000\012\015\u02e6\100\u02e8\120" +
    "\u02e7\232\u02c1\001\001\000\002\001\001\000\006\006\u02bd" +
    "\122\u02bc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\u02c4\100\u02c5\232\u02c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0156\123\u02d5" +
    "\001\001\000\006\006\u0156\123\u02d0\001\001\000\002\001" +
    "\001\000\010\006\u02cd\101\u02cc\102\u02ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u02cf\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u02d2\124\u02d3\001" +
    "\001\000\006\006\u02bd\122\u02d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u02d2\124" +
    "\u02d9\001\001\000\020\006\061\024\064\034\050\036\054" +
    "\037\053\206\056\224\u02d7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u02cd\101\u02db" +
    "\102\u02ca\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u02cd\101\u02de\102\u02ca\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u02cd\101\u02e1\102\u02ca\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\u02cd" +
    "\101\u02e4\102\u02ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u02ef\001\001\000\002\001\001\000\004" +
    "\007\u02e9\001\001\000\014\024\u02ea\034\050\036\054\037" +
    "\053\206\073\001\001\000\010\006\u02ed\023\u02ec\121\u02eb" +
    "\001\001\000\002\001\001\000\012\015\u02e6\100\u02e8\120" +
    "\u02ee\232\u02c1\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\u02f0\034\050\036\054\037\053\206\073\001" +
    "\001\000\010\006\u02ed\023\u02ec\121\u02f1\001\001\000\002" +
    "\001\001\000\004\015\u02f3\001\001\000\006\006\326\055" +
    "\u02f4\001\001\000\002\001\001\000\004\015\u02f6\001\001" +
    "\000\006\006\u02a3\111\u02f7\001\001\000\002\001\001\000" +
    "\004\015\u02f9\001\001\000\002\001\001\000\004\015\u02fb" +
    "\001\001\000\010\006\u02ae\112\u02fc\113\u02ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0308\103\u0307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\231" +
    "\024\225\031\u0305\032\226\033\227\034\050\036\054\037" +
    "\053\206\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u030b\076\u030a\001\001\000\002\001\001\000" +
    "\010\006\u029b\072\u030c\073\u0297\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\061\024\064\034\050\036\054\037\053\206\056\224\u0315" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public int cont = 0;
    public String errores="";
    
    public void syntax_error(Symbol s){
         errores +="Error de sintaxis. Linea: " + (s.right + 1) +" Columna: " + s.left + ". Texto: \"" + s.value + "\"\n";
    }

    public Symbol getS(){
        return this.s;
}

public void unrecovered_syntax_error(Symbol s){ 
   report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= querys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // querys ::= querys sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // querys ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= eliminar fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= update fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= truncate fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= drop fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= insert fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= select fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= create fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= alter fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= procedure fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sets fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= declares fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= exec fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= functions fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= begin_transaction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= save_point 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= cursor fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cursor ::= DECLARE objeto_nombre tipo_cursor CURSOR FOR select abrir_cursor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cursor",161, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // abrir_cursor ::= OPEN objeto_nombre FETCH NEXT FROM tipo_fetch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("abrir_cursor",163, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // abrir_cursor ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("abrir_cursor",163, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_cursor ::= INSENSITIVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cursor",162, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_cursor ::= SCROLL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cursor",162, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_cursor ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cursor",162, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_fetch ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fetch",165, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_fetch ::= objeto_nombre INTO VARIABLES mas_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fetch",165, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mas_variables ::= COMA VARIABLES mas_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_variables",164, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mas_variables ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_variables",164, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // begin_transaction ::= trans transaction_name with_trans fin querys fin_transaction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_transaction",154, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // trans ::= BEGIN TRAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trans",155, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // trans ::= BEGIN TRANSACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trans",155, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // transaction_name ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // transaction_name ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // transaction_name ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transaction_name",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // with_trans ::= WITH MARK description 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_trans",157, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // with_trans ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_trans",157, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // description ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("description",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // description ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("description",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fin_transaction ::= COMMIT fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fin_transaction ::= COMMIT TRAN transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fin_transaction ::= COMMIT TRANSACTION transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fin_transaction ::= ROLLBACK fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fin_transaction ::= ROLLBACK TRAN transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fin_transaction ::= ROLLBACK TRANSACTION transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_transaction",159, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // save_point ::= SAVE trans transaction_name fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("save_point",160, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // functions ::= CREATE alterar FUNCTION objeto_nombre PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO RETURNS tipo_retorno with_procedure as BEGIN interno_funcion RETURN E fin END 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",148, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // as ::= AS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // as ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_retorno ::= tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_retorno ::= VARIABLES TABLE PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_retorno ::= TABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamar_funciones ::= objeto_nombre PARENTESIS_ABIERTO enviar_datos PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funciones",152, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // interno_funcion ::= querys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interno_funcion",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // interno_funcion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interno_funcion",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exec ::= EXECUTE objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exec ::= EXEC objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // enviar_datos ::= VARIABLES ASIGNAR data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // enviar_datos ::= data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // enviar_datos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mandar_mas ::= COMA enviar_datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mandar_mas ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sets ::= SET VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sets ::= SET NOCOUNT ON sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sets2 ::= COMA VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sets2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declares ::= DECLARE VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declares2 ::= COMA VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declares2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure ::= CREATE alterar proc objeto_nombre parametros with_procedure replication AS empezar querys final 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",133, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alterar ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // alterar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // proc ::= PROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros ::= parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros1 ::= ARROBA IDENTIFICADOR tipo_dato tipo_parametro parametros2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros1",137, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros2 ::= COMA parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_parametro ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_parametro ::= READONLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_parametro ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // with_procedure ::= WITH procedure_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // with_procedure ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_option ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_option ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // procedure_option ::= EXECUTE AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // replication ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // replication ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // empezar ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // empezar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // final ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // final ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // alter ::= ALTER opciones 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opciones ::= DATABASE database_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opciones ::= INDEX index_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opciones ::= TABLE table_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opciones ::= USER user_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opciones ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // database_alter ::= nombre_actual tipo_alter_base 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_alter",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // nombre_actual ::= CURRENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // nombre_actual ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo_alter_base ::= MODIFY NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo_alter_base ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // index_alter ::= nombre_index ON objeto_nombre accion_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_alter",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // nombre_index ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nombre_index ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // accion_index ::= REBUILD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // accion_index ::= DISABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // accion_index ::= REORGANIZE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // accion_index ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // accion_index ::= RESUME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // accion_index ::= PAUSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // accion_index ::= ABORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // table_alter ::= objeto_nombre accion_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_alter",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // accion_alter ::= ALTER COLUMN add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // accion_alter ::= ADD tipo_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // accion_alter ::= DROP drop_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo_add ::= add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_add",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // drop_column ::= CONSTRAINT objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // drop_column ::= COLUMN objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // drop_column ::= INDEX objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // drop_column ::= objeto_nombre mas_drop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // mas_drop ::= COMA drop_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_drop",153, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mas_drop ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_drop",153, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // user_alter ::= IDENTIFICADOR WITH set_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_alter",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // set_item ::= set_item1 set_item2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // set_item1 ::= NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // set_item1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // set_item1 ::= LOGIN ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // set_item1 ::= PASSWORD ASIGNAR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // set_item2 ::= COMA set_item1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // set_item2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // create ::= CREATE opciones_crear 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // opciones_crear ::= DATABASE database_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // opciones_crear ::= opciones_index INDEX index_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // opciones_crear ::= TABLE table_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // opciones_crear ::= USER user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // opciones_crear ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // database_create ::= objeto_nombre extras_database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_create",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // extras_database ::= ON PRIMARY PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // extras_database ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // extras_database ::= WITH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // extras_database ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // filespec ::= NAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // filespec ::= NAMES ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // filespec ::= FILE ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // filespec ::= FILENAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // filespec ::= SIZE ASIGNAR INT_NUM mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // filespec ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // mas_file2 ::= COMA filespec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // mas_file2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // mas_file ::= COMA PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // mas_file ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opciones_index ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // opciones_index ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // opciones_index ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // opciones_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // index_create ::= objeto_nombre ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_create",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // column_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_index",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // mas_index ::= INCLUDE PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // mas_index ::= ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // mas_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // view_create ::= objeto_nombre column_view AS select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_create",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // column_view ::= PARENTESIS_ABIERTO column_view1 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // column_view ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // column_view1 ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // user ::= IDENTIFICADOR FOR LOGIN IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // table_create ::= objeto_nombre PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO extra_create_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_create",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // extra_create_table ::= ON objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // extra_create_table ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // extra_create_table ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // add_column ::= add_column1 add_column2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // add_column1 ::= objeto_nombre tipo_dato constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // add_column1 ::= aux2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // add_column2 ::= COMA add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // add_column2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipo_dato ::= CHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipo_dato ::= VARCHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipo_dato ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo_dato ::= IMAGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo_dato ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipo_dato ::= VARBINARY PARENTESIS_ABIERTO MAX PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipo_dato ::= DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // tipo_dato ::= DATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // tipo_dato ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tipo_dato ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // tipo_dato ::= TIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tipo_dato ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tipo_dato ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tipo_dato ::= FLOAT PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tipo_dato ::= MONEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tipo_dato ::= BIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tipo_dato ::= DECIMAL PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipo_dato ::= NUMERIC PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // constraint ::= constraint1 constraint2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // constraint ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // constraint1 ::= IDENTITY PARENTESIS_ABIERTO NUM COMA NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // constraint1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // constraint1 ::= UNIQUE extra_unique 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // constraint1 ::= PRIMARY KEY extra_primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // constraint1 ::= FOREIGN KEY PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO REFERENCES objeto_nombre PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // constraint1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // constraint1 ::= CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // constraint1 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // extra_unique ::= PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // extra_unique ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // extra_primary ::= opciones_index PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto tipo_orden PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // extra_primary ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // constraint2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // constraint2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expresion_logica ::= otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // aux2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // aux2 ::= CONSTRAINT objeto_nombre constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // select ::= SELECT option_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // option_select ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // option_select ::= seleccion columna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // seleccion ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // seleccion ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // seleccion ::= TOP expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // seleccion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // columna1 ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // columna1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // columna1 ::= objeto_nombre ASIGNAR E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // columna2 ::= COMA option_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // columna2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // data_tipo_operacion ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // data_tipo_operacion ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // funciones ::= AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // funciones ::= COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funciones ::= MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // funciones ::= MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funciones ::= llamar_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // valor ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // valor ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // valor ::= puede objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // puede ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // puede ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // alias_columna ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // alias_columna ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // alias_columna ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // operacion ::= operacion_matematica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // operacion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // operacion_matematica ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_matematica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // operacion_logica ::= data_tipo_operacion operadores data_tipo_operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // operador ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // origen ::= objeto_nombre alias_tabla origen1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // origen1 ::= COMA origen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // origen1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // alias_tabla ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // alias_tabla ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // alias_tabla ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // alias_tabla ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // joins ::= tipo_join JOIN objeto_nombre alias_tabla ON objeto_nombre ASIGNAR objeto_nombre joins 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // joins ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // tipo_join ::= INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // tipo_join ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // tipo_join1 ::= OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // tipo_join1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // agrupado ::= GROUP BY objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // agrupado ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // teniendo ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // teniendo1 ::= funciones operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // teniendo1 ::= objeto_nombre operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // teniendo2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // orden ::= ORDER BY objeto_nombre tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // orden ::= ORDER BY funciones tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // tipo_orden ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // tipo_orden ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // tipo_orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // orden2 ::= COMA orden 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // orden2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // insert ::= INSERT into objeto_nombre campos VALUES valores 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // insert ::= INSERT into objeto_nombre campos DEFAULT VALUES 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // into ::= INTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // into ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // campos ::= PARENTESIS_ABIERTO campos2 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // campos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // campos2 ::= IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // mas_de_un_identificador ::= COMA IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // mas_de_un_identificador ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // valores ::= PARENTESIS_ABIERTO valores2 PARENTESIS_CERRADO mas_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // valores2 ::= data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // mas_valores2 ::= COMA data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // mas_valores2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // mas_valores ::= COMA valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // mas_valores ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // drop ::= DROP tipo_objeto 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // if_op ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // if_op ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // tipo_objeto ::= TABLE if_op tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // tipo_objeto ::= index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // tipo_objeto ::= database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // tipo_objeto ::= PROCEDURE objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // tipo_objeto ::= FUNCTION objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // tabla ::= objeto_nombre tabla2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // tabla2 ::= COMA tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // tabla2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // index ::= INDEX if_op objeto_nombre index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // index2 ::= drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // index2 ::= drop_backward_compatible_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // drop_relational_or_xml_or_spatial_index ::= ON objeto_nombre drop_relational_or_xml_or_spatial_index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // drop_relational_or_xml_or_spatial_index2 ::= COMA objeto_nombre drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // drop_relational_or_xml_or_spatial_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // drop_backward_compatible_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // drop_backward_compatible_index2 ::= mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // drop_backward_compatible_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // database ::= DATABASE if_op objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // mas_de_un_objeto ::= COMA objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // mas_de_un_objeto ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // truncate ::= TRUNCATE TABLE objeto_nombre 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("truncate",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // update ::= UPDATE opciones_delete objeto_nombre SET objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // asignaciones ::= asignaciones1 asignaciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // asignaciones2 ::= COMA objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // asignaciones2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // asignaciones1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // E ::= E SUMA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // E ::= E RESTA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // T ::= T MULTIPLICACION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // T ::= T DIVISION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // T ::= F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // F ::= PARENTESIS_ABIERTO E PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // F ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // F ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // NUM ::= INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NUM ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // FLOTANTE ::= FLOAT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOTANTE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // VALORES_NUMEROS ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // VALORES_NUMEROS ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // eliminar ::= DELETE opciones_delete FROM objeto_nombre mas_de_un_objeto condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // fin ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // fin ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // opciones_delete ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // opciones_delete ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // expresion ::= PARENTESIS_ABIERTO NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // expresion ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // porcentaje ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // porcentaje ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // condicionales ::= WHERE objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // condicionales ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // condicionales1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // otra_condicion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // otra_condicion ::= objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // data_tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // data_tipo ::= VALORES_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // data_tipo ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // data_tipo ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // VARIABLES ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",132, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // operadores ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // operadores ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // operadores ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // operadores ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // operadores ::= DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // operadores ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // operadores ::= BETWEEN NUM AND INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // operadores ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // operadores ::= IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // objeto_nombre ::= IDENTIFICADOR objeto_nombre1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // objeto_nombre1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // objeto_nombre1 ::= PUNTO objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // objeto_nombre2 ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // objeto_nombre2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
