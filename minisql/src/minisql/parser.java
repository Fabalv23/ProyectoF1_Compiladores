
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package minisql;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\002\002\004\000\002\006\002\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\223\005" +
    "\000\002\223\005\000\002\224\006\000\002\224\004\000" +
    "\002\224\003\000\002\225\004\000\002\225\003\000\002" +
    "\204\007\000\002\204\006\000\002\205\007\000\002\205" +
    "\003\000\002\202\006\000\002\203\006\000\002\203\003" +
    "\000\002\207\015\000\002\210\004\000\002\210\003\000" +
    "\002\211\003\000\002\211\003\000\002\212\003\000\002" +
    "\212\003\000\002\213\007\000\002\214\004\000\002\214" +
    "\003\000\002\215\003\000\002\215\003\000\002\215\003" +
    "\000\002\215\003\000\002\216\004\000\002\216\003\000" +
    "\002\217\003\000\002\217\003\000\002\217\005\000\002" +
    "\220\004\000\002\220\003\000\002\221\003\000\002\221" +
    "\003\000\002\222\003\000\002\222\003\000\002\163\004" +
    "\000\002\164\004\000\002\164\004\000\002\164\004\000" +
    "\002\164\004\000\002\164\004\000\002\165\004\000\002" +
    "\166\003\000\002\166\003\000\002\167\006\000\002\167" +
    "\004\000\002\170\006\000\002\171\003\000\002\171\003" +
    "\000\002\172\003\000\002\172\003\000\002\172\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\173\004\000\002\174\005\000\002\174" +
    "\004\000\002\174\004\000\002\175\003\000\002\176\004" +
    "\000\002\176\004\000\002\176\004\000\002\177\005\000" +
    "\002\200\004\000\002\201\005\000\002\201\003\000\002" +
    "\201\005\000\002\201\005\000\002\162\004\000\002\162" +
    "\003\000\002\125\004\000\002\126\004\000\002\126\005" +
    "\000\002\126\004\000\002\126\004\000\002\126\004\000" +
    "\002\127\004\000\002\130\010\000\002\130\004\000\002" +
    "\130\003\000\002\130\003\000\002\131\006\000\002\131" +
    "\006\000\002\131\006\000\002\131\006\000\002\131\006" +
    "\000\002\131\003\000\002\142\004\000\002\142\003\000" +
    "\002\132\007\000\002\132\003\000\002\133\003\000\002" +
    "\133\003\000\002\133\003\000\002\133\003\000\002\134" +
    "\011\000\002\135\004\000\002\136\006\000\002\136\003" +
    "\000\002\137\006\000\002\140\005\000\002\140\003\000" +
    "\002\141\004\000\002\145\006\000\002\146\007\000\002" +
    "\147\004\000\002\147\004\000\002\147\003\000\002\150" +
    "\004\000\002\151\005\000\002\151\003\000\002\152\004" +
    "\000\002\152\003\000\002\153\006\000\002\153\006\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\153\006\000\002\153\003\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\153\003\000\002\153\003" +
    "\000\002\153\003\000\002\153\006\000\002\153\003\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\153\010\000\002\153\010\000\002\154\004\000\002\154" +
    "\003\000\002\155\010\000\002\155\003\000\002\155\004" +
    "\000\002\155\005\000\002\155\014\000\002\155\004\000" +
    "\002\155\006\000\002\155\004\000\002\161\006\000\002" +
    "\161\003\000\002\143\010\000\002\143\003\000\002\156" +
    "\003\000\002\156\003\000\002\157\003\000\002\144\003" +
    "\000\002\144\005\000\002\071\013\000\002\072\003\000" +
    "\002\072\004\000\002\073\003\000\002\073\003\000\002" +
    "\073\004\000\002\073\003\000\002\074\005\000\002\075" +
    "\003\000\002\075\003\000\002\075\005\000\002\076\004" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\100\006\000\002\100\006\000\002\100\006\000\002" +
    "\100\006\000\002\100\006\000\002\101\003\000\002\101" +
    "\003\000\002\101\004\000\002\102\003\000\002\102\003" +
    "\000\002\103\004\000\002\103\004\000\002\103\003\000" +
    "\002\104\003\000\002\104\003\000\002\105\003\000\002" +
    "\067\005\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\107\005" +
    "\000\002\110\004\000\002\110\003\000\002\111\004\000" +
    "\002\111\004\000\002\111\003\000\002\111\003\000\002" +
    "\112\013\000\002\112\003\000\002\113\003\000\002\113" +
    "\004\000\002\113\004\000\002\113\004\000\002\113\003" +
    "\000\002\114\003\000\002\114\003\000\002\116\006\000" +
    "\002\116\003\000\002\117\004\000\002\117\003\000\002" +
    "\120\006\000\002\120\006\000\002\121\004\000\002\121" +
    "\003\000\002\122\007\000\002\122\007\000\002\122\003" +
    "\000\002\123\003\000\002\123\003\000\002\123\003\000" +
    "\002\124\004\000\002\124\003\000\002\056\010\000\002" +
    "\056\010\000\002\057\003\000\002\057\003\000\002\060" +
    "\005\000\002\060\003\000\002\061\004\000\002\062\005" +
    "\000\002\062\003\000\002\063\006\000\002\064\004\000" +
    "\002\065\005\000\002\065\003\000\002\066\004\000\002" +
    "\066\003\000\002\042\004\000\002\043\004\000\002\043" +
    "\003\000\002\041\005\000\002\041\003\000\002\041\003" +
    "\000\002\044\004\000\002\045\004\000\002\045\003\000" +
    "\002\046\006\000\002\047\003\000\002\047\003\000\002" +
    "\050\005\000\002\051\005\000\002\051\003\000\002\052" +
    "\004\000\002\053\003\000\002\053\003\000\002\054\006" +
    "\000\002\055\005\000\002\055\003\000\002\040\005\000" +
    "\002\002\012\000\002\025\004\000\002\027\007\000\002" +
    "\027\003\000\002\026\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\013" +
    "\007\000\002\010\003\000\002\010\003\000\002\014\005" +
    "\000\002\014\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\016\007\000\002" +
    "\016\003\000\002\021\004\000\002\021\003\000\002\022" +
    "\003\000\002\022\006\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\206\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\006\000\002\007\003" +
    "\000\002\007\003\000\002\015\004\000\002\011\003\000" +
    "\002\011\004\000\002\012\004\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u029f\000\034\003\032\004\034\037\024\045\033\046" +
    "\013\050\030\060\023\064\012\111\021\167\026\213\037" +
    "\216\036\217\004\001\002\000\004\035\040\001\002\000" +
    "\006\012\267\013\270\001\002\000\006\012\267\013\270" +
    "\001\002\000\006\012\267\013\270\001\002\000\006\012" +
    "\267\013\270\001\002\000\006\012\267\013\270\001\002" +
    "\000\044\006\u022a\007\000\020\000\031\000\032\000\034" +
    "\000\035\000\043\u0226\056\000\065\u0225\066\000\067\000" +
    "\070\000\071\000\072\000\074\u0228\205\000\001\002\000" +
    "\004\047\u0223\001\002\000\006\012\267\013\270\001\002" +
    "\000\006\012\267\013\270\001\002\000\006\012\267\013" +
    "\270\001\002\000\006\012\267\013\270\001\002\000\004" +
    "\002\u021e\001\002\000\030\017\u01a9\047\u01a6\051\000\052" +
    "\u01a1\112\u01a2\123\u01a7\137\u01a3\140\u0121\141\u0125\203\000" +
    "\204\000\001\002\000\044\002\ufffd\003\ufffd\004\ufffd\012" +
    "\ufffd\013\ufffd\037\ufffd\045\ufffd\046\ufffd\050\ufffd\060\ufffd" +
    "\064\ufffd\111\ufffd\167\ufffd\213\ufffd\215\ufffd\216\ufffd\217" +
    "\ufffd\001\002\000\006\035\000\062\u0182\001\002\000\006" +
    "\124\u0173\205\055\001\002\000\006\012\267\013\270\001" +
    "\002\000\014\047\343\051\340\052\341\112\344\123\342" +
    "\001\002\000\006\012\267\013\270\001\002\000\010\047" +
    "\276\051\274\052\275\001\002\000\006\012\267\013\270" +
    "\001\002\000\044\002\ufff0\003\ufff0\004\ufff0\012\ufff0\013" +
    "\ufff0\037\ufff0\045\ufff0\046\ufff0\050\ufff0\060\ufff0\064\ufff0" +
    "\111\ufff0\167\ufff0\213\ufff0\215\ufff0\216\ufff0\217\ufff0\001" +
    "\002\000\006\006\156\035\000\001\002\000\006\005\000" +
    "\006\156\001\002\000\036\002\uffff\003\032\004\034\037" +
    "\024\045\033\046\013\050\030\060\023\064\012\111\021" +
    "\167\026\213\037\216\036\217\004\001\002\000\004\205" +
    "\055\001\002\000\004\035\040\001\002\000\242\005\000" +
    "\007\000\010\000\011\070\012\000\013\000\015\000\020" +
    "\000\021\000\022\000\023\000\024\000\025\000\027\000" +
    "\030\000\031\000\032\000\033\000\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\044\000" +
    "\050\000\055\000\056\000\061\000\063\000\073\000\075" +
    "\000\076\000\077\000\100\000\101\000\103\000\105\000" +
    "\106\000\107\000\110\000\113\000\114\000\115\000\125" +
    "\000\127\000\131\000\132\000\136\000\137\000\144\000" +
    "\145\000\146\000\147\000\150\000\151\000\152\000\153" +
    "\000\154\000\155\000\156\000\157\000\160\000\161\000" +
    "\162\000\163\000\164\000\165\000\166\000\167\000\172" +
    "\000\173\000\174\000\175\000\176\000\177\000\202\000" +
    "\205\000\001\002\000\022\012\000\013\000\020\051\031" +
    "\052\032\043\034\046\056\044\205\055\001\002\000\062" +
    "\005\ufed6\010\ufed6\012\ufed6\013\ufed6\015\ufed6\016\ufed6\017" +
    "\ufed6\040\ufed6\041\ufed6\042\ufed6\043\ufed6\044\ufed6\056\ufed6" +
    "\063\ufed6\073\ufed6\103\ufed6\105\ufed6\106\ufed6\113\ufed6\125" +
    "\ufed6\127\ufed6\131\ufed6\132\ufed6\137\ufed6\001\002\000\114" +
    "\005\ufed8\007\ufed8\010\ufed8\012\ufed8\013\ufed8\014\ufed8\015" +
    "\ufed8\016\ufed8\017\ufed8\020\ufed8\031\ufed8\032\ufed8\034\ufed8" +
    "\035\ufed8\040\ufed8\041\ufed8\042\ufed8\043\ufed8\044\ufed8\056" +
    "\ufed8\063\ufed8\066\ufed8\067\ufed8\070\ufed8\071\ufed8\072\ufed8" +
    "\073\ufed8\103\ufed8\105\ufed8\106\ufed8\113\ufed8\125\ufed8\127" +
    "\ufed8\131\ufed8\132\ufed8\137\ufed8\205\ufed8\001\002\000\062" +
    "\005\ufec1\010\ufec1\012\ufec1\013\ufec1\015\ufec1\016\ufec1\017" +
    "\ufec1\040\ufec1\041\ufec1\042\ufec1\043\ufec1\044\ufec1\056\ufec1" +
    "\063\ufec1\073\ufec1\103\ufec1\105\ufec1\106\ufec1\113\ufec1\125" +
    "\ufec1\127\ufec1\131\ufec1\132\ufec1\137\ufec1\001\002\000\062" +
    "\005\ufed5\010\ufed5\012\ufed5\013\ufed5\015\ufed5\016\ufed5\017" +
    "\ufed5\040\ufed5\041\ufed5\042\ufed5\043\ufed5\044\ufed5\056\ufed5" +
    "\063\ufed5\073\ufed5\103\ufed5\105\ufed5\106\ufed5\113\ufed5\125" +
    "\ufed5\127\ufed5\131\ufed5\132\ufed5\137\ufed5\001\002\000\062" +
    "\005\ufed7\010\ufed7\012\ufed7\013\ufed7\015\ufed7\016\ufed7\017" +
    "\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7\044\ufed7\056\ufed7" +
    "\063\ufed7\073\ufed7\103\ufed7\105\ufed7\106\ufed7\113\ufed7\125" +
    "\ufed7\127\ufed7\131\ufed7\132\ufed7\137\ufed7\001\002\000\062" +
    "\005\ufec2\010\ufec2\012\ufec2\013\ufec2\015\ufec2\016\ufec2\017" +
    "\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2\044\ufec2\056\ufec2" +
    "\063\ufec2\073\ufec2\103\ufec2\105\ufec2\106\ufec2\113\ufec2\125" +
    "\ufec2\127\ufec2\131\ufec2\132\ufec2\137\ufec2\001\002\000\012" +
    "\012\ufec0\013\ufec0\036\064\040\ufec0\001\002\000\062\005" +
    "\ufec3\010\ufec3\012\ufec3\013\ufec3\015\ufec3\016\ufec3\017\ufec3" +
    "\040\ufec3\041\ufec3\042\ufec3\043\ufec3\044\ufec3\056\ufec3\063" +
    "\ufec3\073\ufec3\103\ufec3\105\ufec3\106\ufec3\113\ufec3\125\ufec3" +
    "\127\ufec3\131\ufec3\132\ufec3\137\ufec3\001\002\000\114\005" +
    "\ufed9\007\ufed9\010\ufed9\012\ufed9\013\ufed9\014\ufed9\015\ufed9" +
    "\016\ufed9\017\ufed9\020\ufed9\031\ufed9\032\ufed9\034\ufed9\035" +
    "\ufed9\040\ufed9\041\ufed9\042\ufed9\043\ufed9\044\ufed9\056\ufed9" +
    "\063\ufed9\066\ufed9\067\ufed9\070\ufed9\071\ufed9\072\ufed9\073" +
    "\ufed9\103\ufed9\105\ufed9\106\ufed9\113\ufed9\125\ufed9\127\ufed9" +
    "\131\ufed9\132\ufed9\137\ufed9\205\ufed9\001\002\000\006\012" +
    "\uffeb\013\uffeb\001\002\000\006\012\uffef\013\uffef\001\002" +
    "\000\004\035\063\001\002\000\010\012\000\013\000\040" +
    "\057\001\002\000\022\012\000\013\000\020\051\031\052" +
    "\032\043\034\046\056\044\205\055\001\002\000\006\012" +
    "\uffec\013\uffec\001\002\000\006\012\uffe9\013\uffe9\001\002" +
    "\000\006\012\uffea\013\uffea\001\002\000\132\005\ufebf\010" +
    "\ufebf\012\ufebf\013\ufebf\015\ufebf\016\ufebf\017\ufebf\033\ufebf" +
    "\036\ufebf\040\ufebf\041\ufebf\042\ufebf\043\ufebf\044\ufebf\056" +
    "\ufebf\063\ufebf\073\ufebf\103\ufebf\105\ufebf\106\ufebf\113\ufebf" +
    "\125\ufebf\127\ufebf\131\ufebf\132\ufebf\137\ufebf\145\ufebf\146" +
    "\ufebf\147\ufebf\150\ufebf\151\ufebf\152\ufebf\153\ufebf\154\ufebf" +
    "\155\ufebf\156\ufebf\157\ufebf\160\ufebf\161\ufebf\162\ufebf\163" +
    "\ufebf\164\ufebf\165\ufebf\166\ufebf\001\002\000\016\020\051" +
    "\031\052\032\043\034\046\056\044\205\055\001\002\000" +
    "\062\005\ufec0\010\ufec0\012\ufec0\013\ufec0\015\ufec0\016\ufec0" +
    "\017\ufec0\040\ufec0\041\ufec0\042\ufec0\043\ufec0\044\ufec0\056" +
    "\ufec0\063\ufec0\073\ufec0\103\ufec0\105\ufec0\106\ufec0\113\ufec0" +
    "\125\ufec0\127\ufec0\131\ufec0\132\ufec0\137\ufec0\001\002\000" +
    "\010\012\000\013\000\040\057\001\002\000\006\012\uffed" +
    "\013\uffed\001\002\000\004\035\040\001\002\000\240\005" +
    "\ufeb5\007\ufeb5\010\ufeb5\012\ufeb5\013\ufeb5\015\ufeb5\020\ufeb5" +
    "\021\ufeb5\022\ufeb5\023\ufeb5\024\ufeb5\025\ufeb5\027\ufeb5\030" +
    "\ufeb5\031\ufeb5\032\ufeb5\033\ufeb5\034\ufeb5\035\ufeb5\036\ufeb5" +
    "\037\ufeb5\040\ufeb5\041\ufeb5\042\ufeb5\043\ufeb5\044\ufeb5\050" +
    "\ufeb5\055\ufeb5\056\ufeb5\061\ufeb5\063\ufeb5\073\ufeb5\075\ufeb5" +
    "\076\ufeb5\077\ufeb5\100\ufeb5\101\ufeb5\103\ufeb5\105\ufeb5\106" +
    "\ufeb5\107\ufeb5\110\ufeb5\113\ufeb5\114\ufeb5\115\ufeb5\125\ufeb5" +
    "\127\ufeb5\131\ufeb5\132\ufeb5\136\ufeb5\137\ufeb5\144\ufeb5\145" +
    "\ufeb5\146\ufeb5\147\ufeb5\150\ufeb5\151\ufeb5\152\ufeb5\153\ufeb5" +
    "\154\ufeb5\155\ufeb5\156\ufeb5\157\ufeb5\160\ufeb5\161\ufeb5\162" +
    "\ufeb5\163\ufeb5\164\ufeb5\165\ufeb5\166\ufeb5\167\ufeb5\172\ufeb5" +
    "\173\ufeb5\174\ufeb5\175\ufeb5\176\ufeb5\177\ufeb5\202\ufeb5\205" +
    "\ufeb5\001\002\000\240\005\ufeb4\007\ufeb4\010\ufeb4\012\ufeb4" +
    "\013\ufeb4\015\ufeb4\020\ufeb4\021\ufeb4\022\ufeb4\023\ufeb4\024" +
    "\ufeb4\025\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\032\ufeb4\033\ufeb4" +
    "\034\ufeb4\035\ufeb4\036\ufeb4\037\ufeb4\040\ufeb4\041\ufeb4\042" +
    "\ufeb4\043\ufeb4\044\ufeb4\050\ufeb4\055\ufeb4\056\ufeb4\061\ufeb4" +
    "\063\ufeb4\073\ufeb4\075\ufeb4\076\ufeb4\077\ufeb4\100\ufeb4\101" +
    "\ufeb4\103\ufeb4\105\ufeb4\106\ufeb4\107\ufeb4\110\ufeb4\113\ufeb4" +
    "\114\ufeb4\115\ufeb4\125\ufeb4\127\ufeb4\131\ufeb4\132\ufeb4\136" +
    "\ufeb4\137\ufeb4\144\ufeb4\145\ufeb4\146\ufeb4\147\ufeb4\150\ufeb4" +
    "\151\ufeb4\152\ufeb4\153\ufeb4\154\ufeb4\155\ufeb4\156\ufeb4\157" +
    "\ufeb4\160\ufeb4\161\ufeb4\162\ufeb4\163\ufeb4\164\ufeb4\165\ufeb4" +
    "\166\ufeb4\167\ufeb4\172\ufeb4\173\ufeb4\174\ufeb4\175\ufeb4\176" +
    "\ufeb4\177\ufeb4\202\ufeb4\205\ufeb4\001\002\000\240\005\ufeb3" +
    "\007\ufeb3\010\ufeb3\012\ufeb3\013\ufeb3\015\ufeb3\020\ufeb3\021" +
    "\ufeb3\022\ufeb3\023\ufeb3\024\ufeb3\025\ufeb3\027\ufeb3\030\ufeb3" +
    "\031\ufeb3\032\ufeb3\033\ufeb3\034\ufeb3\035\ufeb3\036\ufeb3\037" +
    "\ufeb3\040\ufeb3\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\050\ufeb3" +
    "\055\ufeb3\056\ufeb3\061\ufeb3\063\ufeb3\073\ufeb3\075\ufeb3\076" +
    "\ufeb3\077\ufeb3\100\ufeb3\101\ufeb3\103\ufeb3\105\ufeb3\106\ufeb3" +
    "\107\ufeb3\110\ufeb3\113\ufeb3\114\ufeb3\115\ufeb3\125\ufeb3\127" +
    "\ufeb3\131\ufeb3\132\ufeb3\136\ufeb3\137\ufeb3\144\ufeb3\145\ufeb3" +
    "\146\ufeb3\147\ufeb3\150\ufeb3\151\ufeb3\152\ufeb3\153\ufeb3\154" +
    "\ufeb3\155\ufeb3\156\ufeb3\157\ufeb3\160\ufeb3\161\ufeb3\162\ufeb3" +
    "\163\ufeb3\164\ufeb3\165\ufeb3\166\ufeb3\167\ufeb3\172\ufeb3\173" +
    "\ufeb3\174\ufeb3\175\ufeb3\176\ufeb3\177\ufeb3\202\ufeb3\205\ufeb3" +
    "\001\002\000\050\033\077\145\102\146\107\147\116\150" +
    "\101\151\111\152\104\153\100\154\105\155\114\156\113" +
    "\157\076\160\115\161\110\162\075\163\120\164\112\165" +
    "\103\166\117\001\002\000\046\010\uff6a\012\uff6a\013\uff6a" +
    "\040\uff6a\056\uff6a\063\uff6a\073\uff6a\113\uff6a\115\uff6a\125" +
    "\uff6a\127\uff6a\131\uff6a\132\uff6a\137\uff6a\144\uff6a\206\uff6a" +
    "\207\uff6a\210\uff6a\001\002\000\046\010\uff6d\012\uff6d\013" +
    "\uff6d\040\uff6d\056\uff6d\063\uff6d\073\uff6d\113\uff6d\115\uff6d" +
    "\125\uff6d\127\uff6d\131\uff6d\132\uff6d\137\uff6d\144\uff6d\206" +
    "\uff6d\207\uff6d\210\uff6d\001\002\000\046\010\uff67\012\uff67" +
    "\013\uff67\040\uff67\056\uff67\063\uff67\073\uff67\113\uff67\115" +
    "\uff67\125\uff67\127\uff67\131\uff67\132\uff67\137\uff67\144\uff67" +
    "\206\uff67\207\uff67\210\uff67\001\002\000\046\010\uff71\012" +
    "\uff71\013\uff71\040\uff71\056\uff71\063\uff71\073\uff71\113\uff71" +
    "\115\uff71\125\uff71\127\uff71\131\uff71\132\uff71\137\uff71\144" +
    "\uff71\206\uff71\207\uff71\210\uff71\001\002\000\046\010\uff75" +
    "\012\uff75\013\uff75\040\uff75\056\uff75\063\uff75\073\uff75\113" +
    "\uff75\115\uff75\125\uff75\127\uff75\131\uff75\132\uff75\137\uff75" +
    "\144\uff75\206\uff75\207\uff75\210\uff75\001\002\000\004\007" +
    "\152\001\002\000\004\007\145\001\002\000\046\010\uff72" +
    "\012\uff72\013\uff72\040\uff72\056\uff72\063\uff72\073\uff72\113" +
    "\uff72\115\uff72\125\uff72\127\uff72\131\uff72\132\uff72\137\uff72" +
    "\144\uff72\206\uff72\207\uff72\210\uff72\001\002\000\046\010" +
    "\uff70\012\uff70\013\uff70\040\uff70\056\uff70\063\uff70\073\uff70" +
    "\113\uff70\115\uff70\125\uff70\127\uff70\131\uff70\132\uff70\137" +
    "\uff70\144\uff70\206\uff70\207\uff70\210\uff70\001\002\000\010" +
    "\012\000\013\000\040\137\001\002\000\004\007\134\001" +
    "\002\000\004\007\131\001\002\000\050\007\126\010\uff74" +
    "\012\uff74\013\uff74\040\uff74\056\uff74\063\uff74\073\uff74\113" +
    "\uff74\115\uff74\125\uff74\127\uff74\131\uff74\132\uff74\137\uff74" +
    "\144\uff74\206\uff74\207\uff74\210\uff74\001\002\000\046\010" +
    "\uff68\012\uff68\013\uff68\040\uff68\056\uff68\063\uff68\073\uff68" +
    "\113\uff68\115\uff68\125\uff68\127\uff68\131\uff68\132\uff68\137" +
    "\uff68\144\uff68\206\uff68\207\uff68\210\uff68\001\002\000\046" +
    "\010\uff6e\012\uff6e\013\uff6e\040\uff6e\056\uff6e\063\uff6e\073" +
    "\uff6e\113\uff6e\115\uff6e\125\uff6e\127\uff6e\131\uff6e\132\uff6e" +
    "\137\uff6e\144\uff6e\206\uff6e\207\uff6e\210\uff6e\001\002\000" +
    "\046\010\uff6f\012\uff6f\013\uff6f\040\uff6f\056\uff6f\063\uff6f" +
    "\073\uff6f\113\uff6f\115\uff6f\125\uff6f\127\uff6f\131\uff6f\132" +
    "\uff6f\137\uff6f\144\uff6f\206\uff6f\207\uff6f\210\uff6f\001\002" +
    "\000\046\010\uff6c\012\uff6c\013\uff6c\040\uff6c\056\uff6c\063" +
    "\uff6c\073\uff6c\113\uff6c\115\uff6c\125\uff6c\127\uff6c\131\uff6c" +
    "\132\uff6c\137\uff6c\144\uff6c\206\uff6c\207\uff6c\210\uff6c\001" +
    "\002\000\046\010\uff76\012\uff76\013\uff76\040\uff76\056\uff76" +
    "\063\uff76\073\uff76\113\uff76\115\uff76\125\uff76\127\uff76\131" +
    "\uff76\132\uff76\137\uff76\144\uff76\206\uff76\207\uff76\210\uff76" +
    "\001\002\000\004\007\121\001\002\000\046\010\uff69\012" +
    "\uff69\013\uff69\040\uff69\056\uff69\063\uff69\073\uff69\113\uff69" +
    "\115\uff69\125\uff69\127\uff69\131\uff69\132\uff69\137\uff69\144" +
    "\uff69\206\uff69\207\uff69\210\uff69\001\002\000\010\031\052" +
    "\032\043\034\046\001\002\000\004\040\123\001\002\000" +
    "\010\031\052\032\043\034\046\001\002\000\004\010\125" +
    "\001\002\000\046\010\uff65\012\uff65\013\uff65\040\uff65\056" +
    "\uff65\063\uff65\073\uff65\113\uff65\115\uff65\125\uff65\127\uff65" +
    "\131\uff65\132\uff65\137\uff65\144\uff65\206\uff65\207\uff65\210" +
    "\uff65\001\002\000\004\072\127\001\002\000\004\010\130" +
    "\001\002\000\046\010\uff73\012\uff73\013\uff73\040\uff73\056" +
    "\uff73\063\uff73\073\uff73\113\uff73\115\uff73\125\uff73\127\uff73" +
    "\131\uff73\132\uff73\137\uff73\144\uff73\206\uff73\207\uff73\210" +
    "\uff73\001\002\000\010\031\052\032\043\034\046\001\002" +
    "\000\004\010\133\001\002\000\046\010\uff6b\012\uff6b\013" +
    "\uff6b\040\uff6b\056\uff6b\063\uff6b\073\uff6b\113\uff6b\115\uff6b" +
    "\125\uff6b\127\uff6b\131\uff6b\132\uff6b\137\uff6b\144\uff6b\206" +
    "\uff6b\207\uff6b\210\uff6b\001\002\000\010\031\052\032\043" +
    "\034\046\001\002\000\004\010\136\001\002\000\046\010" +
    "\uff77\012\uff77\013\uff77\040\uff77\056\uff77\063\uff77\073\uff77" +
    "\113\uff77\115\uff77\125\uff77\127\uff77\131\uff77\132\uff77\137" +
    "\uff77\144\uff77\206\uff77\207\uff77\210\uff77\001\002\000\004" +
    "\205\055\001\002\000\006\012\uffe4\013\uffe4\001\002\000" +
    "\006\012\uffe2\013\uffe2\001\002\000\050\033\077\145\102" +
    "\146\107\147\116\150\101\151\111\152\104\153\100\154" +
    "\105\155\114\156\113\157\076\160\115\161\110\162\075" +
    "\163\120\164\112\165\103\166\117\001\002\000\010\012" +
    "\000\013\000\040\137\001\002\000\006\012\uffe3\013\uffe3" +
    "\001\002\000\010\031\052\032\043\034\046\001\002\000" +
    "\004\040\147\001\002\000\010\031\052\032\043\034\046" +
    "\001\002\000\004\010\151\001\002\000\046\010\uff66\012" +
    "\uff66\013\uff66\040\uff66\056\uff66\063\uff66\073\uff66\113\uff66" +
    "\115\uff66\125\uff66\127\uff66\131\uff66\132\uff66\137\uff66\144" +
    "\uff66\206\uff66\207\uff66\210\uff66\001\002\000\010\031\052" +
    "\032\043\034\046\001\002\000\004\010\154\001\002\000" +
    "\046\010\uff78\012\uff78\013\uff78\040\uff78\056\uff78\063\uff78" +
    "\073\uff78\113\uff78\115\uff78\125\uff78\127\uff78\131\uff78\132" +
    "\uff78\137\uff78\144\uff78\206\uff78\207\uff78\210\uff78\001\002" +
    "\000\044\002\ufffe\003\ufffe\004\ufffe\012\ufffe\013\ufffe\037" +
    "\ufffe\045\ufffe\046\ufffe\050\ufffe\060\ufffe\064\ufffe\111\ufffe" +
    "\167\ufffe\213\ufffe\215\ufffe\216\ufffe\217\ufffe\001\002\000" +
    "\010\007\221\031\052\032\043\001\002\000\004\005\161" +
    "\001\002\000\006\005\ufed0\035\ufed0\001\002\000\004\035" +
    "\040\001\002\000\010\012\000\013\000\015\164\001\002" +
    "\000\006\012\ufed4\013\ufed4\001\002\000\004\035\040\001" +
    "\002\000\016\012\ufeca\013\ufeca\015\ufeca\103\ufeca\105\ufeca" +
    "\106\ufeca\001\002\000\024\021\167\022\172\023\170\024" +
    "\177\025\176\027\175\030\173\036\174\136\200\001\002" +
    "\000\016\020\ufebe\031\ufebe\032\ufebe\034\ufebe\056\ufebe\205" +
    "\ufebe\001\002\000\016\020\ufebc\031\ufebc\032\ufebc\034\ufebc" +
    "\056\ufebc\205\ufebc\001\002\000\016\020\051\031\052\032" +
    "\043\034\046\056\044\205\055\001\002\000\016\020\ufebd" +
    "\031\ufebd\032\ufebd\034\ufebd\056\ufebd\205\ufebd\001\002\000" +
    "\006\031\052\032\043\001\002\000\016\020\ufeb7\031\ufeb7" +
    "\032\ufeb7\034\ufeb7\056\ufeb7\205\ufeb7\001\002\000\016\020" +
    "\ufeb9\031\ufeb9\032\ufeb9\034\ufeb9\056\ufeb9\205\ufeb9\001\002" +
    "\000\016\020\ufeba\031\ufeba\032\ufeba\034\ufeba\056\ufeba\205" +
    "\ufeba\001\002\000\016\020\ufebb\031\ufebb\032\ufebb\034\ufebb" +
    "\056\ufebb\205\ufebb\001\002\000\016\020\ufeb6\031\ufeb6\032" +
    "\ufeb6\034\ufeb6\056\ufeb6\205\ufeb6\001\002\000\004\016\202" +
    "\001\002\000\004\031\203\001\002\000\016\020\ufeb8\031" +
    "\ufeb8\032\ufeb8\034\ufeb8\056\ufeb8\205\ufeb8\001\002\000\022" +
    "\012\000\013\000\015\000\016\206\017\211\103\000\105" +
    "\000\106\000\001\002\000\016\012\ufecb\013\ufecb\015\ufecb" +
    "\103\ufecb\105\ufecb\106\ufecb\001\002\000\034\010\ufec5\012" +
    "\ufec5\013\ufec5\015\ufec5\035\ufec5\066\ufec5\067\ufec5\070\ufec5" +
    "\071\ufec5\072\ufec5\103\ufec5\105\ufec5\106\ufec5\001\002\000" +
    "\022\010\000\012\000\013\000\015\000\035\040\103\000" +
    "\105\000\106\000\001\002\000\020\010\ufec8\012\ufec8\013" +
    "\ufec8\015\ufec8\103\ufec8\105\ufec8\106\ufec8\001\002\000\034" +
    "\010\ufec4\012\ufec4\013\ufec4\015\ufec4\035\ufec4\066\ufec4\067" +
    "\ufec4\070\ufec4\071\ufec4\072\ufec4\103\ufec4\105\ufec4\106\ufec4" +
    "\001\002\000\024\021\167\022\172\023\170\024\177\025" +
    "\176\027\175\030\173\036\174\136\200\001\002\000\020" +
    "\010\ufec7\012\ufec7\013\ufec7\015\ufec7\103\ufec7\105\ufec7\106" +
    "\ufec7\001\002\000\020\010\ufec9\012\ufec9\013\ufec9\015\ufec9" +
    "\103\ufec9\105\ufec9\106\ufec9\001\002\000\016\020\051\031" +
    "\052\032\043\034\046\056\044\205\055\001\002\000\024" +
    "\010\000\012\000\013\000\015\000\016\206\017\211\103" +
    "\000\105\000\106\000\001\002\000\020\010\ufec6\012\ufec6" +
    "\013\ufec6\015\ufec6\103\ufec6\105\ufec6\106\ufec6\001\002\000" +
    "\040\005\ufece\007\ufece\014\ufece\020\ufece\031\ufece\032\ufece" +
    "\034\ufece\035\ufece\056\ufece\066\ufece\067\ufece\070\ufece\071" +
    "\ufece\072\ufece\205\ufece\001\002\000\006\031\052\032\043" +
    "\001\002\000\010\005\000\014\224\035\000\001\002\000" +
    "\006\005\ufed1\035\ufed1\001\002\000\006\005\ufecd\035\ufecd" +
    "\001\002\000\006\005\ufecc\035\ufecc\001\002\000\004\010" +
    "\227\001\002\000\040\005\ufecf\007\ufecf\014\ufecf\020\ufecf" +
    "\031\ufecf\032\ufecf\034\ufecf\035\ufecf\056\ufecf\066\ufecf\067" +
    "\ufecf\070\ufecf\071\ufecf\072\ufecf\205\ufecf\001\002\000\004" +
    "\035\040\001\002\000\004\037\232\001\002\000\004\035" +
    "\040\001\002\000\004\036\234\001\002\000\022\007\236" +
    "\020\051\031\052\032\043\034\046\035\040\056\044\205" +
    "\055\001\002\000\010\012\000\013\000\015\164\001\002" +
    "\000\022\007\236\020\051\031\052\032\043\034\046\035" +
    "\040\056\044\205\055\001\002\000\030\005\ufeda\010\ufeda" +
    "\012\ufeda\013\ufeda\015\ufeda\040\ufeda\041\ufeda\042\ufeda\043" +
    "\ufeda\044\ufeda\073\ufeda\001\002\000\030\005\ufee0\010\ufee0" +
    "\012\ufee0\013\ufee0\015\ufee0\040\ufee0\041\ufee0\042\ufee0\043" +
    "\257\044\260\073\ufee0\001\002\000\030\005\ufedd\010\ufedd" +
    "\012\ufedd\013\ufedd\015\ufedd\040\ufedd\041\ufedd\042\ufedd\043" +
    "\ufedd\044\ufedd\073\ufedd\001\002\000\016\012\ufee3\013\ufee3" +
    "\015\ufee3\040\ufee3\041\255\042\254\001\002\000\030\005" +
    "\ufedb\010\ufedb\012\ufedb\013\ufedb\015\ufedb\040\ufedb\041\ufedb" +
    "\042\ufedb\043\ufedb\044\ufedb\073\ufedb\001\002\000\012\012" +
    "\000\013\000\015\000\040\245\001\002\000\004\035\040" +
    "\001\002\000\010\012\ufee4\013\ufee4\015\ufee4\001\002\000" +
    "\010\012\ufee6\013\ufee6\015\ufee6\001\002\000\004\036\251" +
    "\001\002\000\022\007\236\020\051\031\052\032\043\034" +
    "\046\035\040\056\044\205\055\001\002\000\010\012\000" +
    "\013\000\015\164\001\002\000\010\012\ufee5\013\ufee5\015" +
    "\ufee5\001\002\000\022\007\236\020\051\031\052\032\043" +
    "\034\046\035\040\056\044\205\055\001\002\000\022\007" +
    "\236\020\051\031\052\032\043\034\046\035\040\056\044" +
    "\205\055\001\002\000\030\005\ufee2\010\ufee2\012\ufee2\013" +
    "\ufee2\015\ufee2\040\ufee2\041\ufee2\042\ufee2\043\257\044\260" +
    "\073\ufee2\001\002\000\022\007\236\020\051\031\052\032" +
    "\043\034\046\035\040\056\044\205\055\001\002\000\022" +
    "\007\236\020\051\031\052\032\043\034\046\035\040\056" +
    "\044\205\055\001\002\000\030\005\ufede\010\ufede\012\ufede" +
    "\013\ufede\015\ufede\040\ufede\041\ufede\042\ufede\043\ufede\044" +
    "\ufede\073\ufede\001\002\000\030\005\ufedf\010\ufedf\012\ufedf" +
    "\013\ufedf\015\ufedf\040\ufedf\041\ufedf\042\ufedf\043\ufedf\044" +
    "\ufedf\073\ufedf\001\002\000\030\005\ufee1\010\ufee1\012\ufee1" +
    "\013\ufee1\015\ufee1\040\ufee1\041\ufee1\042\ufee1\043\257\044" +
    "\260\073\ufee1\001\002\000\010\010\265\041\255\042\254" +
    "\001\002\000\030\005\ufedc\010\ufedc\012\ufedc\013\ufedc\015" +
    "\ufedc\040\ufedc\041\ufedc\042\ufedc\043\ufedc\044\ufedc\073\ufedc" +
    "\001\002\000\006\012\ufee7\013\ufee7\001\002\000\044\002" +
    "\ufed3\003\ufed3\004\ufed3\012\ufed3\013\ufed3\037\ufed3\045\ufed3" +
    "\046\ufed3\050\ufed3\060\ufed3\064\ufed3\111\ufed3\167\ufed3\213" +
    "\ufed3\215\ufed3\216\ufed3\217\ufed3\001\002\000\044\002\ufed2" +
    "\003\ufed2\004\ufed2\012\ufed2\013\ufed2\037\ufed2\045\ufed2\046" +
    "\ufed2\050\ufed2\060\ufed2\064\ufed2\111\ufed2\167\ufed2\213\ufed2" +
    "\215\ufed2\216\ufed2\217\ufed2\001\002\000\044\002\ufff1\003" +
    "\ufff1\004\ufff1\012\ufff1\013\ufff1\037\ufff1\045\ufff1\046\ufff1" +
    "\050\ufff1\060\ufff1\064\ufff1\111\ufff1\167\ufff1\213\ufff1\215" +
    "\ufff1\216\ufff1\217\ufff1\001\002\000\006\012\ufef9\013\ufef9" +
    "\001\002\000\006\012\ufefd\013\ufefd\001\002\000\006\035" +
    "\000\053\302\001\002\000\006\035\000\053\302\001\002" +
    "\000\006\035\000\053\302\001\002\000\006\012\ufef8\013" +
    "\ufef8\001\002\000\004\035\ufefb\001\002\000\004\035\040" +
    "\001\002\000\004\054\303\001\002\000\004\035\ufefc\001" +
    "\002\000\010\012\000\013\000\040\306\001\002\000\006" +
    "\012\ufefa\013\ufefa\001\002\000\004\035\040\001\002\000" +
    "\006\012\ufef7\013\ufef7\001\002\000\006\012\ufef5\013\ufef5" +
    "\001\002\000\006\012\ufef6\013\ufef6\001\002\000\004\035" +
    "\040\001\002\000\010\012\000\013\000\040\314\001\002" +
    "\000\004\035\040\001\002\000\006\012\ufeeb\013\ufeeb\001" +
    "\002\000\020\010\ufee9\012\ufee9\013\ufee9\105\ufee9\106\ufee9" +
    "\107\ufee9\110\ufee9\001\002\000\022\010\000\012\000\013" +
    "\000\040\314\105\000\106\000\107\000\110\000\001\002" +
    "\000\020\010\ufeea\012\ufeea\013\ufeea\105\ufeea\106\ufeea\107" +
    "\ufeea\110\ufeea\001\002\000\004\035\040\001\002\000\006" +
    "\035\040\055\324\001\002\000\006\012\ufef2\013\ufef2\001" +
    "\002\000\004\035\040\001\002\000\010\012\000\013\000" +
    "\040\314\001\002\000\006\012\ufef3\013\ufef3\001\002\000" +
    "\006\012\ufef4\013\ufef4\001\002\000\006\012\ufeee\013\ufeee" +
    "\001\002\000\010\012\000\013\000\040\332\001\002\000" +
    "\004\035\040\001\002\000\006\012\ufef1\013\ufef1\001\002" +
    "\000\006\012\ufeef\013\ufeef\001\002\000\004\055\324\001" +
    "\002\000\006\012\ufef0\013\ufef0\001\002\000\044\002\ufffc" +
    "\003\ufffc\004\ufffc\012\ufffc\013\ufffc\037\ufffc\045\ufffc\046" +
    "\ufffc\050\ufffc\060\ufffc\064\ufffc\111\ufffc\167\ufffc\213\ufffc" +
    "\215\ufffc\216\ufffc\217\ufffc\001\002\000\006\035\u0165\074" +
    "\u0164\001\002\000\006\035\u015a\170\u0159\001\002\000\004" +
    "\035\040\001\002\000\004\035\040\001\002\000\004\035" +
    "\347\001\002\000\006\012\uffc8\013\uffc8\001\002\000\006" +
    "\012\uffc4\013\uffc4\001\002\000\004\115\350\001\002\000" +
    "\012\056\353\116\354\143\352\200\355\001\002\000\006" +
    "\012\uffab\013\uffab\001\002\000\004\036\367\001\002\000" +
    "\010\012\uffa8\013\uffa8\040\uffa8\001\002\000\004\036\365" +
    "\001\002\000\004\036\363\001\002\000\010\012\000\013" +
    "\000\040\357\001\002\000\012\056\353\116\354\143\352" +
    "\200\355\001\002\000\006\012\uffa4\013\uffa4\001\002\000" +
    "\006\012\uffaa\013\uffaa\001\002\000\006\012\uffa5\013\uffa5" +
    "\001\002\000\004\020\364\001\002\000\010\012\uffa6\013" +
    "\uffa6\040\uffa6\001\002\000\004\035\366\001\002\000\010" +
    "\012\uffa9\013\uffa9\040\uffa9\001\002\000\004\035\370\001" +
    "\002\000\010\012\uffa7\013\uffa7\040\uffa7\001\002\000\006" +
    "\012\uffc5\013\uffc5\001\002\000\010\050\376\167\373\202" +
    "\375\001\002\000\004\201\u014c\001\002\000\006\012\uffb3" +
    "\013\uffb3\001\002\000\026\035\040\056\u010c\063\u010e\113" +
    "\u0112\125\u0106\127\u0114\131\u0110\132\u0111\133\u010f\137\u010b" +
    "\001\002\000\010\051\u0101\133\377\201\u0100\001\002\000" +
    "\004\035\040\001\002\000\004\035\040\001\002\000\004" +
    "\035\040\001\002\000\006\012\uffb0\013\uffb0\001\002\000" +
    "\006\012\uffac\013\uffac\001\002\000\006\012\uffad\013\uffad" +
    "\001\002\000\006\012\uffae\013\uffae\001\002\000\004\007" +
    "\u0147\001\002\000\006\012\uffb1\013\uffb1\001\002\000\012" +
    "\010\000\012\000\013\000\040\u0143\001\002\000\012\010" +
    "\uff53\012\uff53\013\uff53\040\uff53\001\002\000\012\010\uff7b" +
    "\012\uff7b\013\uff7b\040\uff7b\001\002\000\034\007\u0130\010" +
    "\000\012\000\013\000\040\000\056\000\063\000\113\000" +
    "\125\000\127\000\131\000\132\000\137\000\001\002\000" +
    "\032\010\uff61\012\uff61\013\uff61\040\uff61\056\uff61\063\uff61" +
    "\113\uff61\125\uff61\127\uff61\131\uff61\132\uff61\137\uff61\001" +
    "\002\000\050\033\077\145\102\146\107\147\116\150\101" +
    "\151\111\152\104\153\100\154\105\155\114\156\113\157" +
    "\076\160\115\161\110\162\075\163\120\164\112\165\103" +
    "\166\117\001\002\000\016\020\051\031\052\032\043\034" +
    "\046\056\044\205\055\001\002\000\004\035\040\001\002" +
    "\000\004\056\u0138\001\002\000\004\007\u0134\001\002\000" +
    "\004\126\u011e\001\002\000\006\012\uffaf\013\uffaf\001\002" +
    "\000\004\126\u0115\001\002\000\004\007\u0116\001\002\000" +
    "\004\035\040\001\002\000\004\010\u0118\001\002\000\004" +
    "\130\u0119\001\002\000\004\035\040\001\002\000\004\007" +
    "\u011b\001\002\000\004\035\040\001\002\000\004\010\u011d" +
    "\001\002\000\032\010\uff5e\012\uff5e\013\uff5e\040\uff5e\056" +
    "\uff5e\063\uff5e\113\uff5e\125\uff5e\127\uff5e\131\uff5e\132\uff5e" +
    "\137\uff5e\001\002\000\030\007\000\056\u010c\063\u010e\113" +
    "\u0112\125\u0106\127\u0114\131\u0110\132\u0111\137\u0120\140\u0121" +
    "\141\u0125\001\002\000\032\010\uff57\012\uff57\013\uff57\040" +
    "\uff57\056\uff57\063\uff57\113\uff57\125\uff57\127\uff57\131\uff57" +
    "\132\uff57\137\uff57\001\002\000\034\007\u0130\010\000\012" +
    "\000\013\000\040\000\056\000\063\000\113\000\125\000" +
    "\127\000\131\000\132\000\137\000\001\002\000\006\007" +
    "\uff8d\051\uff8d\001\002\000\004\007\uff8b\001\002\000\032" +
    "\010\uff5f\012\uff5f\013\uff5f\040\uff5f\056\uff5f\063\uff5f\113" +
    "\uff5f\125\uff5f\127\uff5f\131\uff5f\132\uff5f\137\uff5f\001\002" +
    "\000\004\007\u0126\001\002\000\006\007\uff8c\051\uff8c\001" +
    "\002\000\004\035\040\001\002\000\012\010\000\040\314" +
    "\107\000\110\000\001\002\000\010\010\000\107\u0129\110" +
    "\u012a\001\002\000\012\010\uff11\012\uff11\013\uff11\040\uff11" +
    "\001\002\000\012\010\uff10\012\uff10\013\uff10\040\uff10\001" +
    "\002\000\012\010\uff0f\012\uff0f\013\uff0f\040\uff0f\001\002" +
    "\000\004\010\u012d\001\002\000\032\010\uff58\012\uff58\013" +
    "\uff58\040\uff58\056\uff58\063\uff58\113\uff58\125\uff58\127\uff58" +
    "\131\uff58\132\uff58\137\uff58\001\002\000\032\010\uff60\012" +
    "\uff60\013\uff60\040\uff60\056\uff60\063\uff60\113\uff60\125\uff60" +
    "\127\uff60\131\uff60\132\uff60\137\uff60\001\002\000\032\010" +
    "\uff59\012\uff59\013\uff59\040\uff59\056\uff59\063\uff59\113\uff59" +
    "\125\uff59\127\uff59\131\uff59\132\uff59\137\uff59\001\002\000" +
    "\004\035\040\001\002\000\006\010\000\040\314\001\002" +
    "\000\004\010\u0133\001\002\000\032\010\uff5a\012\uff5a\013" +
    "\uff5a\040\uff5a\056\uff5a\063\uff5a\113\uff5a\125\uff5a\127\uff5a" +
    "\131\uff5a\132\uff5a\137\uff5a\001\002\000\006\010\000\035" +
    "\040\001\002\000\004\010\u0137\001\002\000\004\010\uff54" +
    "\001\002\000\032\010\uff5c\012\uff5c\013\uff5c\040\uff5c\056" +
    "\uff5c\063\uff5c\113\uff5c\125\uff5c\127\uff5c\131\uff5c\132\uff5c" +
    "\137\uff5c\001\002\000\032\010\uff5d\012\uff5d\013\uff5d\040" +
    "\uff5d\056\uff5d\063\uff5d\113\uff5d\125\uff5d\127\uff5d\131\uff5d" +
    "\132\uff5d\137\uff5d\001\002\000\022\056\u010c\063\u010e\113" +
    "\u0112\125\u0106\127\u0114\131\u0110\132\u0111\137\u010b\001\002" +
    "\000\012\010\uff52\012\uff52\013\uff52\040\uff52\001\002\000" +
    "\032\010\uff5b\012\uff5b\013\uff5b\040\uff5b\056\uff5b\063\uff5b" +
    "\113\uff5b\125\uff5b\127\uff5b\131\uff5b\132\uff5b\137\uff5b\001" +
    "\002\000\032\010\000\012\000\013\000\040\000\056\u010c" +
    "\063\u010e\113\u0112\125\u0106\127\u0114\131\u0110\132\u0111\137" +
    "\u010b\001\002\000\012\010\uff7c\012\uff7c\013\uff7c\040\uff7c" +
    "\001\002\000\032\010\000\012\000\013\000\040\000\056" +
    "\u010c\063\u010e\113\u0112\125\u0106\127\u0114\131\u0110\132\u0111" +
    "\137\u010b\001\002\000\012\010\uff63\012\uff63\013\uff63\040" +
    "\uff63\001\002\000\012\010\uff64\012\uff64\013\uff64\040\uff64" +
    "\001\002\000\012\010\uff56\012\uff56\013\uff56\040\uff56\001" +
    "\002\000\012\010\uff55\012\uff55\013\uff55\040\uff55\001\002" +
    "\000\026\035\040\056\u010c\063\u010e\113\u0112\125\u0106\127" +
    "\u0114\131\u0110\132\u0111\133\u010f\137\u010b\001\002\000\010" +
    "\010\uff7d\012\uff7d\013\uff7d\001\002\000\010\010\uff79\012" +
    "\uff79\013\uff79\001\002\000\010\010\uff7a\012\uff7a\013\uff7a" +
    "\001\002\000\006\031\052\032\043\001\002\000\004\040" +
    "\u0149\001\002\000\006\031\052\032\043\001\002\000\004" +
    "\010\u014b\001\002\000\032\010\uff62\012\uff62\013\uff62\040" +
    "\uff62\056\uff62\063\uff62\113\uff62\125\uff62\127\uff62\131\uff62" +
    "\132\uff62\137\uff62\001\002\000\026\035\040\056\u010c\063" +
    "\u010e\113\u0112\125\u0106\127\u0114\131\u0110\132\u0111\133\u010f" +
    "\137\u010b\001\002\000\006\012\uffb2\013\uffb2\001\002\000" +
    "\006\007\u0152\073\000\001\002\000\006\012\uffc3\013\uffc3" +
    "\001\002\000\004\073\u0157\001\002\000\004\073\uff84\001" +
    "\002\000\004\035\040\001\002\000\004\010\u0156\001\002" +
    "\000\006\010\000\040\314\001\002\000\004\010\uff83\001" +
    "\002\000\004\073\uff85\001\002\000\004\064\012\001\002" +
    "\000\006\012\uff86\013\uff86\001\002\000\006\114\uffc1\171" +
    "\uffc1\001\002\000\006\114\uffc0\171\uffc0\001\002\000\006" +
    "\012\uffc7\013\uffc7\001\002\000\006\114\u015d\171\u015f\001" +
    "\002\000\004\035\u0163\001\002\000\006\012\uffc2\013\uffc2" +
    "\001\002\000\004\116\u0160\001\002\000\004\036\u0161\001" +
    "\002\000\004\035\u0162\001\002\000\006\012\uffbf\013\uffbf" +
    "\001\002\000\006\012\uffbe\013\uffbe\001\002\000\004\055" +
    "\uffbb\001\002\000\004\055\uffbc\001\002\000\004\055\u0168" +
    "\001\002\000\006\012\uffc6\013\uffc6\001\002\000\004\035" +
    "\040\001\002\000\020\037\u016f\172\u016e\173\u016a\174\u016d" +
    "\175\u016c\176\u0170\177\u0171\001\002\000\006\012\uffb9\013" +
    "\uffb9\001\002\000\006\012\uffbd\013\uffbd\001\002\000\006" +
    "\012\uffb6\013\uffb6\001\002\000\006\012\uffb8\013\uffb8\001" +
    "\002\000\006\012\uffba\013\uffba\001\002\000\006\012\uffb7" +
    "\013\uffb7\001\002\000\006\012\uffb5\013\uffb5\001\002\000" +
    "\006\012\uffb4\013\uffb4\001\002\000\044\002\ufff7\003\ufff7" +
    "\004\ufff7\012\ufff7\013\ufff7\037\ufff7\045\ufff7\046\ufff7\050" +
    "\ufff7\060\ufff7\064\ufff7\111\ufff7\167\ufff7\213\ufff7\215\ufff7" +
    "\216\ufff7\217\ufff7\001\002\000\004\055\u017e\001\002\000" +
    "\004\036\u0175\001\002\000\016\020\051\031\052\032\043" +
    "\034\046\056\044\205\055\001\002\000\010\012\000\013" +
    "\000\040\u0177\001\002\000\004\205\055\001\002\000\006" +
    "\012\uffe8\013\uffe8\001\002\000\006\012\uffe5\013\uffe5\001" +
    "\002\000\004\036\u017b\001\002\000\016\020\051\031\052" +
    "\032\043\034\046\056\044\205\055\001\002\000\010\012" +
    "\000\013\000\040\u0177\001\002\000\006\012\uffe6\013\uffe6" +
    "\001\002\000\010\012\000\013\000\040\u0177\001\002\000" +
    "\006\012\uffe7\013\uffe7\001\002\000\004\035\040\001\002" +
    "\000\004\035\uff09\001\002\000\004\035\uff0a\001\002\000" +
    "\010\007\u0186\061\000\063\000\001\002\000\006\061\u0190" +
    "\063\u018f\001\002\000\006\061\uff07\063\uff07\001\002\000" +
    "\004\035\u0187\001\002\000\006\010\000\040\u018b\001\002" +
    "\000\004\010\u0189\001\002\000\006\061\uff08\063\uff08\001" +
    "\002\000\004\010\uff06\001\002\000\004\035\u018d\001\002" +
    "\000\004\010\uff04\001\002\000\006\010\000\040\u018b\001" +
    "\002\000\004\010\uff05\001\002\000\004\061\u019f\001\002" +
    "\000\004\007\u0192\001\002\000\006\012\uff0c\013\uff0c\001" +
    "\002\000\016\020\051\031\052\032\043\034\046\056\044" +
    "\205\055\001\002\000\006\010\000\040\u019a\001\002\000" +
    "\004\010\u0195\001\002\000\010\012\000\013\000\040\u0196" +
    "\001\002\000\004\007\u0192\001\002\000\006\012\uff03\013" +
    "\uff03\001\002\000\006\012\ufefe\013\ufefe\001\002\000\006" +
    "\012\ufeff\013\ufeff\001\002\000\016\020\051\031\052\032" +
    "\043\034\046\056\044\205\055\001\002\000\004\010\uff02" +
    "\001\002\000\004\010\uff00\001\002\000\006\010\000\040" +
    "\u019a\001\002\000\004\010\uff01\001\002\000\006\012\uff0b" +
    "\013\uff0b\001\002\000\006\012\uffa3\013\uffa3\001\002\000" +
    "\004\035\040\001\002\000\004\035\u01ef\001\002\000\004" +
    "\051\uff8e\001\002\000\006\203\u01c8\204\u01c7\001\002\000" +
    "\010\051\uff8b\203\uffdf\204\uffdf\001\002\000\004\035\040" +
    "\001\002\000\004\035\040\001\002\000\004\051\u01ab\001" +
    "\002\000\004\167\u01aa\001\002\000\006\203\uffe0\204\uffe0" +
    "\001\002\000\004\035\040\001\002\000\006\012\uffa1\013" +
    "\uffa1\001\002\000\004\055\u01ae\001\002\000\004\035\040" +
    "\001\002\000\004\007\u01b0\001\002\000\004\035\040\001" +
    "\002\000\006\010\000\040\314\001\002\000\004\010\u01b3" +
    "\001\002\000\010\012\000\013\000\142\u01b6\001\002\000" +
    "\006\012\uff8a\013\uff8a\001\002\000\006\012\uff87\013\uff87" +
    "\001\002\000\004\007\u01b7\001\002\000\004\035\040\001" +
    "\002\000\004\010\u01b9\001\002\000\006\012\uff88\013\uff88" +
    "\001\002\000\004\010\uff89\001\002\000\006\012\uff9e\013" +
    "\uff9e\001\002\000\004\007\u01be\001\002\000\006\012\uffa0" +
    "\013\uffa0\001\002\000\026\035\040\056\u010c\063\u010e\113" +
    "\u0112\125\u0106\127\u0114\131\u0110\132\u0111\133\u010f\137\u010b" +
    "\001\002\000\004\010\u01c0\001\002\000\010\012\000\013" +
    "\000\055\u01c2\001\002\000\006\012\uff81\013\uff81\001\002" +
    "\000\006\035\040\113\u01c4\001\002\000\006\012\uff7e\013" +
    "\uff7e\001\002\000\006\012\uff7f\013\uff7f\001\002\000\006" +
    "\012\uff80\013\uff80\001\002\000\004\035\040\001\002\000" +
    "\004\035\uffdd\001\002\000\004\035\uffde\001\002\000\012" +
    "\073\000\115\000\144\000\205\u01cc\001\002\000\010\073" +
    "\000\115\u01d9\144\000\001\002\000\010\073\uffdb\115\uffdb" +
    "\144\uffdb\001\002\000\004\035\u01ce\001\002\000\010\073" +
    "\uffdc\115\uffdc\144\uffdc\001\002\000\050\033\077\145\102" +
    "\146\107\147\116\150\101\151\111\152\104\153\100\154" +
    "\105\155\114\156\113\157\076\160\115\161\110\162\075" +
    "\163\120\164\112\165\103\166\117\001\002\000\020\040" +
    "\000\073\000\115\000\144\000\206\u01d0\207\u01d1\210\u01d4" +
    "\001\002\000\012\040\uffd7\073\uffd7\115\uffd7\144\uffd7\001" +
    "\002\000\012\040\uffd6\073\uffd6\115\uffd6\144\uffd6\001\002" +
    "\000\012\040\u01d5\073\000\115\000\144\000\001\002\000" +
    "\012\040\uffd4\073\uffd4\115\uffd4\144\uffd4\001\002\000\012" +
    "\040\uffd5\073\uffd5\115\uffd5\144\uffd5\001\002\000\004\205" +
    "\u01cc\001\002\000\010\073\uffd8\115\uffd8\144\uffd8\001\002" +
    "\000\010\073\uffda\115\uffda\144\uffda\001\002\000\010\073" +
    "\uffd9\115\uffd9\144\uffd9\001\002\000\010\211\u01e9\212\u01eb" +
    "\213\u01e8\001\002\000\006\073\000\144\u01dc\001\002\000" +
    "\006\073\uffd2\144\uffd2\001\002\000\004\135\u01e7\001\002" +
    "\000\004\073\u01df\001\002\000\004\073\uffcd\001\002\000" +
    "\036\003\000\004\000\037\000\045\000\046\000\050\000" +
    "\060\000\064\000\111\000\167\000\213\000\214\u01e0\216" +
    "\000\217\000\001\002\000\034\003\uffcc\004\uffcc\037\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\060\uffcc\064\uffcc\111\uffcc\167" +
    "\uffcc\213\uffcc\216\uffcc\217\uffcc\001\002\000\034\003\032" +
    "\004\034\037\024\045\033\046\013\050\030\060\023\064" +
    "\012\111\021\167\026\213\037\216\036\217\004\001\002" +
    "\000\034\003\uffcb\004\uffcb\037\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\060\uffcb\064\uffcb\111\uffcb\167\uffcb\213\uffcb\216\uffcb" +
    "\217\uffcb\001\002\000\042\003\032\004\034\012\000\013" +
    "\000\037\024\045\033\046\013\050\030\060\023\064\012" +
    "\111\021\167\026\213\037\215\u01e5\216\036\217\004\001" +
    "\002\000\006\012\uffe1\013\uffe1\001\002\000\006\012\uffca" +
    "\013\uffca\001\002\000\006\012\uffc9\013\uffc9\001\002\000" +
    "\004\073\uffce\001\002\000\004\073\u01ec\001\002\000\006" +
    "\073\uffd1\144\uffd1\001\002\000\006\073\uffd3\144\uffd3\001" +
    "\002\000\006\073\uffd0\144\uffd0\001\002\000\004\134\u01ed" +
    "\001\002\000\006\073\uffcf\144\uffcf\001\002\000\006\012" +
    "\uff9f\013\uff9f\001\002\000\004\144\u01f0\001\002\000\004" +
    "\143\u01f1\001\002\000\004\035\u01f2\001\002\000\006\012" +
    "\uff82\013\uff82\001\002\000\014\012\000\013\000\055\u01f7" +
    "\114\u01f5\115\u01f8\001\002\000\006\012\uffa2\013\uffa2\001" +
    "\002\000\004\035\u021d\001\002\000\006\012\uff9d\013\uff9d" +
    "\001\002\000\004\113\u01fa\001\002\000\006\012\uff9a\013" +
    "\uff9a\001\002\000\006\012\uff99\013\uff99\001\002\000\004" +
    "\007\u01fb\001\002\000\016\010\000\116\u01ff\117\u0200\120" +
    "\u0202\121\u01fc\122\u0201\001\002\000\004\036\u021a\001\002" +
    "\000\004\010\u0212\001\002\000\004\010\uff93\001\002\000" +
    "\004\036\u020f\001\002\000\004\036\u020c\001\002\000\004" +
    "\036\u0209\001\002\000\004\036\u0203\001\002\000\004\020" +
    "\u0204\001\002\000\006\010\000\040\u0205\001\002\000\016" +
    "\010\000\116\u01ff\117\u0200\120\u0202\121\u01fc\122\u0201\001" +
    "\002\000\004\010\uff96\001\002\000\004\010\uff91\001\002" +
    "\000\004\010\uff92\001\002\000\004\031\u020a\001\002\000" +
    "\006\010\000\040\u0205\001\002\000\004\010\uff94\001\002" +
    "\000\004\020\u020d\001\002\000\006\010\000\040\u0205\001" +
    "\002\000\004\010\uff97\001\002\000\004\020\u0210\001\002" +
    "\000\006\010\000\040\u0205\001\002\000\004\010\uff98\001" +
    "\002\000\010\012\000\013\000\040\u0213\001\002\000\004" +
    "\007\u0216\001\002\000\006\012\uff9c\013\uff9c\001\002\000" +
    "\006\012\uff8f\013\uff8f\001\002\000\016\010\000\116\u01ff" +
    "\117\u0200\120\u0202\121\u01fc\122\u0201\001\002\000\004\010" +
    "\u0218\001\002\000\010\012\000\013\000\040\u0213\001\002" +
    "\000\006\012\uff90\013\uff90\001\002\000\004\020\u021b\001" +
    "\002\000\006\010\000\040\u0205\001\002\000\004\010\uff95" +
    "\001\002\000\006\012\uff9b\013\uff9b\001\002\000\004\002" +
    "\001\001\002\000\044\002\ufff6\003\ufff6\004\ufff6\012\ufff6" +
    "\013\ufff6\037\ufff6\045\ufff6\046\ufff6\050\ufff6\060\ufff6\064" +
    "\ufff6\111\ufff6\167\ufff6\213\ufff6\215\ufff6\216\ufff6\217\ufff6" +
    "\001\002\000\044\002\ufffb\003\ufffb\004\ufffb\012\ufffb\013" +
    "\ufffb\037\ufffb\045\ufffb\046\ufffb\050\ufffb\060\ufffb\064\ufffb" +
    "\111\ufffb\167\ufffb\213\ufffb\215\ufffb\216\ufffb\217\ufffb\001" +
    "\002\000\044\002\ufff9\003\ufff9\004\ufff9\012\ufff9\013\ufff9" +
    "\037\ufff9\045\ufff9\046\ufff9\050\ufff9\060\ufff9\064\ufff9\111" +
    "\ufff9\167\ufff9\213\ufff9\215\ufff9\216\ufff9\217\ufff9\001\002" +
    "\000\044\002\ufff4\003\ufff4\004\ufff4\012\ufff4\013\ufff4\037" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\060\ufff4\064\ufff4\111\ufff4" +
    "\167\ufff4\213\ufff4\215\ufff4\216\ufff4\217\ufff4\001\002\000" +
    "\004\035\040\001\002\000\006\012\ufee8\013\ufee8\001\002" +
    "\000\034\007\uff4e\020\uff4e\031\uff4e\032\uff4e\034\uff4e\035" +
    "\uff4e\056\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e" +
    "\205\uff4e\001\002\000\004\005\uff50\001\002\000\034\007" +
    "\236\020\051\031\052\032\043\034\046\035\040\056\044" +
    "\066\u024d\067\u024f\070\u0250\071\u024c\072\u0251\205\055\001" +
    "\002\000\034\007\uff4d\020\uff4d\031\uff4d\032\uff4d\034\uff4d" +
    "\035\uff4d\056\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072" +
    "\uff4d\205\uff4d\001\002\000\004\005\u022d\001\002\000\010" +
    "\007\221\031\052\032\043\001\002\000\034\007\uff4b\020" +
    "\uff4b\031\uff4b\032\uff4b\034\uff4b\035\uff4b\056\uff4b\066\uff4b" +
    "\067\uff4b\070\uff4b\071\uff4b\072\uff4b\205\uff4b\001\002\000" +
    "\034\007\uff4c\020\uff4c\031\uff4c\032\uff4c\034\uff4c\035\uff4c" +
    "\056\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072\uff4c\205" +
    "\uff4c\001\002\000\004\035\040\001\002\000\030\012\000" +
    "\013\000\015\000\075\000\076\u023a\077\u023b\100\u023c\101" +
    "\u023f\103\000\105\000\106\000\001\002\000\036\012\000" +
    "\013\000\015\000\035\u0231\040\000\073\u0230\075\000\076" +
    "\000\077\000\100\000\101\000\103\000\105\000\106\000" +
    "\001\002\000\006\020\u0238\035\u0239\001\002\000\034\012" +
    "\uff27\013\uff27\015\uff27\040\uff27\055\uff27\075\uff27\076\uff27" +
    "\077\uff27\100\uff27\101\uff27\103\uff27\105\uff27\106\uff27\001" +
    "\002\000\032\012\000\013\000\015\000\040\u0234\075\000" +
    "\076\000\077\000\100\000\101\000\103\000\105\000\106" +
    "\000\001\002\000\034\012\uff26\013\uff26\015\uff26\040\uff26" +
    "\055\uff26\075\uff26\076\uff26\077\uff26\100\uff26\101\uff26\103" +
    "\uff26\105\uff26\106\uff26\001\002\000\004\035\040\001\002" +
    "\000\030\012\uff2c\013\uff2c\015\uff2c\075\uff2c\076\uff2c\077" +
    "\uff2c\100\uff2c\101\uff2c\103\uff2c\105\uff2c\106\uff2c\001\002" +
    "\000\030\012\uff2a\013\uff2a\015\uff2a\075\uff2a\076\uff2a\077" +
    "\uff2a\100\uff2a\101\uff2a\103\uff2a\105\uff2a\106\uff2a\001\002" +
    "\000\030\012\uff2b\013\uff2b\015\uff2b\075\uff2b\076\uff2b\077" +
    "\uff2b\100\uff2b\101\uff2b\103\uff2b\105\uff2b\106\uff2b\001\002" +
    "\000\034\012\uff29\013\uff29\015\uff29\040\uff29\055\uff29\075" +
    "\uff29\076\uff29\077\uff29\100\uff29\101\uff29\103\uff29\105\uff29" +
    "\106\uff29\001\002\000\034\012\uff28\013\uff28\015\uff28\040" +
    "\uff28\055\uff28\075\uff28\076\uff28\077\uff28\100\uff28\101\uff28" +
    "\103\uff28\105\uff28\106\uff28\001\002\000\004\075\uff23\001" +
    "\002\000\006\075\000\102\u027f\001\002\000\006\075\000" +
    "\102\u027f\001\002\000\004\075\u0281\001\002\000\020\012" +
    "\uff24\013\uff24\015\uff24\075\uff1f\103\uff24\105\uff24\106\uff24" +
    "\001\002\000\006\075\000\102\u027f\001\002\000\016\012" +
    "\000\013\000\015\164\103\000\105\000\106\000\001\002" +
    "\000\014\012\000\013\000\103\u0243\105\000\106\000\001" +
    "\002\000\012\012\uff1b\013\uff1b\105\uff1b\106\uff1b\001\002" +
    "\000\004\104\u027b\001\002\000\012\012\000\013\000\105" +
    "\u0245\106\000\001\002\000\016\035\040\066\u024d\067\u024f" +
    "\070\u0250\071\u024c\072\u0251\001\002\000\010\012\uff19\013" +
    "\uff19\106\uff19\001\002\000\010\012\000\013\000\106\u0248" +
    "\001\002\000\004\104\u024b\001\002\000\006\012\uff51\013" +
    "\uff51\001\002\000\006\012\uff12\013\uff12\001\002\000\016" +
    "\035\040\066\u024d\067\u024f\070\u0250\071\u024c\072\u0251\001" +
    "\002\000\004\007\u026c\001\002\000\004\007\u0269\001\002" +
    "\000\014\012\000\013\000\040\000\107\u0129\110\u012a\001" +
    "\002\000\004\007\u0264\001\002\000\004\007\u0261\001\002" +
    "\000\004\007\u0258\001\002\000\014\012\000\013\000\040" +
    "\000\107\u0129\110\u012a\001\002\000\010\012\000\013\000" +
    "\040\u0254\001\002\000\010\012\000\013\000\106\u0248\001" +
    "\002\000\006\012\uff0d\013\uff0d\001\002\000\006\012\uff13" +
    "\013\uff13\001\002\000\006\012\uff0e\013\uff0e\001\002\000" +
    "\012\032\u025d\035\000\043\u025a\065\u0259\001\002\000\004" +
    "\035\uff3a\001\002\000\004\010\uff3c\001\002\000\004\035" +
    "\040\001\002\000\004\010\u025f\001\002\000\004\010\uff3d" +
    "\001\002\000\004\035\uff39\001\002\000\042\005\uff3e\012" +
    "\uff3e\013\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e" +
    "\027\uff3e\030\uff3e\036\uff3e\040\uff3e\073\uff3e\107\uff3e\110" +
    "\uff3e\136\uff3e\001\002\000\004\010\uff3b\001\002\000\012" +
    "\032\u025d\035\000\043\u025a\065\u0259\001\002\000\004\010" +
    "\u0263\001\002\000\042\005\uff40\012\uff40\013\uff40\021\uff40" +
    "\022\uff40\023\uff40\024\uff40\025\uff40\027\uff40\030\uff40\036" +
    "\uff40\040\uff40\073\uff40\107\uff40\110\uff40\136\uff40\001\002" +
    "\000\012\032\u025d\035\000\043\u025a\065\u0259\001\002\000" +
    "\004\010\u0266\001\002\000\042\005\uff41\012\uff41\013\uff41" +
    "\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41\027\uff41\030" +
    "\uff41\036\uff41\040\uff41\073\uff41\107\uff41\110\uff41\136\uff41" +
    "\001\002\000\010\012\000\013\000\040\u0254\001\002\000" +
    "\006\012\uff14\013\uff14\001\002\000\012\032\u025d\035\000" +
    "\043\u025a\065\u0259\001\002\000\004\010\u026b\001\002\000" +
    "\042\005\uff42\012\uff42\013\uff42\021\uff42\022\uff42\023\uff42" +
    "\024\uff42\025\uff42\027\uff42\030\uff42\036\uff42\040\uff42\073" +
    "\uff42\107\uff42\110\uff42\136\uff42\001\002\000\012\032\u025d" +
    "\035\000\043\u025a\065\u0259\001\002\000\004\010\u026e\001" +
    "\002\000\042\005\uff3f\012\uff3f\013\uff3f\021\uff3f\022\uff3f" +
    "\023\uff3f\024\uff3f\025\uff3f\027\uff3f\030\uff3f\036\uff3f\040" +
    "\uff3f\073\uff3f\107\uff3f\110\uff3f\136\uff3f\001\002\000\024" +
    "\021\167\022\172\023\170\024\177\025\176\027\175\030" +
    "\173\036\174\136\200\001\002\000\010\012\uff1a\013\uff1a" +
    "\106\uff1a\001\002\000\024\021\167\022\172\023\170\024" +
    "\177\025\176\027\175\030\173\036\174\136\200\001\002" +
    "\000\016\020\051\031\052\032\043\034\046\056\044\205" +
    "\055\001\002\000\014\012\000\013\000\016\206\017\211" +
    "\106\000\001\002\000\010\012\uff18\013\uff18\106\uff18\001" +
    "\002\000\016\035\040\066\u024d\067\u024f\070\u0250\071\u024c" +
    "\072\u0251\001\002\000\010\012\uff15\013\uff15\106\uff15\001" +
    "\002\000\010\012\uff16\013\uff16\106\uff16\001\002\000\016" +
    "\020\051\031\052\032\043\034\046\056\044\205\055\001" +
    "\002\000\014\012\000\013\000\016\206\017\211\106\000" +
    "\001\002\000\010\012\uff17\013\uff17\106\uff17\001\002\000" +
    "\004\035\040\001\002\000\014\012\000\013\000\040\314" +
    "\105\000\106\000\001\002\000\012\012\uff1c\013\uff1c\105" +
    "\uff1c\106\uff1c\001\002\000\004\075\uff20\001\002\000\004" +
    "\075\uff1e\001\002\000\004\075\uff1d\001\002\000\004\035" +
    "\040\001\002\000\010\035\u0231\055\000\073\u0230\001\002" +
    "\000\004\055\u0284\001\002\000\004\035\040\001\002\000" +
    "\004\036\u0286\001\002\000\004\035\040\001\002\000\030" +
    "\012\000\013\000\015\000\075\000\076\u023a\077\u023b\100" +
    "\u023c\101\u023f\103\000\105\000\106\000\001\002\000\016" +
    "\012\uff25\013\uff25\015\uff25\103\uff25\105\uff25\106\uff25\001" +
    "\002\000\004\075\uff21\001\002\000\004\075\uff22\001\002" +
    "\000\010\005\uff49\040\uff49\073\uff49\001\002\000\010\005" +
    "\000\040\000\073\u0292\001\002\000\004\005\uff4f\001\002" +
    "\000\014\005\uff48\040\uff48\041\255\042\254\073\uff48\001" +
    "\002\000\022\005\ufedb\036\u0290\040\ufedb\041\ufedb\042\ufedb" +
    "\043\ufedb\044\ufedb\073\ufedb\001\002\000\022\007\236\020" +
    "\051\031\052\032\043\034\046\035\040\056\044\205\055" +
    "\001\002\000\014\005\uff47\040\uff47\041\255\042\254\073" +
    "\uff47\001\002\000\006\020\u0299\035\u029a\001\002\000\006" +
    "\005\000\040\u0295\001\002\000\006\005\uff36\040\uff36\001" +
    "\002\000\044\006\u022a\007\000\020\000\031\000\032\000" +
    "\034\000\035\000\043\u0226\056\000\065\u0225\066\000\067" +
    "\000\070\000\071\000\072\000\074\u0228\205\000\001\002" +
    "\000\004\005\uff4a\001\002\000\004\005\uff45\001\002\000" +
    "\004\005\uff46\001\002\000\006\005\uff38\040\uff38\001\002" +
    "\000\006\005\uff37\040\uff37\001\002\000\044\002\ufff2\003" +
    "\ufff2\004\ufff2\012\ufff2\013\ufff2\037\ufff2\045\ufff2\046\ufff2" +
    "\050\ufff2\060\ufff2\064\ufff2\111\ufff2\167\ufff2\213\ufff2\215" +
    "\ufff2\216\ufff2\217\ufff2\001\002\000\044\002\ufffa\003\ufffa" +
    "\004\ufffa\012\ufffa\013\ufffa\037\ufffa\045\ufffa\046\ufffa\050" +
    "\ufffa\060\ufffa\064\ufffa\111\ufffa\167\ufffa\213\ufffa\215\ufffa" +
    "\216\ufffa\217\ufffa\001\002\000\044\002\ufff8\003\ufff8\004" +
    "\ufff8\012\ufff8\013\ufff8\037\ufff8\045\ufff8\046\ufff8\050\ufff8" +
    "\060\ufff8\064\ufff8\111\ufff8\167\ufff8\213\ufff8\215\ufff8\216" +
    "\ufff8\217\ufff8\001\002\000\044\002\ufff5\003\ufff5\004\ufff5" +
    "\012\ufff5\013\ufff5\037\ufff5\045\ufff5\046\ufff5\050\ufff5\060" +
    "\ufff5\064\ufff5\111\ufff5\167\ufff5\213\ufff5\215\ufff5\216\ufff5" +
    "\217\ufff5\001\002\000\044\002\ufff3\003\ufff3\004\ufff3\012" +
    "\ufff3\013\ufff3\037\ufff3\045\ufff3\046\ufff3\050\ufff3\060\ufff3" +
    "\064\ufff3\111\ufff3\167\ufff3\213\ufff3\215\ufff3\216\ufff3\217" +
    "\ufff3\001\002\000\022\012\000\013\000\020\051\031\052" +
    "\032\043\034\046\056\044\205\055\001\002\000\006\012" +
    "\uffee\013\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u029f\000\040\002\015\003\017\004\034\005\021\013" +
    "\026\040\007\042\014\056\006\071\024\125\016\163\005" +
    "\202\010\204\004\207\013\223\030\001\001\000\004\015" +
    "\u029f\001\001\000\004\010\u029e\001\001\000\004\010\u029d" +
    "\001\001\000\004\010\u029c\001\001\000\004\010\u029b\001" +
    "\001\000\004\010\u029a\001\001\000\010\006\u022a\072\u0228" +
    "\073\u0226\001\001\000\002\001\001\000\004\010\u0221\001" +
    "\001\000\004\010\u0220\001\001\000\004\010\u021f\001\001" +
    "\000\004\010\u021e\001\001\000\002\001\001\000\012\006" +
    "\u01a4\126\u019f\133\u01a7\210\u01a3\001\001\000\002\001\001" +
    "\000\006\006\u0180\057\u017f\001\001\000\004\206\u0173\001" +
    "\001\000\004\010\u0171\001\001\000\004\164\344\001\001" +
    "\000\004\010\336\001\001\000\010\041\272\046\271\054" +
    "\276\001\001\000\004\010\270\001\001\000\002\001\001" +
    "\000\006\006\157\014\227\001\001\000\006\006\157\014" +
    "\156\001\001\000\034\002\015\005\154\013\026\040\007" +
    "\042\014\056\006\071\024\125\016\163\005\202\010\204" +
    "\004\207\013\223\030\001\001\000\004\206\073\001\001" +
    "\000\004\015\040\001\001\000\006\006\071\011\070\001" +
    "\001\000\020\006\052\024\055\034\041\036\044\037\046" +
    "\206\047\224\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\060\225\057\001\001\000\020\006" +
    "\052\024\055\034\041\036\044\037\046\206\047\224\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\065\034\041\036\044" +
    "\037\046\206\064\001\001\000\002\001\001\000\006\006" +
    "\060\225\066\001\001\000\002\001\001\000\004\015\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\153\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\140\203\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\041\036\044\037\121\001\001\000\002\001" +
    "\001\000\010\034\041\036\044\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\041\036\044\037\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\041\036\044\037\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\206\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\142\001\001\000\006\006\140" +
    "\203\143\001\001\000\002\001\001\000\010\034\041\036" +
    "\044\037\145\001\001\000\002\001\001\000\010\034\041" +
    "\036\044\037\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\041\036\044\037\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\221\034\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\161\001\001\000\006\006\164\016\162\001" +
    "\001\000\002\001\001\000\004\015\165\001\001\000\002" +
    "\001\001\000\004\007\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\203\034\041\036\044\037\046" +
    "\206\064\001\001\000\002\001\001\000\004\034\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\207\021\204" +
    "\023\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\212\015\211\022\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\215\034\041\036\044" +
    "\037\046\206\064\001\001\000\010\006\207\021\216\023" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\225\001\001\000\006\006\224\020\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\230\001\001\000" +
    "\002\001\001\000\004\015\232\001\001\000\002\001\001" +
    "\000\030\015\242\024\236\025\234\026\243\031\241\032" +
    "\237\033\240\034\041\036\044\037\046\206\064\001\001" +
    "\000\006\006\164\016\265\001\001\000\024\015\242\024" +
    "\236\031\263\032\237\033\240\034\041\036\044\037\046" +
    "\206\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\245\027\246\001\001\000\004\015\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\242\024\236\025\251\026\243\031\241\032\237\033" +
    "\240\034\041\036\044\037\046\206\064\001\001\000\006" +
    "\006\164\016\252\001\001\000\002\001\001\000\022\015" +
    "\242\024\236\032\262\033\240\034\041\036\044\037\046" +
    "\206\064\001\001\000\022\015\242\024\236\032\255\033" +
    "\240\034\041\036\044\037\046\206\064\001\001\000\002" +
    "\001\001\000\020\015\242\024\236\033\261\034\041\036" +
    "\044\037\046\206\064\001\001\000\020\015\242\024\236" +
    "\033\260\034\041\036\044\037\046\206\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\277\043\320\001\001\000" +
    "\006\006\277\043\311\001\001\000\006\006\277\043\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\303\044\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\307\045\306\001\001\000\002\001\001\000" +
    "\006\015\303\044\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\312\001\001\000" +
    "\006\006\315\055\314\001\001\000\004\015\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\315\055" +
    "\317\001\001\000\002\001\001\000\004\015\321\001\001" +
    "\000\012\015\324\047\326\050\325\052\322\001\001\000" +
    "\002\001\001\000\004\015\330\001\001\000\006\006\315" +
    "\055\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\333\051\332\001\001\000\004" +
    "\015\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\170\u0166\171\u0165\001\001\000\006\165\u015a\166" +
    "\u015b\001\001\000\006\015\u014d\137\u014e\001\001\000\006" +
    "\015\371\173\370\001\001\000\004\177\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\200\350\201\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\357\162\360\001\001\000\004\201\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\174\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\u010c\144\u0109\150\u0112\151\u0107" +
    "\155\u0108\175\u0106\001\001\000\004\176\u0101\001\001\000" +
    "\004\015\u0104\001\001\000\004\015\u0103\001\001\000\004" +
    "\015\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0144\152\u0143\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u012e\161\u012d\001\001" +
    "\000\002\001\001\000\004\153\u013b\001\001\000\014\024" +
    "\u013a\034\041\036\044\037\046\206\064\001\001\000\004" +
    "\015\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0119\001\001\000\002\001\001" +
    "\000\004\015\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\u0121\133\u0123\143\u0122\155\u011e\001\001" +
    "\000\002\001\001\000\006\006\u012e\161\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0126\001\001\000" +
    "\006\006\315\055\u0127\001\001\000\006\006\u012a\123\u012b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0130\001\001\000\006\006" +
    "\315\055\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\212\015\211\022\u0135\157\u0134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\155\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\u013e\154\u013c\155\u013d\001\001" +
    "\000\002\001\001\000\010\006\u0141\155\u0140\156\u013f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\u010c\144\u0109\150\u0145\151" +
    "\u0107\155\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0147\001\001\000\002\001" +
    "\001\000\004\034\u0149\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\u010c\144\u0109\150\u014c\151\u0107\155" +
    "\u0108\001\001\000\002\001\001\000\006\006\u0150\140\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u0153\141\u0152\001\001\000\002\001\001" +
    "\000\006\006\315\055\u0154\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u0157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\167\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0168\001\001\000\004\172\u016a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\u0175\034\041\036\044\037\046\206\064" +
    "\001\001\000\006\006\u0178\205\u0177\001\001\000\004\206" +
    "\u0179\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\u017b\034\041\036\044\037\046\206" +
    "\064\001\001\000\006\006\u0178\205\u017c\001\001\000\002" +
    "\001\001\000\006\006\u0178\205\u017e\001\001\000\002\001" +
    "\001\000\004\015\u0182\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0184\060\u0183\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0187\001\001\000\006" +
    "\006\u018b\062\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u018b\062\u018d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u0190\001\001\000\002\001\001" +
    "\000\016\024\u0192\034\041\036\044\037\046\064\u0193\206" +
    "\064\001\001\000\006\006\u019b\065\u019a\001\001\000\002" +
    "\001\001\000\006\006\u0197\066\u0196\001\001\000\004\063" +
    "\u0198\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\u019c\034\041\036\044\037\046\206" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u019b\065\u019d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01f2\127\u01f3\001\001" +
    "\000\004\145\u01ed\001\001\000\002\001\001\000\004\211" +
    "\u01c5\001\001\000\002\001\001\000\006\015\u01bb\146\u01bc" +
    "\001\001\000\006\015\u014d\137\u01ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u01ac" +
    "\134\u01ab\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01ae\001\001\000\002\001\001\000\006\015\u01b0" +
    "\135\u01b1\001\001\000\006\006\315\055\u01b9\001\001\000" +
    "\002\001\001\000\006\006\u01b4\136\u01b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u01b0\135\u01b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\u010c\144\u0109\150\u01be\151\u0107" +
    "\155\u0108\001\001\000\002\001\001\000\006\006\u01c2\147" +
    "\u01c0\001\001\000\002\001\001\000\004\015\u01c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\u01ca\212\u01c9\213\u01cc\001\001\000\006\006" +
    "\u01da\216\u01d9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\153\u01ce\001\001\000\006\006" +
    "\u01d2\215\u01d1\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u01d5\214\u01d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\213\u01d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\217\u01e9\001" +
    "\001\000\006\006\u01dd\220\u01dc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u01e1\221\u01e0\001\001\000\002\001\001\000\036" +
    "\002\015\004\u01e2\005\021\013\026\040\007\042\014\056" +
    "\006\071\024\125\016\163\005\202\010\204\004\207\013" +
    "\223\030\001\001\000\002\001\001\000\040\002\015\005" +
    "\154\006\u01e5\013\026\040\007\042\014\056\006\071\024" +
    "\125\016\163\005\202\010\204\004\207\013\222\u01e3\223" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u01f8\130\u01f5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u01fd\131" +
    "\u01fc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u0206" +
    "\142\u0205\001\001\000\006\006\u01fd\131\u0207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0206\142\u020a\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0206\142\u020d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u0206\142" +
    "\u0210\001\001\000\002\001\001\000\006\006\u0214\132\u0213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u01fd\131\u0216\001\001\000\002\001\001" +
    "\000\006\006\u0214\132\u0218\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0206\142\u021b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\u028e\024\236\031\u028d" +
    "\032\237\033\240\034\041\036\044\037\046\074\u028c\075" +
    "\u028b\100\u028a\206\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u022b\034\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u022e\107\u022d\001\001" +
    "\000\010\006\u023d\112\u023f\113\u023c\001\001\000\006\006" +
    "\u0232\111\u0231\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u0235\110\u0234\001\001\000\002\001\001\000" +
    "\006\015\u022e\107\u0236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u027f\114\u0289\001\001" +
    "\000\006\006\u027f\114\u0288\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u027f\114\u027d\001\001\000\006" +
    "\006\164\016\u0240\001\001\000\006\006\u0241\116\u0243\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u0245" +
    "\117\u0246\001\001\000\010\015\u026e\100\u0270\120\u026f\001" +
    "\001\000\002\001\001\000\006\006\u0249\122\u0248\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u024d\100\u0251\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u012a\123\u0266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u012a" +
    "\123\u0252\001\001\000\006\006\u0254\124\u0255\001\001\000" +
    "\006\006\u0249\122\u0256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\u025d\101\u025b\102" +
    "\u025a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u025f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\u025d\101\u0261\102\u025a\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\u025d\101\u0264\102\u025a\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u0254\124" +
    "\u0267\001\001\000\002\001\001\000\010\006\u025d\101\u0269" +
    "\102\u025a\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u025d\101\u026c\102\u025a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0277\001\001\000\002\001" +
    "\001\000\004\007\u0271\001\001\000\014\024\u0272\034\041" +
    "\036\044\037\046\206\064\001\001\000\010\006\u0275\023" +
    "\u0274\121\u0273\001\001\000\002\001\001\000\010\015\u026e" +
    "\100\u0270\120\u0276\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\u0278\034\041\036\044\037\046\206\064" +
    "\001\001\000\010\006\u0275\023\u0274\121\u0279\001\001\000" +
    "\002\001\001\000\004\015\u027b\001\001\000\006\006\315" +
    "\055\u027c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0281\001\001" +
    "\000\006\006\u0232\111\u0282\001\001\000\002\001\001\000" +
    "\004\015\u0284\001\001\000\002\001\001\000\004\015\u0286" +
    "\001\001\000\010\006\u023d\112\u0287\113\u023c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0293\103\u0292\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\242" +
    "\024\236\031\u0290\032\237\033\240\034\041\036\044\037" +
    "\046\206\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u0296\076\u0295\001\001\000\002\001\001\000" +
    "\010\006\u022a\072\u0297\073\u0226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\052\024\055\034\041\036\044\037\046\206\047\224\u02a0" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public int cont = 0;
    public String errores="";
    
    public void syntax_error(Symbol s){
         errores +="Error de sintaxis. Linea: " + (s.right + 1) +" Columna: " + s.left + ". Texto: \"" + s.value + "\"\n";
    }

    public Symbol getS(){
        return this.s;
}

public void unrecovered_syntax_error(Symbol s){ 
   report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= querys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // querys ::= querys sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // querys ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querys",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= eliminar fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= update fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= truncate fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= drop fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= insert fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= select fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= create fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= alter fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= procedure fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sets fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= declares fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= exec fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exec ::= EXECUTE objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exec ::= EXEC objeto_nombre enviar_datos 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exec",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // enviar_datos ::= VARIABLES ASIGNAR data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // enviar_datos ::= data_tipo mandar_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // enviar_datos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enviar_datos",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mandar_mas ::= COMA enviar_datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mandar_mas ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandar_mas",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sets ::= SET VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sets ::= SET NOCOUNT ON sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets",130, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sets2 ::= COMA VARIABLES ASIGNAR data_tipo sets2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sets2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sets2",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declares ::= DECLARE VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares2 ::= COMA VARIABLES tipo_dato declares2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares2",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure ::= CREATE alterar proc objeto_nombre parametros with_procedure replication AS empezar querys final 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",133, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alterar ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // alterar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alterar",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // proc ::= PROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros ::= parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros1 ::= ARROBA IDENTIFICADOR tipo_dato tipo_parametro parametros2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros1",137, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros2 ::= COMA parametros1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_parametro ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_parametro ::= READONLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_parametro ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // with_procedure ::= WITH procedure_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // with_procedure ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_procedure",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure_option ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procedure_option ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedure_option ::= EXECUTE AS CLAUSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_option",141, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // replication ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // replication ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("replication",142, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // empezar ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // empezar ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // final ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // final ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // alter ::= ALTER opciones 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opciones ::= DATABASE database_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opciones ::= INDEX index_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opciones ::= TABLE table_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opciones ::= USER user_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opciones ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // database_alter ::= nombre_actual tipo_alter_base 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_alter",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // nombre_actual ::= CURRENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // nombre_actual ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_actual",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_alter_base ::= MODIFY NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_alter_base ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // index_alter ::= nombre_index ON objeto_nombre accion_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_alter",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // nombre_index ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // nombre_index ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_index",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // accion_index ::= REBUILD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // accion_index ::= DISABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // accion_index ::= REORGANIZE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // accion_index ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // accion_index ::= RESUME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // accion_index ::= PAUSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // accion_index ::= ABORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_index",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // table_alter ::= objeto_nombre accion_alter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_alter",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // accion_alter ::= ALTER COLUMN add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // accion_alter ::= ADD tipo_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // accion_alter ::= DROP drop_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_alter",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_add ::= add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_add",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // drop_column ::= CONSTRAINT objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // drop_column ::= COLUMN objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // drop_column ::= INDEX objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_column",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // user_alter ::= IDENTIFICADOR WITH set_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_alter",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // set_item ::= set_item1 set_item2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // set_item1 ::= NAME ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // set_item1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // set_item1 ::= LOGIN ASIGNAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // set_item1 ::= PASSWORD ASIGNAR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item1",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // set_item2 ::= COMA set_item1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // set_item2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_item2",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // create ::= CREATE opciones_crear 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opciones_crear ::= DATABASE database_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opciones_crear ::= opciones_index INDEX index_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opciones_crear ::= TABLE table_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opciones_crear ::= USER user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opciones_crear ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_crear",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // database_create ::= objeto_nombre extras_database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database_create",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // extras_database ::= ON PRIMARY PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // extras_database ::= COLLATE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // extras_database ::= WITH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // extras_database ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extras_database",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // filespec ::= NAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // filespec ::= NAMES ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // filespec ::= FILE ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // filespec ::= FILENAME ASIGNAR STRING mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // filespec ::= SIZE ASIGNAR INT_NUM mas_file2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // filespec ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("filespec",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mas_file2 ::= COMA filespec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mas_file2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mas_file ::= COMA PARENTESIS_ABIERTO filespec PARENTESIS_CERRADO mas_file 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mas_file ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_file",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opciones_index ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // opciones_index ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // opciones_index ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // opciones_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_index",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // index_create ::= objeto_nombre ON objeto_nombre PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_create",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // column_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_index",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mas_index ::= INCLUDE PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mas_index ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_index",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // view_create ::= objeto_nombre column_view AS select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_create",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // column_view ::= PARENTESIS_ABIERTO column_view1 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // column_view ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // column_view1 ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_view1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // user ::= IDENTIFICADOR FOR LOGIN IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // table_create ::= objeto_nombre PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO extra_create_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_create",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // extra_create_table ::= ON objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // extra_create_table ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // extra_create_table ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_create_table",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // add_column ::= add_column1 add_column2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // add_column1 ::= objeto_nombre tipo_dato constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // add_column1 ::= aux2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column1",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // add_column2 ::= COMA add_column 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // add_column2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_column2",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipo_dato ::= CHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipo_dato ::= VARCHAR PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipo_dato ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipo_dato ::= IMAGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipo_dato ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipo_dato ::= VARBINARY PARENTESIS_ABIERTO MAX PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_dato ::= DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_dato ::= DATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_dato ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo_dato ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipo_dato ::= TIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipo_dato ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipo_dato ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipo_dato ::= FLOAT PARENTESIS_ABIERTO VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipo_dato ::= MONEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipo_dato ::= BIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipo_dato ::= DECIMAL PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_dato ::= NUMERIC PARENTESIS_ABIERTO VALORES_NUMEROS COMA VALORES_NUMEROS PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // constraint ::= constraint1 constraint2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // constraint ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // constraint1 ::= IDENTITY PARENTESIS_ABIERTO NUM COMA NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // constraint1 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // constraint1 ::= UNIQUE extra_unique 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // constraint1 ::= PRIMARY KEY extra_primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // constraint1 ::= FOREIGN KEY PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO REFERENCES objeto_nombre PARENTESIS_ABIERTO objeto_nombre PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // constraint1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // constraint1 ::= CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // constraint1 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // extra_unique ::= PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // extra_unique ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_unique",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // extra_primary ::= opciones_index PARENTESIS_ABIERTO objeto_nombre mas_de_un_objeto tipo_orden PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // extra_primary ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_primary",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // constraint2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // constraint2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expresion_logica ::= otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // aux2 ::= constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // aux2 ::= CONSTRAINT objeto_nombre constraint1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // select ::= SELECT option_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // option_select ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // option_select ::= seleccion columna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_select",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // seleccion ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // seleccion ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // seleccion ::= TOP expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // seleccion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // columna1 ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // columna1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // columna1 ::= objeto_nombre ASIGNAR E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // columna2 ::= COMA option_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // columna2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // data_tipo_operacion ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // data_tipo_operacion ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funciones ::= AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // funciones ::= COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // funciones ::= MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // funciones ::= MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // valor ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // valor ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // valor ::= puede objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // puede ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // puede ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puede",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // alias_columna ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // alias_columna ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // alias_columna ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_columna",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // operacion ::= operacion_matematica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // operacion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // operacion_matematica ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_matematica",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // operacion_logica ::= data_tipo_operacion operadores data_tipo_operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // operador ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // origen ::= objeto_nombre alias_tabla origen1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // origen1 ::= COMA origen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // origen1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("origen1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // alias_tabla ::= AS STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // alias_tabla ::= AS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // alias_tabla ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // alias_tabla ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_tabla",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // joins ::= tipo_join JOIN objeto_nombre alias_tabla ON objeto_nombre ASIGNAR objeto_nombre joins 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // joins ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("joins",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // tipo_join ::= INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // tipo_join ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // tipo_join1 ::= OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // tipo_join1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_join1",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // agrupado ::= GROUP BY objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // agrupado ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupado",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // teniendo ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // teniendo1 ::= funciones operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // teniendo1 ::= objeto_nombre operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // teniendo2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("teniendo2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // orden ::= ORDER BY objeto_nombre tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // orden ::= ORDER BY funciones tipo_orden orden2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // tipo_orden ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // tipo_orden ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // tipo_orden ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_orden",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // orden2 ::= COMA orden 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // orden2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // insert ::= INSERT into objeto_nombre campos VALUES valores 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // insert ::= INSERT into objeto_nombre campos DEFAULT VALUES 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // into ::= INTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // into ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("into",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // campos ::= PARENTESIS_ABIERTO campos2 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // campos ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // campos2 ::= IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campos2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // mas_de_un_identificador ::= COMA IDENTIFICADOR mas_de_un_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // mas_de_un_identificador ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_identificador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // valores ::= PARENTESIS_ABIERTO valores2 PARENTESIS_CERRADO mas_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // valores2 ::= data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // mas_valores2 ::= COMA data_tipo mas_valores2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // mas_valores2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // mas_valores ::= COMA valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // mas_valores ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_valores",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // drop ::= DROP tipo_objeto 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // if_op ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // if_op ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_op",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // tipo_objeto ::= TABLE if_op tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // tipo_objeto ::= index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // tipo_objeto ::= database 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_objeto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // tabla ::= objeto_nombre tabla2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // tabla2 ::= COMA tabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // tabla2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // index ::= INDEX if_op objeto_nombre index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // index2 ::= drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // index2 ::= drop_backward_compatible_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // drop_relational_or_xml_or_spatial_index ::= ON objeto_nombre drop_relational_or_xml_or_spatial_index2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // drop_relational_or_xml_or_spatial_index2 ::= COMA objeto_nombre drop_relational_or_xml_or_spatial_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // drop_relational_or_xml_or_spatial_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // drop_backward_compatible_index ::= objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // drop_backward_compatible_index2 ::= mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // drop_backward_compatible_index2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_backward_compatible_index2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // database ::= DATABASE if_op objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // mas_de_un_objeto ::= COMA objeto_nombre mas_de_un_objeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // mas_de_un_objeto ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_de_un_objeto",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // truncate ::= TRUNCATE TABLE objeto_nombre 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("truncate",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // update ::= UPDATE opciones_delete objeto_nombre SET objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores.");cont++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // asignaciones ::= asignaciones1 asignaciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // asignaciones2 ::= COMA objeto_nombre ASIGNAR asignaciones condicionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // asignaciones2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // asignaciones1 ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // E ::= E SUMA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // E ::= E RESTA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // T ::= T MULTIPLICACION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // T ::= T DIVISION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // T ::= F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // F ::= PARENTESIS_ABIERTO E PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // F ::= objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // F ::= data_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NUM ::= INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // NUM ::= BIT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FLOTANTE ::= FLOAT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOTANTE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // VALORES_NUMEROS ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // VALORES_NUMEROS ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_NUMEROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // eliminar ::= DELETE opciones_delete FROM objeto_nombre condicionales 
            {
              Object RESULT =null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // fin ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // fin ::= GO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // opciones_delete ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // opciones_delete ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_delete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expresion ::= PARENTESIS_ABIERTO NUM PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expresion ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // porcentaje ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // porcentaje ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porcentaje",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // condicionales ::= WHERE objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // condicionales ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // condicionales1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // otra_condicion ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // otra_condicion ::= objeto_nombre operadores data_tipo condicionales1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // data_tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // data_tipo ::= VALORES_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // data_tipo ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // data_tipo ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // VARIABLES ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",132, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // operadores ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // operadores ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // operadores ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // operadores ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // operadores ::= DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // operadores ::= LIKE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // operadores ::= BETWEEN NUM AND INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // operadores ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // operadores ::= IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // objeto_nombre ::= IDENTIFICADOR objeto_nombre1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // objeto_nombre1 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // objeto_nombre1 ::= PUNTO objeto_nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // objeto_nombre2 ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // objeto_nombre2 ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objeto_nombre2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
